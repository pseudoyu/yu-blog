<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pseudoyu</title><link>https://www.pseudoyu.com/en/</link><description>Recent content on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 12 Jan 2023 11:06:04 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/index.xml" rel="self" type="application/rss+xml"/><item><title>[译] Go 1.20 新变化！第一部分：语言特性</title><link>https://www.pseudoyu.com/en/2023/01/12/golang_120_language_changes/</link><pubDate>Thu, 12 Jan 2023 11:06:04 +0800</pubDate><guid>https://www.pseudoyu.com/en/2023/01/12/golang_120_language_changes/</guid><description>前言 又到了 Go 发布新版本的时刻了！2022 年第一季度的 Go 1.18 是一个主版本，它在语言中增加了期待已久的泛型，同时还有许多微小功能更新与优化。202</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>又到了 Go 发布新版本的时刻了！2022 年第一季度的 Go 1.18 是一个主版本，它在语言中增加了期待已久的泛型，同时还有<a href="https://blog.carlmjohnson.net/post/2021/golang-118-minor-features/">许多微小功能更新</a>与<a href="https://blog.carlmjohnson.net/post/2022/golang-118-even-more-minor-features/">优化</a>。2022 年第三季度的 Go 1.19 是一个<a href="https://blog.carlmjohnson.net/post/2022/golang-119-new-features/">比较低调的</a>版本。现在是 2023 年，Go 1.20 <a href="https://groups.google.com/g/golang-nuts/c/HMUAm5j5raw/m/va3dxBFyAgAJ">RC 版本</a>已经发布，而正式版本也即将到来，Go 团队已经发布了<a href="https://tip.golang.org/doc/go1.20">版本说明草案</a>。</p>
<p>在我看来，Go 1.20 的影响介于 1.18 和 1.19 之间，比 1.19 有更多的功能更新并解决了一些长期存在的问题，但没有达到 1.18 中为语言增加泛型这样的重磅规模。尽管如此，我还是要把我对“Go 1.20 的新变化”的看法分成系列三篇博文。首先，我写了 Go 1.20 中的语言变化（如下），在下一篇文章中，我将写标准库的重要变化，最后一篇将讲解 Go 1.20 中我最喜欢的对标准库的小改动。</p>
<h2 id="语言特性">语言特性</h2>
<p>那么，让我们来看看语言方面的变化。首先，对泛型的规则做了一个小小的修改。有了 Go 泛型，你可以通过一个函数获取任何 <code>map</code> 的键：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">K</span> <span class="nx">comparable</span><span class="p">,</span> <span class="nx">V</span> <span class="nx">any</span><span class="p">](</span><span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span><span class="nx">V</span><span class="p">)</span> <span class="p">[]</span><span class="nx">K</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="nx">K</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">keys</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这段代码中，<code>K comparable, V any</code>为“类型约束”。这意味着 K 可以是任何 comparable 的类型，而 V 则没有类型限制。comparable 类型为数字、布尔、字符串和由 comparable 元素组成的固定大小的复合类型等。因此，K 为 int，V 为一个 bytes 切片是合法的，但 K 是一个 bytes 切片是非法的。</p>
<p>我说过上面的代码会给你任何 <code>map</code> 的键，但在 Go 1.18 和 1.19 中，这并不是完全正确的。如果你试图把它用在一个键值为接口类型的 <code>map</code> 上，它将不会被编译。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">any</span><span class="p">]</span><span class="nx">any</span><span class="p">)</span> <span class="c1">// ok
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">keys</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 编译器错误（Go 1.19）：any 没有实现 comparable
</span></span></span></code></pre></div><p>这个问题归结为围绕 <code>K comparable</code> 含义的解读。要作为 <code>map</code> 键使用，类型必须被 Go 编译器认为是 comparable 的。例如，这是无效的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kd">func</span><span class="p">()]</span><span class="nx">any</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 编译器错误：无效的 map 键类型 func()
</span></span></span></code></pre></div><p>然而，你可以通过使用接口来得到一个运行时错误而不是编译器错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">any</span><span class="p">]</span><span class="nx">any</span><span class="p">)</span> <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">k</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">m</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span> <span class="c1">// panic：运行时错误：哈希值为不可哈希的类型 func()
</span></span></span></code></pre></div><p>所以，像 <code>any</code> 这样的接口类型是 map 的有效键类型，但如果你试图把一个缺少有效类型定义的键放到 map 中，就会在运行时出现 panic 错误。显然，没有人希望他们的代码在运行时出现 panic 错误，但这是在 map 中允许动态类型键的唯一方法。</p>
<p>下面是一个从不同角度看同一问题的例子。假设我有一个这样的错误类型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">myerr</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="nx">myerr</span><span class="p">)</span> <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nf">m</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而现在我想使用自定义的错误类型进行比较：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">err1</span> <span class="kt">error</span> <span class="p">=</span> <span class="nf">myerr</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;err1&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">err2</span> <span class="kt">error</span> <span class="p">=</span> <span class="nf">myerr</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;err2&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err1</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err2</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">)</span>  <span class="c1">// true true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err1</span> <span class="o">==</span> <span class="nx">err2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// panic：运行时错误：对 main.myerr 不可比类型进行比较
</span></span></span></code></pre></div><p>正如你所看到的，一个接口值在编译时被认为是 <code>comparable</code> 类型，但是如果它被赋的值是一个“不可比类型”，则在运行时就会出现 panic。如果你试图比较两个 <code>http.Handler</code>，而它们恰好都是 <code>http.HandlerFuncs</code>，你同样可以看到这个问题。</p>
<p>当 Go 1.18 支持了泛型后，<a href="https://github.com/golang/go/issues/49587">大家发现</a>，由于接口在编译时被认为是 ，但可能会包含不可比较的具体类型。如果你写的泛型代码的类型约束是<code>comparable</code>，但错误的值被存储在一个接口中，就有可能出现运行时 panic。保守起见，<a href="https://github.com/golang/go/issues/50646">Go 团队决定</a>在评估（此特性）的全部影响阶段，Go 1.18 限制使用接口作为<code>comparable</code> 类型。</p>
<p>现在已经过了一年了，也发布了两个版本，经过大量在 <a href="https://github.com/golang/go/issues/51338">Github 上进行的冗长讨论</a>，Go 团队认为在通用代码中使用接口作为 <code>comparable</code> 类型应该是足够安全的。如果你在 Go 1.20 中运行<code>keys(map[any]any{})</code>，它可以正常运行，你不必考虑上面的任何说明。</p>
<hr>
<p>Go 1.20 中的另一个语言变化更容易解释。如果你有一个切片，现在你可以很容易地将其转换为一个固定长度的数组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;b&#34;</span><span class="p">,</span> <span class="s">&#34;c&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span></code></pre></div><p>如果切片比数组短，你会因越界而产生 panic：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="nb">int</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// panic: 运行时错误: 不能将长度为 3 的切片转换成长度为 4 的数组或数组指针
</span></span></span></code></pre></div><p>这源于 Go 1.17 中增加的数组指针转换特性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;b&#34;</span><span class="p">,</span> <span class="s">&#34;c&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">p</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span><span class="p">)(</span><span class="nx">s</span><span class="p">)</span>
</span></span></code></pre></div><p>在这种情况下，p 指向 s 定义的数组，因此修改一个就会修改另一个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;b&#34;</span><span class="p">,</span> <span class="s">&#34;c&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">p</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span><span class="p">)(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;d&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;e&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="c1">// [d e c] &amp;[d e c]
</span></span></span></code></pre></div><p>另一方面，随着 Go 1.20 中新增的切片转换为数组特性，数组是 切片内容的副本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;b&#34;</span><span class="p">,</span> <span class="s">&#34;c&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;d&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;e&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [d b c] [a e c]
</span></span></span></code></pre></div><hr>
<p>除了将切片转换为数组的语法外，Go 1.20 还为处理切片数据的 <code>unsafe</code> 包带来了一些新增内容。<code>reflect</code> 包一直有<a href="https://pkg.go.dev/reflect#SliceHeader">reflect.SliceHeader</a>和<a href="https://pkg.go.dev/reflect#StringHeader">reflect.StringHeader</a>，它们是 Go 中切片和字符串的运行时表示:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SliceHeader</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Len</span>  <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Cap</span>  <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">StringHeader</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Len</span>  <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>reflect.SliceHeader</code> 和 <code>reflect.StringHeader</code>都有一个 Warning 提示：“它的表示方法可能在以后的版本中改变，因此不能确保障安全或可移植”，并且在<a href="https://go-review.googlesource.com/c/go/+/401434">试图废除它们</a>。误用这些类型可能会<a href="https://github.com/golang/go/issues/40701">导致代码崩溃</a>，但是在实践中，很多程序都依赖于类似这样的切片布局，很难想象 Go 团队会在没有大量警告的情况下改变它，因为很多程序会崩溃。</p>
<p>为了给 Gopher 们提供一种官方支持的编写不安全代码的方式，Go 1.17 增加了<a href="https://pkg.go.dev/unsafe#Slice">unsafe.Slice</a>，它允许你把任何指针变成一个切片（不管是否是个好主意）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">obj</span> <span class="o">:=</span> <span class="kd">struct</span><span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span> <span class="kt">int</span> <span class="p">}{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">slice</span> <span class="o">:=</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Slice</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="nx">slice</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">slice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// {4 5 3} [4 5 3]
</span></span></span></code></pre></div><p>在 Go 1.20 中，还有 <a href="https://pkg.go.dev/unsafe@go1.20rc2#SliceData">unsafe.SliceData</a>（它返回一个指向切片数据的指针），<a href="https://pkg.go.dev/unsafe@go1.20rc2#String">unsafe.String</a>（它以不安全的方式通过一个 byte 指针创建字符串），以及 <a href="https://pkg.go.dev/unsafe@go1.20rc2#StringData">unsafe.StringData</a>（它以不安全的方式返回一个指向字符串数据的指针）。</p>
<p>这些字符串函数是额外增加的不安全方式，因为它们允许你违反 Go 的字符串不可变规则，但它也给了你很大的控制权，可以在不分配新内存的前提下转换 byte 切片。</p>
<p>这些工具像利刃一样，好用却很容易割伤自己。在语言中直接支持这些工具可能更好，而不是仅仅让大家使用 <code>unsafe.Pointer</code> 来祈祷它奏效。</p>
<p>用 Hank Hill 的话来形容，<a href="https://www.getyarn.io/yarn-clip/08e52ddd-63ee-429b-b40c-b12c8ff6670b">“无论你做什么，你都应该以正确的方式去做，即使是错误的事情。”</a></p>
<h2 id="文章信息">文章信息</h2>
<blockquote>
<ol>
<li><a href="https://blog.carlmjohnson.net/post/2023/golang-120-language-changes/">原文地址</a></li>
<li><a href="https://carlmjohnson.net/">原文作者：Carl M. Johnson</a></li>
<li><a href="https://github.com/gocn/translator/blob/master/2023/w02_golang_120_language_changes.md">本文永久链接</a></li>
<li><a href="https://github.com/gocn/translator">GoCN &lt;每周译 Go&gt;</a></li>
<li><a href="https://github.com/pseudoyu">译者：pseudoyu</a></li>
<li><a href="https://github.com/focozz">校对：小超人</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>周报 #25 - 基于 Crossbell 的个人信息输出与同步系统（重构）</title><link>https://www.pseudoyu.com/en/2023/01/09/weekly_review_20230109/</link><pubDate>Mon, 09 Jan 2023 19:12:56 +0800</pubDate><guid>https://www.pseudoyu.com/en/2023/01/09/weekly_review_20230109/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2023-01-01 到 2023-01-09 这周生活的记录与思考。 这是 2023 年的第一篇周报，明明感觉跨年似乎还在昨天，一月上旬却已然结束，大概是心理</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_20230109_photo.png" alt="weekly_review_20230109_photo"></p>
<p>本篇是对 <code>2023-01-01</code> 到 <code>2023-01-09</code> 这周生活的记录与思考。</p>
<p>这是 2023 年的第一篇周报，明明感觉跨年似乎还在昨天，一月上旬却已然结束，大概是心理上对于时间的感知愈加迟钝了吧。</p>
<p>跨年时写了一篇还算详尽的年度总结，将这过去的一年中的发生的种种悉数道来，写完后发现篇幅已经超过预计，再加上新年计划与期待这一块当时也还没有理清思绪，所以略过了，所以也就趁着新年伊始的这篇周报，浅立一下 Flag 了，有些是小小的习惯养成，有些是长远的充满不确定性的规划，也不知道未来的这一年是否能如愿，但列出来了就会更有一些动力，也当作是一种监督了。</p>
<p>宅了快两个月，周末终于决定出门去朋友家蹭饭，度过了快乐的一天（不然感觉自己都已经不知道怎么跟人面对面讲话了）；虽然出片率堪忧，但可算是把照片修出来了，发了两篇摄影集；整理自己的各种软硬件服务（每年的仪式感了，总觉得整理后就会更有动力重新开始）；整理的时候想起之前的一些小计划，搭建了一个网站运行了 <a href="https://zlib.pseudoyu.com/">IPFS 版 ZLibrary</a>，却得到了意料之外的关注，吓得我连夜优化服务器和线路；以及很多有意思的事。</p>
<h2 id="个人服务重构">个人服务重构</h2>
<h3 id="服务管理">服务管理</h3>
<p>跟往年一样。开年就整理了自己的各种服务，发现居然已经有 20 个之多，且半数是 serverless，这一年白嫖功力见长。为了方便管理，用开源的 Uptime Kuma 为搭建了一个监控服务，并且绑定了 Telegram Bot 提醒，放心了许多。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uptime_kuma_yu_services.png" alt="uptime_kuma_yu_services"></p>
<p>说来有趣，其实自己之前一直觉得用服务器管理网站很麻烦，每次迁移或是服务变动总是很头疼，所以把大部分的服务都托管到了 Railway、Vercel、Supabase 这几个 Serverless 平台，因为大多是一些个人的服务，没什么太高配置需求，安全稳定就够了，就一直没折腾 Nginx 反向代理、https 证书这些。</p>
<p>而之前有提到过最近帮一个二次元同学做 B 站直播的房管和技术支持，就想着用一台白嫖的甲骨文日本机器来专门做直播监控和自动录制。因为有时候朋友也需要能够直接查看和下载，那自然一个好记的域名、国内网络环境下的访问速度、下载带宽等都要考虑在内，Serverless 服务就已经远远不够（也并不太划算了），于是探索了一些方案，选择了 <a href="https://nginxproxymanager.com/">Nginx Proxy Manager</a> 这一便捷的反向代理工具。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/npm_yu_dashboard.png" alt="npm_yu_dashboard"></p>
<p>我在一台线路比较好（CN2 GIA）的搬瓦工机器上进行部署，托管自己的各项服务，能够保障还不错的访问体验。因为也可以通过通配符匹配的方式直接为自己的 <code>*.pseudoyu.com</code> 子域名统一签发 https 证书和自动续期，很省心。配合上述的监控，目前使用了一周，还挺舒服的。</p>
<p>官方文档很清晰详细，配合 docker-compose 这样人性化的容器服务管理方式，操作起来上手很快，不过可能还是会考虑后面出一个教程，让想托管一些像是博客这些小服务的朋友们有所参考。</p>
<h3 id="rss-输入">RSS 输入</h3>
<p>2022 年其实大多都还是专注在博客输出以及自己的 Telegram 频道上，对于输入和各个平台同步这一块其实没花太多心思，导致自己的 RSS 订阅堆积，newsletter 也有些过载，反倒是没能好好过滤输入信息源，于是删除了用了很久的 NetNewsWire，通过 Railway + Supabase 的方式搭建了一个更轻量级的 Miniflux，作为自己的主要阅读器，并且对 RSS 信息源作了筛选，控制在了 52 个，几乎都是个人博客，后续也会继续优化调整。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/miniflux_yu_page.png" alt="miniflux_yu_page"></p>
<p>虽然有了 Miniflux 提供了还不错的阅读体验，但我其实更习惯于点进原文，我总是觉得对于个人博客来说，不仅仅是内容，网站的风格设计、一些相关的文章和主题也都是属于博主不可或缺的一部分，才能带来阅读更完整的享受。</p>
<p>RSS 阅读器对于我更多是作为第一步聚合工具，而由于 Miniflux 是一个基于网站的服务，并没办法做好很即时的提醒，而我每天又高度依赖 Telegram，所以基于 <a href="https://github.com/Rongronggg9/RSS-to-Telegram-Bot">RSS to Telegram Bot</a> 搭建了自己的 Telegram 提醒，将这些信息源更新推送给我，看到一些感兴趣的标题会留个印象，空闲时统一到 Miniflux 去阅读查看。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_rss_to_tg_bot.png" alt="yu_rss_to_tg_bot"></p>
<p>这样下来也比较不容易错过想看的文章，也不至于造成太多信息堆积，目前这套方案使用下来感觉很不错，顺便每次周末看到各种周报的时候也催更效果显著（<del>这周日出去玩了，合理拖更</del>）。</p>
<h3 id="telegram-输出">Telegram 输出</h3>
<p>我同样基于 Railway + Supabase 方式搭建了一个自己的 n8n 同步服务，将自己的各平台输入同步到频道，详细描述可以看这篇『<a href="https://www.pseudoyu.com/en/2022/09/19/weekly_review_20220919/">周报 #12 - 赛博空间、自我定义与界限</a>』。</p>
<p>之前平台基于 <a href="https://github.com/reorx">Reorx</a> 的方案进行了一些自己的调整，但一直没添加更多信息源，国内源较少。</p>
<p>虽然自己自己目前国内的各个平台以及极少进行分享，但也总共是自己的一部分，再加上新增了少数派作为自己的一些工作效率类文章发表渠道，所以在朋友<a href="https://blog.tujunjie.com/">涂俊杰 JunJie</a> 推荐了 RSSHub 与 n8n 集成这种形式后，我在服务器上部署了一套 <a href="https://github.com/DIYgod/RSSHub">RSSHub</a> 服务体验了一下，顿时感觉是很惊艳的解决方案，火速给自己的 Telegram 信息流频道加上了网易云、微博、B 站和少数派的同步支持，内容更加丰富了。</p>
<h3 id="crossbell-同步">Crossbell 同步</h3>
<p>虽然像是 Twitter、Telegram 已经是比较大的平台，但毕竟是中心化的产物，再加上最近的各种风波，对于自己这些信息源的归集总是不放心 Telegram 作为最终站，尤其是我常常在删消息时差点误点删除全部（奇怪的交互体验），所以信息的同步导出部分也是很重要一环。</p>
<p>自己之前提到过的 Side Project 也算是在做这样的事，不过作为一个 Web3 从业者，自然也是眼馋基于区块链的解决方案很久了。其实毕业设计也是做的<a href="https://github.com/pseudoyu/uright">基于 Ethereum 和 IPFS 的数据所有权保护 ÐApp</a> 项目，不过我那个纸糊的 Demo 项目自然是没法满足自己的各种需求，而当时的代码写得实在太乱也没有去重构的欲望了，于是开始找寻链上解决方案。</p>
<p>好久之前关注了 <a href="https://crossbell.io/">Crossbell</a>，也莫名机缘巧合结识了不少 <a href="https://rss3.io/">RSS3</a> 的朋友，但对 Crossbell 之前的印象还停留在 <a href="https://diygod.me/">Diygod</a> 在推特上发的 <a href="https://crosssync.app/">CrossSync</a> 浏览器插件是基于这个链的，当时手机打开的链接，关联钱包并不方便，所以搁置了。</p>
<p>所以想着去官网逛一下，结果发现居然已经有了 <a href="https://xlog.app/">xLog</a>、<a href="https://xsync.app/">xSync</a>、<a href="https://xchar.app/">xChar</a>、<a href="https://crossbell.io/feed">xFeed</a> 等好几项应用，而最关注的 xSync 居然还刚好支持 Telegram Channel，完美匹配了我的需求。</p>
<h4 id="xlog-同步发布博文">xLog 同步发布博文</h4>
<p>于是开始一番配置和装修，首先是将自己个人思考相关的博文同步到了 xLog 上，视觉效果和体验感都不错，且基于 Crossbell 地址能够很方便地进行 follow 和评论。</p>
<p>这是我的 xLog 访问地址：<a href="https://xlog.pseudoyu.com/">xlog.pseudoyu.com</a>，有兴趣的朋友们也可以关注一下，不过目前出于定制化程度、各种历史文章迁移路由问题、自己各项数据统计服务变动等考虑，还是更多作为一个同步分发渠道，暂不打算把博客彻底迁移过去。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_xlog_homepage.png" alt="yu_xlog_homepage"></p>
<p>自带的 <a href="https://xlog.pseudoyu.com/nft">NFT 展示柜</a>很不错，应该是集成的 <a href="https://unidata.app/">Unidata</a>，之前就想集成到我的 Hugo 博客里，但一直没来得及动工（<del>有现成的就更懒了</del>）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_xlog_nft.png" alt="yu_xlog_nft"></p>
<h4 id="xsync-自动同步-telegram-和-twitter">xSync 自动同步 Telegram 和 Twitter</h4>
<p>看到 xSync 能够同步 Teleram Channel 数据的时候真的很惊喜，完全不需要再做任何改造就能把我的聚合频道作再一次备份与存档，也很快配置上了，<del>瞬间有点想舍弃自己 Side Project 的冲动</del>。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_xsync_homepage.png" alt="yu_xsync_homepage"></p>
<p>不过有些遗憾的就是历史数据只同步了一部分，之前没接入时的数据似乎也没有手动备份同步的选项，不知道有没有配置项或者后续功能可以解决，或者有 RSS3 的朋友知道解决方案的可以说一下，感谢！</p>
<p>都配置好后就可以通过 xChar 来查看自己的各项消息了，很完美的解决方案，这是我的 xCharacter 个人主页: <a href="https://xchar.app/pseudoyu">xchar.app/pseudoyu</a>，也可以查看我的信息流。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_xchar_profile.png" alt="yu_xchar_profile"></p>
<p>另外的一个小插曲就是看到要把 <code>pseudoyu@crossbell</code> 放到简介时会心一笑，我当时毕业设计做版权保护 ÐApp 的时候是在 Solidity 合约里使用了 Oraclize API 来访问链下数据，也是抓取的 Youtube 的简介里的唯一标识来作为帐号所有权凭证，有种奇妙的熟悉感哈哈，后面有机会研究一下代码。</p>
<p>这套基于 Crossbell 的信息输入输出解决方案可以说是重构了我原本的个人管理系统，也希望能够结合这个系统做一些自己的尝试。</p>
<h2 id="新年计划">新年计划</h2>
<p>似乎每年列一些年度计划已经是不成文的习惯，但是自己过去的那么多年里也少有照做实现的。今年增加了更多的公开表达渠道，似乎能够更加有动力去做践行。</p>
<p>之前看过 <a href="https://xuanwo.io/">Xuanwo</a> 的一篇『<a href="https://xuanwo.io/reports/2022-37/">2022-37: 基于 Github 的公开工作流程</a>』，稍微研究了一下 GitHub Projects，觉得简洁却也够用，虽然平时也基于 Logseq 做一些基础的 GTD，但依然很难作为看板来使用，今年会试试，也给自己一些对应的压力。</p>
<p>新年计划的粒度很难把控，就随心所欲了，不写那么大而空的了，更多是一些指标吧，有的是自由探索的想法，有的是一些长期的目标，也有一些短期要完成的事，采取了勾选框这样的形式，也许后面想起来会继续添加，期间完成或新的一年年终总结的时候会来回顾 check 一下。</p>
<ul>
<li><input disabled="" type="checkbox"> 好好照顾捏捏，保护好她</li>
<li><input disabled="" type="checkbox"> 去日本 or 回香港工作/一份享受其中的远程工作/自由度满意的工作模式，按照优先级三选一吧</li>
<li><input disabled="" type="checkbox"> 至少去 6 个没去过的城市旅游，最好能见见久违的朋友，虽然不多</li>
<li><input disabled="" type="checkbox"> 坚持每周写周报，完成 48 篇</li>
<li><input disabled="" type="checkbox"> 除了周报外，至少再更新 48 篇原创博文，技术为主</li>
<li><input disabled="" type="checkbox"> 多外出拍照，新开的摄影集栏目至少更新 12 篇（元旦已经冲 kpi 发了两篇了），并且深入学习一下构图、色彩与后期</li>
<li><input disabled="" type="checkbox"> 为 GoCN 贡献至少 12 篇译文</li>
<li><input disabled="" type="checkbox"> 少数派发布 10 篇文章，赚猫罐头钱</li>
<li><input disabled="" type="checkbox"> 开始做 B 站 up 与 Youtuber，至少发 10 个视频，不能太水</li>
<li><input disabled="" type="checkbox"> 坚持每周锻炼/跑步至少四天（健身环或 Keep 也算），也同样会在周报中记录打卡</li>
<li><input disabled="" type="checkbox"> 坚持练吉他，录至少 3 首歌并发布</li>
<li><input disabled="" type="checkbox"> 捡回滑板技能，每周至少练习滑两次</li>
<li><input disabled="" type="checkbox"> 读至少 24 本有意义的书，但不能囫囵吞枣，需要在豆瓣等平台发布自己的感想</li>
<li><input disabled="" type="checkbox"> 日语 N2 证书，为了之后日本的一些计划做的筹备，学习进度会在周报里单开一个模块打卡，可能会突击一下选择 7 月的考试，<del>实在不行 12 月再来一次</del></li>
<li><input disabled="" type="checkbox"> CKAD 证书，去年就准备了一半，不过后来忘记报名购买考试了，没有了压力果然会偷懒</li>
<li><input disabled="" type="checkbox"> 为更多开源项目贡献代码，不要求量，但希望有更多有意义的提交</li>
<li><input disabled="" type="checkbox"> 为自己的开源工具箱项目『<a href="https://github.com/pseudoyu/yu-tools">Yu Tools</a>』写一个展示网站，以及为其中的软硬件条目都写使用体验（大工程了），不断优化迭代</li>
<li><input disabled="" type="checkbox"> 完善『<a href="https://guide.pseudoyu.com/">Blockchain Guide</a>』这一开源指南项目，把过去这一年工作学习的区块链底层与 Web3 相关的项目经验工程经验都多涵盖一点，惭愧的是大部分文章还是在香港读研的时候写的</li>
<li><input disabled="" type="checkbox"> 和朋友一起做的 Side Project 创业项目顺利上线并且不断优化</li>
<li><input disabled="" type="checkbox"> 探索更多有意思的技术，继续享受其中</li>
<li><input disabled="" type="checkbox"> 认识更多有趣的人</li>
<li><input disabled="" type="checkbox"> 好好生活下去</li>
</ul>
<h2 id="个人生活剪影">个人生活剪影</h2>
<p>从 11 月北京疫情严重开始，我就开始了长达两个月的宅家生活，大概多少是有着不错的物理防御属性（指把当时手头上唯一的一点药寄给了朋友，纯靠不出门来隔绝病毒）和幸运点数（每天照常点外卖，中途还有物业来家里处理漏水问题一下午），自己到现在还保持着阴性，已经在决赛圈了。</p>
<p>但随之而来的后果就是已经康复转阴的朋友已经在四处旅游，而我依然连倒个垃圾都全副武装，更不敢出远门了，就这样和猫猫度过了两个月。</p>
<p>虽然确实是宅，但随着疫情放开也确实没个头，所以心态也佛了，这周末应邀（<del>并不，只是以携猫拜访的名义去玩</del>）去了博译学姐家蹭饭，呼吸到了外面并不那么新鲜的空气（<del>毕竟北京</del>），也吃上了久违的家常菜，摆了一天，却心安理得且快乐。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/wonderful_meal_with_boyi.jpeg" alt="wonderful_meal_with_boyi"></p>
<p>打算 1.18 回杭州了。其实 2022 年回家时间在近几年里已经不算短了，各种调休和假期回家前后加起来可能有 1 个月，只是常常疫情反复，也没来得及回老家一趟。两年前的 1 月外婆离世，困于香港疫情没能回家，去年春节又因为突然的疫情而滞留在京，是该回去看看了，越长大，去的地方越来越多，家却也离我愈发遥远了。</p>
<p>其实前段时间就一直在犹豫回家的事，担心再有什么变故，但还是想回去看看，但这种局势下又不放心给猫舍或者不熟悉的人看管。后来一次开会闲聊时偶然提到，有了解决方案，定了捏捏会寄养在我的项目的小 leader 家里，他女儿眼馋猫猫很久了，安顿好后终于放下了悬着的心。</p>
<p>这样一路折腾估计十有八九是要阳的，得知这个，学姐还给了我豪华抗疫大礼包，感人。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/medicines_from_boyi.jpeg" alt="medicines_from_boyi"></p>
<p>然后前段时间博译学姐在灵隐的时候帮我许愿了”2023 都能如愿做自己喜欢的事、能够探索更多爱好“，还带了一个好看的佛珠手饰送给我了，我单方面宣布是天下第一好的学姐了，希望新的一年也都能好好的。</p>
<p>突然想起其实之前大学的时候有一年多一直带着倪给我的一个同样是灵隐的佛珠，直到线快磨断了、珠子摇摇欲坠才收起来，莫名觉得那一年确实幸运了许多，有时可能只是需要一些心静吧。</p>
<p>实现了会去还愿的，双份的愿望。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/wonderful_gift_with_boyi.jpeg" alt="wonderful_gift_with_boyi"></p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<p>这周在 B 站看了两个很有感触的视频，一个是来自我最喜欢的 Up 主『<a href="https://space.bilibili.com/37029661">小鹿 Lawrence</a>』的『<a href="https://www.bilibili.com/video/BV1Mx4y1G7zW">这是我最拼的一年，却让公司缩小了一半｜2022 年终总结</a>』，有一些感触：</p>
<blockquote>
<p>接连着看了好几年了，年终总结这个保留栏目每次也都会看好多好多遍。</p>
</blockquote>
<blockquote>
<p>有过处于同阶段的感同身受，为一些视频而触动；有过动态被鹿哥回复、鼓励了，开心了好多好多天；更多的是陪伴着我度过一个又一个深夜，醒来继续努力生活。可能由于太过熟悉，刚开新工作室门时细微的一点停顿，讲那句“因为曾经家人的支持是你的底气”时的哽咽，花束的 BGM，回顾这一年时的一声苦笑，都让我的情绪随之起伏与落泪。</p>
</blockquote>
<blockquote>
<p>“不是你长大了你就变了，而是你长大了，世界才开始对你展露全部的真相”。也许自己常常被描述的少年感、学生气也不过是过去经历的那些幸运的透支，与身边人对我的保护，才能在自己的周报里一次次谈论自我，一次次向往美好。而在 2022 年，一切也都回到原点。所幸，还能保留着『记录』这种习惯，还未丧失『感受』这项能力，微小，却弥足珍贵。</p>
</blockquote>
<blockquote>
<p>“这一年失去的东西太多太多，任何一点细小的死亡与崩坏，都会变得不可承受”。是啊，2022 就是很难啊，不可名状。新的一年，也要勉强努力一个人生活下去。</p>
</blockquote>
<blockquote>
<p>感谢鹿哥过去一年的陪伴与带来的感动，新的一年，加油！</p>
</blockquote>
<p>还有一个很犀利的 Up 主『<a href="https://space.bilibili.com/119801456">老蒋巨靠谱</a>』的『<a href="https://www.bilibili.com/video/BV17M411y7es">和不可名状的非必要一年说再见——我的新年献词</a>』，感想：</p>
<blockquote>
<p>太喜欢老蒋的思考和叙述风格了，平实、真诚但却大胆而不失尖锐，是看过得最好的新年献词了。</p>
</blockquote>
<blockquote>
<p>2022 就是这样过去了，很多事不可说，很多事正在发生，很多事再也不会发生，不可名状大概也是最好的形容了。</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>2023 年的第一周，今年是个还不错的开端吧。</p>
]]></content:encoded></item><item><title>摄影集 #02 - Moment In Peking (The Autumn)</title><link>https://www.pseudoyu.com/en/2023/01/02/moment_in_peking_the_autumn/</link><pubDate>Mon, 02 Jan 2023 18:00:00 +0800</pubDate><guid>https://www.pseudoyu.com/en/2023/01/02/moment_in_peking_the_autumn/</guid><description>前言 来北京已经一年多了，由于长期宅在自己的小屋里，也没有太多心绪去探索，它的四季于我来说仅仅是上班路上的草木风光，连最耳熟能详的几个景点都未</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>来北京已经一年多了，由于长期宅在自己的小屋里，也没有太多心绪去探索，它的四季于我来说仅仅是上班路上的草木风光，连最耳熟能详的几个景点都未曾涉足。</p>
<p>其实这些年辗转了不少城市，每次都总是觉得“时间还早”、“来日方长”、“总有机会”，却常常留下许多遗憾。临近 12 月了才发现已经是晚秋了，之前计划的香山红叶可能也只剩一些残存了，但依然决定去用镜头留下一些秋天的痕迹。</p>
<p>之前看过林语堂的《京华烟云》，英文书名是《Moment In Peking》，承载了这座城市的很多悲欢离合，也勾画了当初的我对北京的第一印象。所以这次的摄影集也取名为『Moment In Peking (The Autumn)』，尽管秋意已经几乎散尽，依然是一段城市回忆。</p>
<p>特别鸣谢刚拿到驾照的博译学姐在疫情已经恶化的时候还愿意租车带我前往（<del>也是一个敢开，一个敢坐</del>）。</p>
<blockquote>
<p>因为是摄影集作品，这个栏目不想压图片质量，每张都比较大，放在阿里云 OSS 上了（账单警告 ⚠️），加载可能会略慢一些，见谅。</p>
</blockquote>
<h2 id="moment-in-peking-the-autumn">Moment In Peking (The Autumn)</h2>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04388.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04373.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04374.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04363.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04378.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04390.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04367.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04383.jpg"  />
    </div>
    
  </figure>
</div>

]]></content:encoded></item><item><title>摄影集 #01 - Cat In The Box</title><link>https://www.pseudoyu.com/en/2023/01/01/cat_in_the_box/</link><pubDate>Sun, 01 Jan 2023 21:18:03 +0800</pubDate><guid>https://www.pseudoyu.com/en/2023/01/01/cat_in_the_box/</guid><description>前言 从 11 月开始一直想好好给捏捏拍照，但家里的采光不太好，当时工作比较匆忙也没刻意去购置布景和打光器材，今天在修图（我其实主要就是微调个色，懒</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>从 11 月开始一直想好好给捏捏拍照，但家里的采光不太好，当时工作比较匆忙也没刻意去购置布景和打光器材，今天在修图（我其实主要就是微调个色，懒）的时候感觉成片不算很满意，但是在新年第一天的 flag 不能倒，所以找朋友选了几张觉得还可以的，也算是一个好的开始了。</p>
<p>我的摄影启蒙来自一位纪实记者与纪录片导演，所以其实更在意画面构图与元素，总希望拍下的每一张照片都有一些故事感和主题（<del>低情商：技术不行</del>）。因为太喜欢这张在盒子里的照片了，所以给这个特辑取名为『Cat In The Box』；其中也有一个场景正巧站在我看了一半的村上的书上，再联想起当时看到村上的书里对猫咪的描述才有了更迫切的养猫的念头，也有一种奇妙的缘分，所以取名为『猫与村上春树』；还有几张是睡前抓拍的，光线是暗到后期都拯救不回来的程度，但是确实觉得很可爱（是摄影师的问题），所以也当作番外放一下了，取名为『Silence』（没错最近看日剧『静雪』有点上头）。</p>
<p>其实已经大概两年没好好拿起相机拍东西了，想重新开始记录一下生活，也要在摄影上多下点功夫了（<del>之前纯靠玄学审美和模特好看扛着了</del>），所以在博客的项目模块新增了一个摄影集栏目，当作自己摄影提升计划打卡了，新年里也要多给捏捏拍照。</p>
<blockquote>
<p>因为是摄影集作品，这个栏目不想压画质，每张都接近 10M，放在阿里云 OSS 上了（账单警告 ⚠️），加载可能会略慢一些，见谅。</p>
</blockquote>
<h2 id="cat-in-the-box">Cat In The Box</h2>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04487.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04509.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04468.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04431.jpg"  />
    </div>
    
  </figure>
</div>

<h2 id="猫与村上春树">猫与村上春树</h2>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04451.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04452.jpg"  />
    </div>
    
  </figure>
</div>

<h2 id="silence">Silence</h2>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04409.jpg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A7_04427.jpg"  />
    </div>
    
  </figure>
</div>

]]></content:encoded></item><item><title>2022 年末回顾 - 迷茫、低谷与改变</title><link>https://www.pseudoyu.com/en/2022/12/31/yearly_review_2022/</link><pubDate>Sat, 31 Dec 2022 14:18:37 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/31/yearly_review_2022/</guid><description>《后来的我们 - 五月天》 前言 今天是 2022 年的最后一天了，如之前周报所说： 年度总结也会有，会有自己这一年的各种事，失去的、得到的、值得感谢的、难免遗</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yearly_review_2022_photo.png" alt="yearly_review_2022_photo"></p>
<p>今天是 2022 年的最后一天了，如之前周报所说：</p>
<blockquote>
<p>年度总结也会有，会有自己这一年的各种事，失去的、得到的、值得感谢的、难免遗憾的，虽然也犹豫过要不要再提一些东西，但还是决定更真实地面对吧。毕竟所有东西都会过期，凤梨罐头也是，这一年也是，是这些喜怒哀乐构成了我的 2022，也构成了一个更加完整的我。</p>
</blockquote>
<p>早早立下了年终总结的 flag，本想花上几天好好雕琢一下，却（<del>毫无意外地</del>）拖延到了 31 号下午。</p>
<p>19 年 Gap Year 的时候，当时的那份工作常常要出差，大半年里飞了三十多趟，行程密集时常常在飞机上一觉醒来会有几秒的恍惚，不知道自己在哪个城市、在做什么。这一年的生活其实大多时间在自己的小屋里，却也有同样的感觉。</p>
<p>似乎从大学毕业的那一年开始，每年总会发生很多计划之外的事，甚至一些事也会很轻易地改变自己的人生，但可能这也是生活的有趣之处。</p>
<p>也许是因为分享欲有了身边人的寄托，之前的几年里感觉生活已然美好而自足，所以没把跨年本身作为一个很有仪式感的节点，但今年却总想记录些什么，大概也到了以文字来对抗遗忘的年纪了吧。开始写回顾时才发现过去的一年奇妙地是自己各个方面的转折点。</p>
<p>虽然没能回去参加毕业典礼，但 1 月拿到了港大的毕业证与留学生认证，正式离开了学校；同样在 1 月初申请了岗位转正，开启了自己的第一份区块链研发工作；4 月，自己作为技术负责人的第一个项目顺利交付；5 月，分手了；6 月，重新捡起断更了很久的博客，开始写周报，并开始启用 Twitter 记录生活日常；7 月，回了趟家，重新体会到生活的一些归属。10 月，重拾心情养了猫，一只可爱的银渐层，生活明媚了许多；12 月，因为疫情在一直在家和“捏捏”共度时光，也开始做一些 side projects，算是离独立开发的梦更近了一些。</p>
<p>似乎这一年转换了很多身份，也经历了很多心境变化，从初工作的迷茫到生活的最低谷，再到重拾心情改变，站在这个节点回看也会感到讶异，原来短短几个月会发生那么多事。如果要给这一年设定一个主题，我会选择『变动』吧。</p>
<h2 id="感谢的人">感谢的人</h2>
<p>这一年的生活里有很多值得感谢的人。</p>
<p>感谢甜崽陪我度过了上半年最迷茫和焦虑的一段时光，即使没能继续走下去，也希望能够一直好好的；虽然身处三地，倪和占在很多个深夜里听我倾诉，陪我难过，后来的这些对于生活、感情观的思考也都源于他们的 push；和晓瑜虽然常常各自消失，但似乎不论什么时候只要一个电话就能够畅聊整晚，每次聊完也都能重新拾起对生活的期待，同时也算助力和见证了一段感情的萌生与结果，一定要继续幸福下去；父母日常的关心总是能够让我感受到温暖，与妹妹萱萱的聊天也让我多了很多乐趣；每次回杭也会期待与初中班主任春哥的相聚，似乎这样十几年如一日像朋友般的相处模式才能让我感觉到时间的静止（虽然每次都是最好奇我的感情经历然后骂我渣男）。</p>
<p>与乐迪的日常和带些文青属性的交流让我们感觉似乎回到了大学时光，也相互为对方的“感情”出谋划策，尽管都以悲剧收场；小雨学姐和许翀在我情绪的最低谷陪我喝酒排解，当然，后来也渐渐发现酒并不能解决问题，戒了；来自小宇、草木灰、静茹和徒儿的关心让我觉得似乎自己也还值得拥有一些朋友；博译学姐的生活状态让我相信 work 和 life 真的能 balance，也感谢数次收留我去蹭饭，让我觉得北京似乎也不是那么无依无靠；还有很多很多。</p>
<p>感谢这一年里大家给予我的陪伴与感动，也希望在未来的日子里平安喜乐，都能被生活温柔相待。</p>
<h2 id="感情与重新生活">感情与重新生活</h2>
<p>在分开后的日子，自己花了几个月的时间放慢脚步，用心去体会与感受生活本身，去找回自己在迷茫中前行时丢失的那些点滴。</p>
<p>从『<a href="https://www.pseudoyu.com/en/2022/06/06/yearly_review_25/">25 岁的自白：花束般的恋爱</a>』这篇当时写完心情起伏很大但后来回顾却虚有些华丽的生日总结开始，思考了『<a href="https://www.pseudoyu.com/en/2022/06/28/weekly_review_20220626/">情感、安全感与认真生活</a>』，试图找回自己『<a href="https://www.pseudoyu.com/en/2022/07/11/weekly_review_20220711/">健康、目标与生活的节奏感</a>』。</p>
<p>趁着项目结束的小长假回了趟杭州，思考了『<a href="https://www.pseudoyu.com/en/2022/07/24/weekly_review_20220724/">亲情与城市的归属感</a>』。偶尔会有因为曾经一起的痕迹被悄然抹去引起的情绪波澜，当发现过去的那些生活与关联『<a href="https://www.pseudoyu.com/en/2022/08/22/weekly_review_20220822/">404 Not Found</a>』后，也重新开始计划再养一只猫而让自己有所寄托与期待。</p>
<p>因为村上的一本书开始思考自己的『<a href="https://www.pseudoyu.com/en/2022/08/29/weekly_review_20220829/">人格与生活的本质</a>』，因为和故友的几次聊天不眠夜开始想起更加遥远的过去，回想了『<a href="https://www.pseudoyu.com/en/2022/09/04/weekly_review_20220904/">过去、遗憾与当下</a>』。</p>
<p>趁着一次突发的青岛出差给自己设计了一场『<a href="https://www.pseudoyu.com/en/2022/09/13/weekly_review_20220913/">不期而遇的旅行</a>』，在旅途中感受美好，并与自己的一部分内心执念和解了。国庆时由于突发的情绪波动，刚刚好转起来的生活又有了明显的颓势，度过了一阵艰难的时光，『<a href="https://www.pseudoyu.com/en/2022/10/09/weekly_review_20221009/">搁置了生活与自我</a>』。</p>
<p>也愈加发现情绪积累之重，于是回北京后不久就去猫舍看了，因为合眼缘当周就养了一只可爱的银渐层，重新过上了『<a href="https://www.pseudoyu.com/en/2022/10/31/weekly_review_20221031/">他和他的猫</a>』的生活。</p>
<p>与猫猫共处的日子静谧而美好，感受到了『<a href="https://www.pseudoyu.com/en/2022/11/08/weekly_review_20221108/">陪伴与另一种生活</a>』，也慢慢开始重新拿起手机和相机随手记录一些生活点滴美好，其实未曾设想猫能给自己带来那么大的变化，就像自己『<a href="https://www.pseudoyu.com/en/2022/12/06/weekly_review_20221206/">重新捡起了生活</a>』，也在圣诞的深夜看着『<a href="https://www.pseudoyu.com/en/2022/12/27/weekly_review_20221227/">Love Actually | 真爱至上</a>』并重新思索爱情与生活。</p>
<p>有些庆幸当时决定以周报的形式开始记录一切，在回顾时也能够将自己在这半年里零碎记录下的想法与感受串成一条线，能看到自己的变化，也能看到生活的流动。不知道新的一年会在哪里有怎样的感受，各个方面是会有怎样的改变，但依然会继续记录这些自己成长的碎片。</p>
<h2 id="性格与改变">性格与改变</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_personality_infj.png" alt="yu_personality_infj"></p>
<p>昨晚突然想到很久没有做性格测试了，可能也有了不少改变，就做了一下。还记得大学时候的自己是个 ENTJ，后来短暂有变成 INTJ，但也时常徘徊，经过了这一两年的各种事，自己竟然已经是 INFJ 了，有些惊讶。</p>
<p>可能是由于更多把自我的一些追寻和探索转向『<a href="https://www.pseudoyu.com/en/2022/10/18/weekly_review_20221018/">内观而非外求</a>』，而周报也是多偏内心与情绪，我的内向与偏重感受的倾向变的越来越明显。</p>
<p>之前的自己大概是一个有些过分追求自我、某些时候理性到甚至有些冷漠的人，对他人的生活总是仅仅给予礼貌限度的关心，即使是最亲近的人，优先级似乎也常常在自我之下。这一点也许在独自前行时能够有一些助力，但生活是复杂的也是流动的，人与人的关系常常也并不只是单方的妥协，简单的道理，身处其中却也很难做到。</p>
<h2 id="改变最大的三件事">改变最大的三件事</h2>
<p>常常会看到在年终时总结自己这一年的变化，我也跟风列举三项，不是什么深思熟虑后的重大事件，只是回顾时记忆深刻的一些。当然，上文已经提过不少，所以不想过多提及感情。</p>
<h3 id="抚养捏捏">抚养捏捏</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_28.jpeg" alt="my_cat_nie_nie_28"></p>
<p>“捏捏”是我家的猫猫，从 10 月 30 日带回家后已经一起相处了两个月。</p>
<p>独自养猫这件事本身对于我来说其实也是一个很大的挑战（毕竟我是真的能两三天不吃饭不怎么睡觉在电脑前沉迷在自己的世界的，生活无比粗糙），也经过了很多犹豫，但见到她的当下，几乎就已经下了决心。</p>
<p>一切似乎都是从头开始学，两个月的时间改变了我很多，也希望新的一年里都能够继续健康生活下去。</p>
<p>圣诞装扮因为快递延迟了一些，所以还没出，明天会更新之前拍的一套『Cat In the Box』系列照片，<del>只想看捏捏的可以退出了</del>。</p>
<h3 id="使用双拼输入法">使用双拼输入法</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/shuangpin_input_preview.png" alt="shuangpin_input_preview"></p>
<p>从小学接触电脑开始，我就用的拼音输入法（全拼），也就是我们常用的九宫格和 26 键那种，一个维系了十几年的习惯，在 5 月突然想有所改变，其实倒也不是纯粹去追求打字速度的提升，只是想尝试一下，改变一个早已习以为常甚至已经融入本能的生活习惯有多难（<del>这个人句句不提感情，但句句不离感情</del>）。</p>
<p>双拼是一种不同的键位分布，打任何一个字都只需要敲击两下键盘（声母+韵母），所以前期还是会有很多不适应的地方，虽然记忆键位只用了一个下午，但转换习惯大概花了半个月，也无数次想要切换回来，但过了阵痛期后原来也没有那么难。</p>
<p>是吧，其实也没有那么难。</p>
<h3 id="换了新发色">换了新发色</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_selfish_2022.jpeg" alt="yu_selfish_2022"></p>
<blockquote>
<p>实在是很少有自己的照片，而且拍完才发现镜子已经脏到不需要打码了。</p>
</blockquote>
<p>这个本身虽然倒不是一个多大的改变，但我是比较少做这样的尝试，在 7 月的时候换了绿色发色，褪色差不多后又在 10 月换了蓝色，后者感觉更像个动漫死宅了，也算是圆了自己的一个二次元梦了，不过也就现在头发多所以还能折腾折腾，目前还是会保留蓝色吧。</p>
<p>也算是通过改变换一下心情吧。</p>
<h2 id="学习输入与输出">学习、输入与输出</h2>
<h3 id="工作">工作</h3>
<p>今年和 leader 涛哥在项目上的接触少了，但他的一些对于技术的想法态度还是有在深深影响着我，后面大概还是在几个项目的折磨下提升了不少 Go 开发的工程能力吧，还对 docker、k8s 以及各种 ci/cd 有了不错的基础，也自己做了不少探索。</p>
<p>系统学习了 Solidity 智能合约开发的一些知识，也出了相关的入门系列教程 —— 『<a href="https://guide.pseudoyu.com/">区块链入门指南</a>』，在下半年的项目中也做合约开发和与链交互相关的一些工作任务，总体是挺开心挺有成长的一年。</p>
<p>虽然工作氛围和方式已经是较为自由了，但也常常会感受到来自工作的一些消耗，有在考虑一些 Web3 远程工作的形式或是新的机会，大概也可能会回香港吧，新的一年，也许也适合做一些改变。</p>
<h3 id="技术">技术</h3>
<p>工作之外，自己还是做了一些好玩的探索，算是解锁了前端开发的一些基础技能，能够结合着原有的技术栈做一些小项目和工具了，以后介绍就可以加上“一个会糊点前端的后端”了，<del>或者厚颜无耻地加上一个伪全栈（pseudo full-stack）了</del>。</p>
<p>倒不是前端技术学习本身有多么让人欣喜，只是这样就可以独立做一些自己的产品，也能更好地解决一些问题，更接近自己想做技术的初衷了。</p>
<p>Rust 学了基础，但是还没在实践中用到，新年希望能有所精进；倒是计划好的 LeetCode 算法刷题一直没实践，也是新的一年的重点计划了，<del>虽然确实很难坚持</del>。</p>
<p>在 <a href="https://gocn.vip/">GoCN</a> 翻译团队继续贡献了接近 10 篇文章和参与了两本书，也承包了各种 ci/cd；参与了慢雾的『<a href="https://darkhandbook.io/">区块链黑暗森林自救手册</a>』英文翻译团队，也算是为 Web3 作了一些微小的贡献。</p>
<h3 id="语言">语言</h3>
<p>今年的很多重心放在了英语听读写的培养上，算是有了一些进步，可以 1.5 倍速看英文教程与 Podcasts，无字幕刷《硅谷》美剧，一些技术翻译和写作也还算得心应手，但口语还是有些欠缺，再加上很少练习，算是比较薄弱的一环了，离开了英语环境的提升也很依靠毅力了。</p>
<p>原本计划好的日语复习（<del>其实基本也等于预习了</del>）也搁置了，新年开始要在周报打卡学习进度了。</p>
<p>德语也只复习到一些基本词汇短语，早知道当年学二外的时候更加认真了，<del>现在就是很后悔</del>，这个不立 flag，随缘了。</p>
<h3 id="阅读与影音">阅读与影音</h3>
<p>为了 Telegram 频道的同步，我今年开始用豆瓣记录自己的一些读书、影音和游戏，影音因为有一部分是补标的，数据没什么参考性，就不放了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_book.png" alt="yu_2022_review_book"></p>
<p>今年后半年还算是读了蛮多书，大多时间是在通勤和午休的时候看的，没有刻意去追求什么量，整理时却突然发现也已经有 30 本之多，感觉慢慢找回了一些阅读写作的心境和乐趣。我最喜欢的作家是毛姆，他有一本读书随笔中有一句话叫“阅读是一座随身携带的避难所”，这半年也深有体会，书中可以看到很多不一样的世界，也有很多不一样的人生，真好。</p>
<p>也刷了不少剧，各种电影、剧集和动漫加起来应该有超过 100 部吧，也尽量有在认真体会。大概自己豆瓣文青的人设已经稳稳的了，收到了分别两个朋友送的豆瓣电影日历和一个电影放映周历，未来的一年也会继续多看一些。</p>
<p>因为想记录下这些痕迹，所以也开始在看完的书籍和影音后加上自己的感想发在豆瓣，感觉这种方式也有让自己在看的时候会更用心，虽然都是短评，累积下来不知不觉也有 8932 字。</p>
<h2 id="年终数据">年终数据</h2>
<p>大概还是受到了她的一些影响，原本比较随意无序的自己今年似乎也想以数据化的方式展现一些小小成长。</p>
<h3 id="重新捡起的博客">重新捡起的博客</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_umami_data.png" alt="yu_2022_review_umami_data"></p>
<p>自己很早开始写公众号和博文，但是就之前的更新频率和内容来说也很难称为独立博客。从五月的一篇『<a href="https://www.pseudoyu.com/en/2022/06/12/why_i_still_write_blog_in_2022/">2022 年了，聊聊我为什么还在写博客</a>』开始，重新捡起了<a href="https://www.pseudoyu.com/">我的博客</a>，这一年里正好更新了 48 篇博文，虽然几乎都是下半年更新的，<del>但四舍五入我周更了</del>，其中周报和一些心绪相关的文章与技术博文和效率工具相关的文章刚巧约一半一半，也符合了我对于内容输出与分享欲的定位，不错的开端。</p>
<p>随着博文的持续更新，稍得到了一些读者的关注。从 6 月中旬通过 umami 搭建了一个数据统计系统，随着每个月更用心地输出，月 pv(page view) 已经到了 12k+，月 uv(unique visitor) 也到了 4k+，并且保持着不错的增长态势，能够看到自己的输出得到了一些认可，也常常在半夜打开统计界面时看到“当前在线 5 人”这样的提示时会心一笑。</p>
<p>常常也会收到一些感谢或是鼓励的评论，不知不觉也积累了好多页，很感谢这些素昧平生的陌生人用心的留言与评论，很开心自己的文字能够改变或是启发一些人，也感谢在博客已经式微的当下，他们依然愿意“浪费”自己的一些时间通过这种方式向我传达一些想法，即使只是简单的一句祝福与感谢。也在年度回顾之际精选一些以作分享（见文末），希望未来的一年还有你们相伴。</p>
<h3 id="推特">推特</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_twitter.png" alt="yu_2022_review_twitter"></p>
<p>也许是因为渐渐习惯了博客这种对外输出的方式，也许是因为随着生活变动分享欲无处安放，从年中启用了自己的推特帐号，原本只是想作为一个像是私密微博，前期也只是发一些深夜情绪。</p>
<p>后来随着和 <a href="https://twitter.com/strrlthedev">STRRL</a>、<a href="https://twitter.com/RealAkemiHomura">Homura</a>、<a href="https://twitter.com/Manjusaka_Lee">Manjusaka</a>、<a href="https://twitter.com/_a_wing">新一</a>和 <a href="https://twitter.com/OnlyXuanwo">Xuanwo</a> 等朋友一起分享自己的周报和闲聊，感受到了大家的友好，也更多开始分享自己的日常，不知不觉也发了 514 条推文（<del>这个人废话还挺多的</del>），收获了 600+ 朋友的关注，居然也能和 <a href="https://twitter.com/yihong0618">yihong</a>、<a href="https://twitter.com/GeekPlux">GeekPlux</a> 这些之前仅存在我仰望的关注列表里的技术博主互关，偶尔也能有一些很有趣的互动。</p>
<p>感谢这些朋友不嫌弃我。</p>
<h3 id="telegram-频道">Telegram 频道</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_tg.png" alt="yu_2022_review_tg"></p>
<p>在之前的一篇周报『<a href="https://www.pseudoyu.com/en/2022/09/19/weekly_review_20220919/">周报 #12 - 赛博空间、自我定义与界限</a>』里，我提到有搭建自己的一个 Telegram 频道，用来同步自己的各种 Twitter、评论、点赞等，原本也只是用于自己每周周报找素材的一份存档，不知不觉也有了 251 位订阅者，也收到了其中一些人对我频道的感谢，似乎自己不经意间做的一些事竟然也给别人创造了一些价值，很惊喜，会继续坚持输出的。</p>
<h3 id="github">GitHub</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_github_data.png" alt="yu_2022_review_github_data"></p>
<p>GitHub 也是年中才好好用起来的，2022 年有 1.1k 次代码提交，给 12 个项目贡献了 36 个 PR，收获了 260 个关注者。最开心的还是给自己在用了好几年的 hugo 主题项目提了一些优化和新增特性的 PR，经过了和开发者的一些交流后合并进了主分支，有一种很奇妙的参与感，可能这就是开源的魅力吧。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_yu_tools.png" alt="yu_2022_review_yu_tools"></p>
<p>自己的一个工具箱项目『<a href="https://github.com/pseudoyu/yu-tools">GitHub - yu-tools</a>』也让我收获了 400+ stars（<del>别骂了，是 markdown 项目</del>），再加上自己做了一些区块链相关的项目，总 stars 终于破 500 了，还是蛮开心的，新年会为这个工具箱项目写一个网站，呈现更多工具介绍和使用体验。</p>
<h3 id="少数派">少数派</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_sspai.png" alt="yu_2022_review_sspai"></p>
<p>少数派是一个我看了好几年的平台，有很多效率工具类的优质文章，其实没想到自己能成为入驻作者。这一年写了 12 篇文章（包括了前几篇从博客搬运过来的），累计 38660 字，得到了 7 篇推荐，其中 4 篇首页推荐，1 篇会员专享，文章总阅读量达到 20w+，收获了 150 左右的关注，还收获了几千的稿费。新的一年也会继续产出一些文章，猫罐头就有了（<del>为了养猫真是成为了打工战士</del>），很感谢少数派的编辑『<a href="https://sspai.com/u/thebaldingken/updates">北鸮</a>』，很耐心也很友好，还向他学习了一些双拼输入法经验。</p>
<h2 id="总结">总结</h2>
<p>2022 年经历了许多许多，即使有了这些记录和数据，回顾的时候仍觉得有些恍若隔世。</p>
<p>新的一年就要开始了，祝 2023 年的自己，快乐。</p>
<h2 id="附录">附录</h2>
<h3 id="博客评论展示">博客评论展示</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_1.png" alt="yu_2022_review_cusdis_comment_1">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_2.png" alt="yu_2022_review_cusdis_comment_2">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_3.png" alt="yu_2022_review_cusdis_comment_3">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_4.png" alt="yu_2022_review_cusdis_comment_4">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_5.png" alt="yu_2022_review_cusdis_comment_5">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_7.png" alt="yu_2022_review_cusdis_comment_7">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_6.png" alt="yu_2022_review_cusdis_comment_6">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_8.png" alt="yu_2022_review_cusdis_comment_8">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_9.png" alt="yu_2022_review_cusdis_comment_9">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_10.png" alt="yu_2022_review_cusdis_comment_10">
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_2022_review_cusdis_comment_12.png" alt="yu_2022_review_cusdis_comment_12"></p>
]]></content:encoded></item><item><title>周报 #24 - Love Actually | 真爱至上</title><link>https://www.pseudoyu.com/en/2022/12/27/weekly_review_20221227/</link><pubDate>Tue, 27 Dec 2022 01:59:29 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/27/weekly_review_20221227/</guid><description>《クリスマスソング (English Cover) - Matt Cab》 前言 本篇是对 2022-12-20 到 2022-12-27 这周生活的记录与思考。 不知不觉已经第 24 篇了，也是 2022 年最后一篇周报了。有时候就是有这样莫名</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/christmas_song_english_version.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《クリスマスソング (English Cover) - Matt Cab》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1227.png" alt="weekly_review_1227"></p>
<p>本篇是对 <code>2022-12-20</code> 到 <code>2022-12-27</code> 这周生活的记录与思考。</p>
<p>不知不觉已经第 24 篇了，也是 2022 年最后一篇周报了。有时候就是有这样莫名的仪式感，当有意义的事发生在一些比较整的时间节点时常常就会格外开心。</p>
<p>有时候分享欲这件事就是那么奇妙，明明在过去接近四五年里都已经习惯于关闭朋友圈入口，也很少发与私人情绪有关的东西，却在这小半年里开始用周报记录自己的日常，也在推特和 INS 上频繁分享（虽然大多也是猫猫相关的，但也是迈出社恐康复治疗第一步了），有时候改变的发生可能也不需要太多理由，只是 Timing。</p>
<p>这一周依然在辗转于学习与工作，但可能因为之前几天严重缺觉（基本上都是 3 点后睡），效率不算很高，大多时间也是在看课和调试代码，也算是缓缓调整了一下节奏。</p>
<p>在家与猫猫共度了第一个圣诞，收到了朋友给捏捏寄的圣诞装扮但当天偷懒没拍，也同样是跟着年底一起出片吧（还在 SD 卡里），当天也带点仪式感地点了想念了挺久的胖哥俩肉蟹煲外卖，但可能长期断食每天一顿饭，食量下降得严重，分两顿也没吃完。</p>
<p>一位很久没联系的大学同学最近在 B 站做了主播，突然感觉自己的二次元宅属性被唤醒了，看了几场，还受托当了正义的房管和粉丝群里的信息老师（？），还挺有意思的。顺便研究了一下录播姬，找了台服务器用 Docker 跑了个服务自动录屏，感觉能用一些自己熟悉的技术解决朋友的问题还挺有趣的。</p>
<p>另外，我的博客下雪了。</p>
<h2 id="love-actually">Love Actually</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/loveactually.jpeg" alt="loveactually"></p>
<p>虽然其实自己现在很难去思考对于感情还留有几分向往和几分勇气，曾以为能共度余生的人悄然离开，生活的痕迹被一点点抹去，但记忆重新涌上心头时难免会怀疑所谓 True Love 是否存在。于是在圣诞的夜晚重温了《Love Actually | 真爱至上》这部经典，也算是每年的保留节目了。</p>
<p>这是不论自己处于多痛苦的时刻，看了后总会愿意继续相信美好的一部电影。这部电影和 Matt Cab 翻唱的英文版『Christmas Song』（日剧《朝五晚九》的主题曲）总是让我把圣诞与美好的爱情联系在一起，无关具体的情感或是经历，只是这种美好的氛围就已经足够诉说所有情愫。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/love_actually_you_are_perfect.jpg" alt="love_actually_you_are_perfect"></p>
<p>最喜欢的是这一对，虽然只有藏在心底的爱慕，却真诚而美好。</p>
<blockquote>
<p>“我爱你，与你无关。”</p>
</blockquote>
<p>到了这个年纪还保留着那么多幻想还挺难得的（或者说幼稚）吧，但始终觉得喜欢的情愫是远远凌驾于其他因素之上的，经历了这些依然这么坚持着。</p>
<p>写着写着难免泛起一些情绪，不想聊太多，分享一下歌词吧。</p>
<blockquote>
<p>The sound and bells are ringing everywhere,</p>
<p>A common classic familiar feeling,</p>
<p>There&rsquo;s something about the coldness in the air,</p>
<p>This season&rsquo;s got me feeling some kind away the night,</p>
<p>Christmas Carol&rsquo;s on repeat,</p>
<p>and happy couples fill the street,</p>
<p>See the city glistening,the sun and rushes over me,</p>
<p>I just wanna see your face, want you next to me,</p>
<p>Cause it has to be alone in Christmas Eve,</p>
<p>And if I could have just one wish come true,</p>
<p>girl you know, I wish for you,</p>
<p>Oh no every time I take a look around,</p>
<p>I get a little blue,</p>
<p>Cause even though I ask Santa to be nice to me,</p>
<p>There&rsquo;s nothing he can do,</p>
<p>I just want you in my arms, want you close to me,</p>
<p>and if I have you by my side make sure you&rsquo;ll never leave,</p>
<p>Yeah I know you out there aren&rsquo;t you missing me,</p>
<p>Cause girl you know, I&rsquo;m missing you,</p>
<p>No I can&rsquo;t find a better word to say,</p>
<p>I don&rsquo;t know what they&rsquo;ll do,</p>
<p>So maybe it&rsquo;s just better if you let me sum it up,</p>
<p>Baby I love you,</p>
<p>Oh&hellip;&hellip;Oh baby&hellip;..yeah&hellip;&hellip;</p>
<p>And it feels like yesterday,</p>
<p>the first time that I saw your face,</p>
<p>I never felt quite like this before,</p>
<p>Girl you do something to me~.</p>
<p>—— 来自 Matt Cab <a href="https://music.163.com/#/song?app_version=8.9.0&amp;id=39227975">《クリスマスソング (English Cover)》</a></p>
</blockquote>
<h2 id="与捏捏的日常">与『捏捏』的日常</h2>
<p>之前拍的几批和圣诞还没出片，就放一些静静的日常吧。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_22.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_23.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_24.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_25.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_26.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_27.jpeg"  />
    </div>
    
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输出">输出</h3>
<p>上周的周报写了一篇关于如何学习的文章，算是对自己的一些经历的总结和思考，还挺开心的，顺便也在少数派上发了，继续打几份工挣猫粮钱了哈哈。</p>
<p>虽然不想那么早就开始立各种新年 flag，但是得继续更新文章了！</p>
<h3 id="输入">输入</h3>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>天官赐福</strong>，这部倒是很有意思，本来我蛮少看国漫以及类似题材的，但我现在刚上初中的妹妹今年开始写天官的同人小说，虽然是每期都追完了，但动漫却还一直没看过，也是补上了，这样去了解妹妹的喜好和她关注的世界也很有趣。</li>
<li><strong>Death Note: Desu nôto</strong>，死亡笔记的动漫是无法超越了，但就是喜欢到即使失望也会去看各种衍生作品，但是剧集出乎意料地还不错，很侧重月的心理描写和变化。</li>
<li><strong>间谍过家家</strong>，part2 开播的时候没追，这两天才补完，阿尼亚赛高！</li>
<li><strong>三体</strong>，第四集有点迷，几句话能讲完的剧情水了一集。</li>
</ul>
]]></content:encoded></item><item><title>周报 #23 - 如何学习一门新的技术（文科转码选手浅谈）</title><link>https://www.pseudoyu.com/en/2022/12/19/weekly_review_20221219/</link><pubDate>Mon, 19 Dec 2022 06:20:46 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/19/weekly_review_20221219/</guid><description>《Brand New Day - 墊底辣妹主題曲》 前言 本篇是对 2022-12-14 到 2022-12-19 这周生活的记录与思考。 本周同样因为疫情而居家办公（感觉这个开场白之后可以去掉了，已经是常</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/brand_new_day.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《Brand New Day - 墊底辣妹主題曲》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1219_photo.png" alt="weekly_review_1219_photo"></p>
<p>本篇是对 <code>2022-12-14</code> 到 <code>2022-12-19</code> 这周生活的记录与思考。</p>
<p>本周同样因为疫情而居家办公（感觉这个开场白之后可以去掉了，已经是常态了），依然还是在“不务正业”地学前端，顺便工作写一点后端代码，有几天甚至不知不觉都已经拂晓了，感觉找回了去年在香港赶 due 和备战期末考的状态，但这次少了很多外界的压力和焦虑感，更加享受其中。</p>
<p>有过前一段时间天天加班到深夜的体验，才更加意识到能够自由支配一些时间，学习想学的东西，或是单纯和猫猫一起发呆的日子是多么珍贵。但是感觉已经有很久的时间都在状态调整和分享自己的一些日常，很久没有写些什么干货或是经验了，今天就来浅分享一下自己的一些学习经验、方法和思路吧，可能更多还是一些概念上的，后续（大概？）也有更具体的分享。</p>
<blockquote>
<p>想了想还是补充了下面这两段话。</p>
</blockquote>
<p>其实一开始只是想着该写年度总结了，于是看了看自己这一年（或者其实严格意义上是从 5 月才开始恢复更新的这半年）的文章，除了 5 月发了很多工具效率类的文章外，大多都是周报，一些思考、想法、情绪和碎碎念，虽然说更多只是一个表达欲的渠道，但偶尔也会惭愧自己讲情绪太多，似乎把博客作为了一个出口，于是想着还是能够带来一些干货吧，所以就有了这篇经验谈，不知不觉竟然也写了快 7000 字了。</p>
<p>年度总结也会有，会有自己这一年的各种事，失去的、得到的、值得感谢的、难免遗憾的，虽然也犹豫过要不要再提一些东西，但还是决定更真实地面对吧。毕竟所有东西都会过期，凤梨罐头也是，这一年也是，是这些喜怒哀乐构成了我的 2022，也构成了一个更加完整的我。</p>
<p>然后，会在 12 月 31 日发，一个对我挺特殊的日子。</p>
<p>从今年的某个时候开始，我在每篇文章加上了主题曲，五月天的《后来的我们》，一首我很喜欢的歌。今天换成了《Brand New Day》，垫底辣妹电影的主题曲，一直觉得很好听，也挺适合这篇文章。</p>
<h2 id="如何学习一门新的技术">如何学习一门新的技术</h2>
<h3 id="我的学习方法探索之旅">我的学习方法探索之旅</h3>
<h4 id="初探">初探</h4>
<p>自己以前并不算是一个很崇尚各种学习方法论的人，对这种“如何”体也比较无感，高中在阅读『如何阅读一本书』时也没能成功读完（？），总觉得这是一件很因人而异的事，看过许多帖子可能也比不上自己某个阶段的带点玄学的所谓“开窍”，当然，这里的开窍大多与天赋无关，只是在摸索中找到了一些自己的路子而已。</p>
<p>发生转变是高中一次在书店，遇到一些浙大的学生在售卖自己总结打印的高考备考资料和经验，出于好奇买了一本历史学科的，闲来无事就翻着看，里面有一些时间轴的整理和记忆的小技巧，后来真正学到这些知识的时候常常就能更加得心应手地运用，后来历史成为了我常常能拿年级前列的学科，慢慢也积累了我对历史学习的兴趣（甚至一度想报考历史系）。</p>
<p>现在想想，可能那本书上的内容本身并没有什么独一无二的部分，知识就是那些知识，只是从一个经历过高考且取得了不错成果的大学生视角来归纳方法，还是很有一种“降维打击”的效果的，这某种程度上也启发了我在其他学科的学习中也开始逐步探索自己的方法。</p>
<h4 id="学习心态">学习心态</h4>
<p>本篇并没有打算（<del>主要也讲不明白</del>）介绍各种有理论基础的学习法，主要是关于“XX 学习法”这样的视频、文章有很多，可能经过一些总结和内化后也不如阅读原文，这里先推荐『<a href="https://space.bilibili.com/43276908">是落拓呀</a>』学长的这篇『<a href="https://www.bilibili.com/read/cv6209820">我是如何学习一门新的技术或知识的？WW 学习法？以区块链为例。</a>』，我刚开始学习区块链和很多其他知识的时候从中获益良多。</p>
<p>这次更多想从一个我觉得很重要但常常被忽略的点讲讲我的一些想法和经验 —— 学习心态。</p>
<p>大学被调剂到了英语专业，只花了大概半个学期的时间，我就非常清晰地意识到了这并不是一个我会持续投入热情并能够赖以为生的专业。但当时的自己还没有很清晰的目标，于是开始不停地学各种技能以缓解迷茫和焦虑。</p>
<p>因为在社团主要是负责一些“技术”相关的工作任务，当然，这里的技术主要是指平面设计、摄影和视频剪辑这样的技能。还记得我第一个重点负责的晚会项目有一个很赶的宣传视频/MV 的工作任务，印象里并不复杂，也没什么特效，就是一些视频的素材基础处理、拼接和导出，最多也就是适配不同尺寸的屏幕以达到不错的显示效果。</p>
<p>于是在一个周末，下载了 Adobe Premiere Pro（也就是俗称的 PR，一个万恶的折磨了我长达五六年的软件，也没想到后来自己的很多事都和视频剪辑相关，也是奇妙的际遇了），看了一些入门教程，两天赶完了。去交任务的时候社员包括部长都挺惊讶的，问我之前学过么，怎么那么快。</p>
<p>其实我对于视频拍摄、剪辑的了解也不过就是在高三时做了一个生日祝福视频，还是找朋友帮忙一起做的（好像用的是绘声绘影还是爱剪辑来着，也是好遥远的名词了，然后这位朋友现在在做导演、剪辑相关的工作，奇妙际遇 * 2），而在用 PR 时也下意识地并没有觉得这是一个很难的软件或者说没觉得剪辑是一件很难的事，学习起来也就很顺其自然，遇到不会的问题现查就可以了，也并没有太多的技术含量，只是我去学了，仅此而已。</p>
<p>而很多朋友可能会在刚开始学习一个自己不了解的东西时候有一种很本能的畏惧感，觉得它很复杂，自己给自己设置了心理障碍，直到最后也没下定决心去学，后续我在带部门和社团进行教学的时候也大多用一个基础的实战项目带大家了解到这并不是一件那么“高不可攀”的事，打破了这一层心理因素并调整了学习心态后，学习操作本身就很容易了，效果很好。</p>
<p>当然这些只是一些通用性的技能，真正编程相关的技术还是差异很大的，但这一方面的心态变化历程可能就说来话长了，因为也常常被问到，也算是顺便提一下自己的文科转码之旅了。</p>
<h3 id="我的文科转码之旅">我的文科转码之旅</h3>
<h4 id="vb-入门">VB 入门</h4>
<p>作为理工院校的文科学院，我们非常具有理工特色的就是需要学计算机，但是只是基础的 VB (Visual Basic) 语言。得益于浙江的学业水平考试的信息技术学科需要 VB 上机考，已经在高中有过一些基础的了解，再学起来也比较轻松，虽然语法都需要重新学，但同样的，在心态上也觉得是一件并不那么难的事。</p>
<p>当时由于身边许多朋友都是初接触编程语言，对语法和各种符号有着非常强烈的畏惧感，所以我在学的时候以自己的思路和解释整理了一份几十页的笔记，从一本书变为了薄薄的几十页纸，朋友们在学习的心态上有了很大的变化，卓有成效（后来还“继承”给下一届，有成为了传说中的学长学姐宝典的经历也是一件很开心的事了）。</p>
<h4 id="转换方向">转换方向</h4>
<p>重温了 VB 后，突然觉得自己很喜欢这种能够通过代码来创造、实现一些想法的感觉的，然后也觉得某种程度上还算“擅长”，遂萌生了一个在当时看来有些大胆的想法 —— “是不是我也可以把计算机作为自己的未来方向”。</p>
<p>当然，因为学校莫名的“高考文科招生不能转理工专业”的规定，转专业这一条路已经被堵死，武大计算机辅修的申请也因为绩点差一点而失之交臂。</p>
<p>算了，那就自己学吧。</p>
<p>于是向认识的在华科辅修计算机的朋友要了课表和教材，当时的心态很简单，可能科班的很多课我确实没有那么多时间精力来通过自学同步补，但是辅修的课程负载还是可以接受的。于是，一边补着操作系统、计算机网络这些基础课程，一边学 Python（没错我也是从廖雪峰老师的 Python 课程开始的），开始了自己的“不务正业”之旅。</p>
<h4 id="艰难前行">艰难前行</h4>
<p><del>中间有过无数次挣扎和觉得自己是个废物想放弃的深夜时刻</del>，以及在挣扎期间因为迷茫去做过公众号运营、产品经理、区块链游戏策划、平面设计等各种岗位实习/兼职以及后来注册公司开了工作室做视频剪辑等等的经历，这就在另一篇『<a href="https://www.pseudoyu.com/en/2022/11/17/weekly_review_20221117/">周报 #19 - 忆一次创业经历</a>』了。</p>
<p>自己那几年真的在这条路上坎坷地走了很久，有过盲目地学各种语言（<del>因为觉得写上自己会一些小众语言听起来很酷</del>），有放弃枯燥的基础知识学习去写 Web 和小程序（<del>因为可以赚外快</del>），有觉得不需要去理解各种底层原理和数据结构自己也能写好代码的误区，有学了很久但是似乎长进并不明显的瓶颈期，当然，也有很多开心的收获，但这已经是日常了，就不细数了。</p>
<p>后来出于职业规划（诚实来讲，大多英语专业本科出去在现在的环境想找一个技术工作确实是简历都递不出去的，无奈却也不得不面对的现状）与想在具体的领域有所造诣的考虑，我在毕业后 Gap 了一年去申请了香港的计算机系研究生，这部分在『<a href="https://www.pseudoyu.com/en/2020/06/06/yearly_review_23/">23 岁的自白：去追寻意义</a>』里有提到，因为之前有拿到了台大计算机一名区块链方向教授实验室的邀请最后却被鸽的对我打击挺大的事，也算是圆了自己的一个梦（<del>你不要我，我值得比你更好的</del>）。</p>
<h4 id="摆正心态">摆正心态</h4>
<p>其实在后续的学习中，自己受益最大的是从来都没有把“我是一个英语专业的学生”作为自己学不好的理由，毕竟现在已经没有什么太高的知识获取壁垒，别人能学到的知识我也能够在很多公开课、教程中学到，甚至有了一些自己选择的权利，可以找最好的最适合的课程进行学习，以至于刷了好多门 MIT 的公开课和 Coursera 的课。</p>
<p>包括真正去参加港大计算机学院的面试时，我也没有把原专业作为自己的弱项避而不谈，而是提到了自己作为一个来自不相干专业的学生对于热爱的专业所付出的努力和获得的成果，包括对于专业和行业的一些探索和想法，相信对于最后的 offer 也有一定帮助。</p>
<h4 id="鸽了的文科生转码指南">鸽了的文科生转码指南</h4>
<p>题外话，关于文科转码其实之前自己一直有想写一个指南，大概就叫『文科生编程入门/转码指南』之类的（虽然听起来就很营销号的 Python 广告），但总是觉得无非是一些教程推荐和申请经验，最后的结果运气也占了很大的成分，分享出来也并没有太多的干货，反而更容易像是一种幸存者偏差的“炫耀”，于是一直没动笔。</p>
<p>但现在经过了一年多的工作和探索学习，自己也算是真正在程序员这个职业或者说区块链这个行业勉强站稳了脚跟，也觉得自己或多或少在学习新技术/知识上有着一些小经验，所以打算重启这个想法了，也挖一个小坑，慢慢填。</p>
<p>但其实想做这件事并不是说标榜转码有多好或是这件事有多容易，行业确实有一定红利，但转码和技术学习的个中艰辛苦楚也有不少，有很多熬夜的夜晚，也有很多怀疑自己的时刻，只是不值一提罢了。而且终究还是靠一点点的积累，就像那句朴实却很真切的道理 —— “无他，唯手熟尔”。</p>
<p>在 Podcasts 和推特上也见到过很多崇拜的技术大佬，也不乏转码的，相比之下，以自己的能力尚不足以去教导大家些什么，但想把这些写下来其实也只是想传达一下自己的想法与心路历程，或多或少让对这一领域有所好奇的人不要因为心态问题怯而不前。</p>
<p>有相关经验心得的也欢迎一起参与贡献。</p>
<h3 id="我是如何学习的">我是如何学习的</h3>
<p>回归正题，浅谈一下我学新技术或是接触一个新领域的一个基本模式吧，纯个人经验分享。</p>
<h4 id="信息源采集">信息源采集</h4>
<p>可能由于之前学习模式和个人信息控特质的一些影响，我非常倾向于在学习一项新的技术/知识时收集很多信息源，可能比起一些搜索引擎和算法推荐的结果，我更习惯去一些喜欢的 Youtuber 或是个人博客作者的历史视频/文章中进行翻找，常常有一些意外之喜（主要是那些大佬都太强涉猎太广了，好多个之前看 Python 和 Go 的博主都更新了区块链的很优质的内容），从他们的视频/文章中能看到学习中的坑，以及这项技术后面的实际应用。</p>
<p>比如在推友『<a href="https://twitter.com/strrlthedev">STRRL</a>』的博客『<a href="https://strrl.dev/">strrl.dev</a>』中能看到他折腾的很多小玩具，有些就是我同样需求但是没想到（<del>或者做不到</del>）能够以这种方式实现的，能有很多启发；以及在看另一个推友『<a href="https://twitter.com/n0vad3v">Nova Kwok</a>』的博客『<a href="https://nova.moe/">Nova Kwok&rsquo;s Awesome Blog</a>』时常常会发现，“这个人怎么什么都会啊”。</p>
<p>除了具体的知识和教程外，也能够从他们身上看到自己所向往成为的样子，能有更多的好奇心与探索欲，对未来有更多期待。</p>
<h4 id="初步了解">初步了解</h4>
<p>在选择教程方面，我之前也提过很喜欢以 Crash Course 的方式开始，直译成“XX 小时带你学会 XXX”好像有些营销号的感觉，但 Youtube 上真的有非常多这种系列，直接搜索比如『<a href="https://www.youtube.com/results?search_query=next.js+crash+course+2022">Next.js Crash Course 2022</a>』就会有很多很有意思的结果。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/nextjs_crash_course.png" alt="nextjs_crash_course"></p>
<p>我前段时间做一个 ÐApp Demo 的时候因为有用到 Next.js 做基础的前端显示，就看了一下搜索结果中 <a href="https://www.youtube.com/@TraversyMedia">Traversy Media</a> 的这个 <a href="https://www.youtube.com/watch?v=mTz0GXj8NN0">Next.js Crash Course</a>，很喜欢他的讲解方式，在一个小时里就让我对这个框架包括整个前端开发语言有了基础的了解，虽然没经过系统性地学习自己很难上手做一个项目，但是在后来的项目中看到前端代码中出现的一些语法也能知道在做什么，在别人框架的基础上做一些自己的定制化修改也比较容易。</p>
<p>比如这就是我看完 Next.js Crash Course 后通过另一个很喜欢的 Youtuber <a href="https://www.youtube.com/@devaslife">devaslife</a> 开源的一个『<a href="https://github.com/craftzdog/craftzdog-homepage">GitHub - craftzdog/craftzdog-homepage</a>』项目修改的个人主页，『<a href="https://home.pseudoyu.com/">Yu - Homepage</a>』，花很短的时间就能做出一个很美观的小项目，也是在开始学习一项新技术时候很好的动力。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_homepage_profile.png" alt="yu_homepage_profile"></p>
<h4 id="深入学习">深入学习</h4>
<p>但真正要写一些企业级项目或是自己从头做一个复杂的项目，仅仅靠 Crash Course 是远远不够的，会需要更系统的学习和很多项目的实践，这个时候需要一些更实战性的课程，这一点看个人偏好，很多 Crash Course 作者其实有自己的训练营或者付费教程，如果找到了喜欢风格形式的博主则可以跟着他继续学下去。</p>
<p>我个人更偏好的是 <a href="https://www.udemy.com/">Udemy</a> 平台，也算是一个比较老牌的在线课程网站了，虽然价格看起来比较离谱但是基本上都在打骨折，总是各种理由发优惠券，<del>让我总是担心它哪一天就倒闭了</del>，平均一门课大概就 9.99-12.99 美元的样子吧，折合人民币 100 不到，还是很值得的。</p>
<p>比如我上文提到的 <a href="https://www.youtube.com/@TraversyMedia">Brad Traversy</a> 就在 Udemy 上开设了 React、Next.js、Tailwind CSS 等课程，因为我确实很喜欢他这种以项目为导向的方式和他的教学风格，虽然在 Udemy 上相关课程有比他购买/评分都高很多的课，我依然选择了他的，这些是我学 Web 相关购买的一些课（很多是前两天活动价购入，还没开始看）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/udemy_web_course.png" alt="udemy_web_course"></p>
<h4 id="成果输出项目实践">成果输出/项目实践</h4>
<p>之前跟我 leader 聊过学习方式，他学习一个新的语言/框架会先自己摸索着把项目运行起来，自己尝试着改点东西，然后可能项目里直接用上了，遇到问题再一点点解决。这是一种很高效的掌握方式，而且可能在项目工程应用上更加普适，但可能我还是偏学院派一点，会选择看课/看教程这一种起初效率相对较低，但能够在一开始就掌握一些最佳实践，且在后续遇到问题在心态上更稳一点的方式吧。</p>
<p><del>内心 OS：要是我有我 leader 那样前一天晚上刚发现一个框架，第二天就把项目架子重构了的可怕工程能力，我还看什么课啊。</del></p>
<p>看课也有一些完成作业、项目实践和最后的课程结业的成就感，能够在学习的各个阶段里给自己一些动力，比如我一周多学完的 React 课程拿到证书，并且成功用到了实际的 Side Project 项目中，还是蛮激励自己继续下去的。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/udemy_react_cert.jpeg" alt="udemy_react_cert"></p>
<p>当然，这种方式也还是有一个门槛就是很多这样比较高质量的课都还是在 Youtube 或是一些国外的平台的，基本只有英文，所以还是需要有一些克服的，不过也都会提供中文字幕，但我个人还是更倾向于英文来看的，毕竟也会牵扯到很多术语，而且机翻很一般。</p>
<p>另外，看课由于一般周期比较长，很容易中途放弃或是拖延到忘记了前面的内容，不进行实践或者记录很容易忘记，为了克服这一点，我采取了两种很简单却行之有效的方式 —— 以输出为导向与以结果为导向的学习。</p>
<p>输出导向很好理解，我有在更新自己的个人博客，<del>曾经技术干货还是很多的，现在在日常博主和工具效率博主之间反复横跳</del>，我会在学一门技术/知识的时候分屏在 Logseq 中记录下关键笔记，注意，这一定不能是直接粘课程资料，而是更多自己在编辑器里敲一遍并且勤加注释，顺便把关键的一些比如命令或者代码片段直接截图保存一下，完成后消化一段时间笔记。</p>
<p>过了 1-2 周后，再重新去看笔记，并且把笔记整理成文。这里有两点非常重要，一个是过 1-2 周，我们刚学完时会有比较深的印象，也常常会有一种“我已经会了”的错觉，但其实掌握得不一定很扎实，可能只是一些即时的记忆，1-2 周正好是一个不错的消化周期；而整理成文则是另一个很关键的点，我们常常会写一些零散的笔记或是思维导图，但其实能把一个知识点组织成文，用自然语言讲出来，让读者能够看得很流畅，是一件挺具有挑战性的事。</p>
<p>这时候上文的那些注释和截图就有用场了，我在写文章时有自己和自己对话以及反复回看的习惯，就是比如写完一个模块后，会常常问自己，如果我是读者，我在这里会提什么问题，我该怎么解答，那其实常常会发现一些讲得不够清楚的点，再加上反复回看后添加的补充说明，成文的时候一般来说还是一个挺行文完整且符合自己思维逻辑的技术博文了，作为以后温习或是当作参考文档查询也会比看别人的资料要有效得多。</p>
<p>其实更好的方式是录视频讲解，能把一件事在视频中讲清楚比起写明白的难度还是更上了一个层级的，但我还在克服需要录制视频讲课的一些心理障碍。</p>
<p>明年的一个小目标就是成为一名技术 Youtuber/up 主了，<del>可能最后成为了萌宠博主呢，毕竟谁看我啊，点开周报的都是来看捏捏的吧，我今天就不发，囤到年终总结攒一波出片</del>。</p>
<p>除了输出外，我还有另一个并不建议大家轻易尝试的方式 —— 以结果为导向的极限操作。其实就是把一些超出自己目前能力范围（但也别太多）的任务先接下来，以结果和 ddl 来逼自己快速掌握，以及遇到问题会更拼命想办法去解决。</p>
<p>这个可能和个人心态、信心和多线程能力有关，我是一个遇事还算冷静处理的人，经常几个任务并行但也不至于会被压垮，而这么多年踩坑的经验也让我明白了一个朴实的道理 —— 再复杂的任务总是奇迹地能在 ddl 逼近之前的几分钟搞完，大概这才是第一生产力吧。</p>
<p><del>但现在随着做的项目越来越复杂还是少这样吧，万一翻车了呢。</del></p>
<h2 id="总结">总结</h2>
<p>剩下的其实也没有太多方法可讲了，以上其实也都只是学习一门技术或知识的一些经验谈，学完了可能也只能说刚入门，工程能力的培养没有捷径，只能靠不断实践积累咯。</p>
<p>技术是一件很有趣且不同阶段去了解学习都有截然不同感受的事，就像我 leader 是一个二十多年工作经验的强者了，依然经常在半夜突然发个消息给我，说“XXX 框架/工具挺有意思的，可以玩一下”。</p>
<p>我很喜欢他的这种说法，“玩”一下，我们不需要再去纠结或是辩驳把爱好作为职业是一种怎样的体验，因为我们本就乐在其中，工作不过是顺便能够糊口的副产品罢了，也希望大家都能找到自己的心之所向吧。</p>
<p>自己并不是什么大佬，目前阶段很难能够在具体的一些技术和领域写出很深度的文章（但是也有在努力了），于是想把自己的各种经验作一些分享吧，后面也想针对一些更细节的技术输出一些视频教程和文字教程。</p>
<p><del>让我数数今天挖了几个坑要填。</del></p>
]]></content:encoded></item><item><title>周报 #22 - 内卷与焦虑感</title><link>https://www.pseudoyu.com/en/2022/12/13/weekly_review_20221213/</link><pubDate>Tue, 13 Dec 2022 22:24:02 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/13/weekly_review_20221213/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-12-07 到 2022-12-13 这周生活的记录与思考。 这大概是累计没有踏出家门的第 20 天了，基于当前多个项目并行的工作强度和阴性快要清</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1213_photo.png" alt="weekly_review_1213_photo"></p>
<p>本篇是对 <code>2022-12-07</code> 到 <code>2022-12-13</code> 这周生活的记录与思考。</p>
<p>这大概是累计没有踏出家门的第 20 天了，基于当前多个项目并行的工作强度和阴性快要清零的现状，还并没有打算回公司，甚至想在家窝到年前都不出门了，自宅生活也很惬意。</p>
<p>忙碌的各项工作和 Side Project 任务模糊了周末与工作日的界限，但多年残留的习惯依然让我有一种“周末是自己的时间，用来睡觉岂不是太浪费了”的错觉，再加上没有早会的时间压力，也越睡越晚。不过做了不少有意思的事，探索了一些一直想学的东西并且应用到了项目里，还做了一些 Demo 玩具，一直处于还挺开心的状态。</p>
<p>其他时间里，和远在澳洲的挚友一起连麦看了荷兰的比赛（虽然输了），并得知会收到一个很欣喜的礼物（虽然会寄到香港，暂时拿不到）；一位朋友受到我的影响也开始写周报，互相催更（虽然我又拖延了几天）；猫猫能听懂自己名字了，一句“捏捏过来”就能从家里的各个角落召唤出她，像宝可梦一样；以及很多其他有意思的事。</p>
<h2 id="内卷与焦虑感">内卷与焦虑感</h2>
<p>在 <a href="https://space.bilibili.com/58078997">polebug</a> 最新的一期学习记录视频看到有在谈论卷和焦虑感的话题，其实就个人偏好来说，我不是很喜欢“卷”这个词，自己说自己卷像是带着一种居高临下与自我满足，听到别人如此评价又似乎有一种小时候听到老师说“这孩子不聪明但是一直很用功，值得鼓励”的莫名意味。</p>
<p>“卷”似乎与现在到处弥漫的焦虑感相生相伴，来自工作项目的压力、对自己方向的迷茫或是不满足于提升速度，以及所谓的 Peer Pressure，我们总是倾向于将自己置于当前所处阶段的消极面，总是去受到一些论调的影响去否认自己的一面，然后通过各种形式的自我满足式付出去挤压自己的空闲时间，常常也身心俱疲。</p>
<p>我更喜欢的是国外可能更常提及的“<a href="https://knowyourmeme.com/memes/today-i-learned-til">TIL</a>”的描述，Today I Learned，在完成基础或是重复性的本职工作之外，自己又学到了什么。可以是看了一些闲书或是工具书，可以是学了一项新的技术或是将之前的经验总结成文，可以是着手做一个新项目或是对原有项目进行了一些优化，只要是好奇心与求知欲所及，都可以称为一个个“TIL”。</p>
<p>学习和探索本身是一件有趣的事，甚至并不一定是一件与结果/收益直接相关的事，虽然略有些俗套，但我并不丰富的一些阅历和经验让我总是信奉着一种“无用之用”的心态，常常是过去出于兴趣、好奇或是其他纯粹目的所做的一些事在未来的一些阶段带来一些惊喜，要做的常常就是遵守本心和静静等候。</p>
<h2 id="与捏捏的日常">与『捏捏』的日常</h2>
<p>这周依然是一起宅在家的生活，能渐渐感觉到一点点建构起来的信任与情感依赖（同时也放肆了很多），会在我忙在各个会议里时静静躺在键盘前伴着嘈杂的人声与键盘敲击声熟睡，会在我许久没有管她时绕着我的脚撒娇要抱抱，会在我看世界杯时在我面前一起关注着赛场的动向，会在睡前跑酷到我的被子里一起入眠，也会在我赖床不起时直接一脚踩在我脸上“叫醒”我换粮。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_18.jpeg" alt="冷知识，猫毛掉进路由器会造成网络拥堵（烂梗）" />
    </div>
    
      <figcaption>
          <p>冷知识，猫毛掉进路由器会造成网络拥堵（烂梗）
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_17.jpeg" alt="你不陪我玩，我拿逗猫棒自己逗自己" />
    </div>
    
      <figcaption>
          <p>你不陪我玩，我拿逗猫棒自己逗自己
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_19.jpeg" alt="荷兰你行不行啊，不然我来？" />
    </div>
    
      <figcaption>
          <p>荷兰你行不行啊，不然我来？
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_20.jpeg" alt="别工作了，给我当枕头" />
    </div>
    
      <figcaption>
          <p>别工作了，给我当枕头
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_22.jpeg" alt="别工作了，给我当脚垫" />
    </div>
    
      <figcaption>
          <p>别工作了，给我当脚垫
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_21.jpeg" alt="别工作了，要抱抱" />
    </div>
    
      <figcaption>
          <p>别工作了，要抱抱
              
          </p>
      </figcaption>
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="技术">技术</h3>
<p>因为 Side Project 需要，这周跟着 Udemy 上之前买的一些课好好学了下 React，感觉前端现在还是蛮有意思的。大学时候赚外快写过一些网站，还记得当时都还是自己糊的 HTML、CSS、JavaScript，好像用了 JQuery 来获取元素什么的，还记得当时用 ThinkPHP，然后有一个什么 MVC 框架，包括后来做的一个微信小程序也是，现在感觉都有些时代的眼泪了。</p>
<p>因为很久没写过前端，也没什么技术包袱，用了 JavaScript + React + TailWind CSS + daisyUI 糊了一个查找 GitHub 用户和 Repo 的 Demo 练习项目“<a href="https://yu-github-finder.vercel.app">GitHub Finder</a>”，感觉现在写前端多了好多工具链和库，整个项目就没写几行 CSS，移动端响应做得也不错，有点舒服。</p>
<p>不过后面项目需要用的是 TypeScript + Next.js + TailWind CSS，所以这个 Demo 也就是打打基础了。</p>
<p>有意思的是这两周 JavaScript 写多了，那天给我一个工作里的小 leader 投屏改 Go 代码的时候取一个数组的长度我下意识就 <code>.length</code> 了，报错后好久才反应过来，感受到了来自屏幕对面的困惑，几天不见 Go 都不会了哈哈。</p>
<p>感觉离自己能糊出一些好玩的小工具越来越近了，开心。</p>
<h3 id="输入">输入</h3>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>三体</strong>，也还算期待了一阵子的三体动画版，放出了两集，我本身原著应该是看了大半，但算不上什么粉也没太多信仰，整体感觉的话还是挺不错的，画面和节奏都还行。</li>
</ul>
]]></content:encoded></item><item><title>[译] Google Go 风格指南</title><link>https://www.pseudoyu.com/en/2022/12/08/go_style_guide/</link><pubDate>Thu, 08 Dec 2022 11:46:54 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/08/go_style_guide/</guid><description>《后来的我们 - 五月天》 风格原则 以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序： 清晰：代码的目的和设计原</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="风格原则">风格原则</h2>
<p>以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序：</p>
<ol>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E6%B8%85%E6%99%B0">清晰</a>：代码的目的和设计原理对读者来说是清楚的。</li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E7%AE%80%E7%BA%A6">简约</a>：代码以最简单的方式来完成它的目的。</li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E7%AE%80%E6%B4%81">简洁</a>：代码具有很高的信噪比，即写出来的代码是有意义的，非可有可无的。</li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7">可维护性</a>：代码可以很容易地被维护。</li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E4%B8%80%E8%87%B4">一致</a>：代码与更广泛的 Google 代码库一致。</li>
</ol>
<h3 id="清晰">清晰</h3>
<p>可读性的核心目标是写出对读者来说很清晰的代码。</p>
<p>清晰性主要是通过有效的命名、有用的注释和有效的代码组织来实现的。</p>
<p>清晰性要从读者的角度来看，而不是从代码的作者的角度来看，代码的易读性比易写性更重要。代码的清晰性有两个不同的方面：</p>
<ul>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E8%AF%A5%E4%BB%A3%E7%A0%81%E5%AE%9E%E9%99%85%E4%B8%8A%E5%9C%A8%E5%81%9A%E4%BB%80%E4%B9%88">该代码实际上在做什么？</a></li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A3%E7%A0%81%E4%BC%9A%E8%BF%99%E4%B9%88%E5%81%9A">为什么代码会这么做？</a></li>
</ul>
<h4 id="该代码实际上在做什么">该代码实际上在做什么</h4>
<p>Go 被设计得应该是可以比较直接地看到代码在做什么。在不确定的情况下或者读者可能需要先验知识才能理解代码的情况下，我们值得投入时间以使代码的目的对未来的读者更加明确。例如，它可能有助于：</p>
<ul>
<li>使用更具描述性的变量名称</li>
<li>添加额外的评论</li>
<li>使用空白与注释来划分代码</li>
<li>将代码重构为独立的函数/方法，使其更加模块化</li>
</ul>
<p>这里没有一个放之四海而皆准的方法，但在开发 Go 代码时，优先考虑清晰性是很重要的。</p>
<h4 id="为什么代码会这么做">为什么代码会这么做</h4>
<p>代码的基本原理通常由变量、函数、方法或包的名称充分传达。如果不是这样，添加注释是很重要的。当代码中包含读者可能不熟悉的细节时，“为什么？”就显得尤为重要，例如：</p>
<ul>
<li>编程语言中的细微差别，例如，一个闭包将捕获一个循环变量，但闭包在许多行之外</li>
<li>业务逻辑的细微差别，例如，需要区分实际用户和虚假用户的访问控制检查</li>
</ul>
<p>一个 API 可能需要小心翼翼才能正确使用。例如，由于性能原因，一段代码可能错综复杂，难以理解，或者一连串复杂的数学运算可能以一种意想不到的方式使用类型转换。在这些以及更多的情况下，附带的注释和文档对这些方面进行解释是很重要的，这样未来的维护者就不会犯错，读者也可以理解代码而不需要进行逆向工程。</p>
<p>同样重要的是，我们要意识到，一些基于清晰性考虑的尝试（如添加额外的注释），实际上会通过增加杂乱无章的内容、重述代码已经说过的内容、与代码相矛盾或增加维护负担来保持注释的最新性，以此来掩盖代码的目的。让代码自己说话（例如，通过代码中的名称本身进行描述），而不是添加多余的注释。通常情况下，注释最好是解释为什么要做某事，而不是解释代码在做什么。</p>
<p>Google 的代码库基本上是统一和一致的。通常情况下，那些比较突兀的代码（例如，应用一个不熟悉的模式）是基于充分的理由，通常是为了性能。保持这种特性很重要，可以让读者在阅读一段新的代码时清楚地知道他们应该把注意力放在哪里。</p>
<p>标准库中包含了许多这一原则发挥作用的例子。例如：</p>
<ul>
<li>在 <code>package sort</code> 中的维护者注释</li>
<li>好的<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/sort/example_search_test.go">同一软件包中可运行的例子</a>，这对用户（他们会<a href="https://pkg.go.dev/sort#pkg-examples">查看 godoc</a>）和维护者（他们<a href="https://gocn.github.io/styleguide/docs/03-decisions/#%E7%A4%BA%E4%BE%8Bexamples">作为测试的一部分运行</a>）都有利</li>
<li><code>strings.Cut</code> 只有四行代码，但它们提高了<a href="https://github.com/golang/go/issues/46336">callsites 的清晰性和正确性</a></li>
</ul>
<h3 id="简约">简约</h3>
<p>你的 Go 代码对于使用、阅读和维护它的人来说应该是简单的。</p>
<p>Go 代码应该以最简单的方式编写，在行为和性能方面都能实现其目标。在 Google Go 代码库中，简单的代码：</p>
<ul>
<li>从头至尾都易于阅读</li>
<li>不预设你已经知道它在做什么</li>
<li>不预设你能记住前面所有的代码</li>
<li>不含非必要的抽象层次</li>
<li>不含过于通用的命名</li>
<li>让读者清楚地了解到传值与决定的传播情况</li>
<li>有注释，解释为什么，而不是代码正在做什么，以避免未来的歧义</li>
<li>有独立的文档</li>
<li>包含有效的错误与失败用例测试</li>
<li>往往不是看起来“聪明”的代码</li>
</ul>
<p>在代码的简单性和 API 使用的简单性之间可能会需要权衡。例如，让代码更复杂可能是值得的，这样 API 的终端用户可以更容易地正确调用 API。相反，把一些额外的工作留给 API 的终端用户也是值得的，这样代码就会保持简单和容易理解。</p>
<p>当代码需要复杂性时，应该有意地增加复杂性。如果需要额外的性能，或者一个特定的库或服务有多个不同的客户，这通常是必要的。复杂性可能是合理的，但它应该有相应的文档，以便客户和未来的维护者能够理解和驾驭这种复杂性。这应该用测试和例子来补充，以证明其正确的用法，特别是如果同时有一个“简单”和“复杂”的方法来使用代码。</p>
<p>这一原则并不意味着复杂的代码不能或不应该用 Go 编写，也不意味着 Go 代码不允许复杂。我们努力使代码库避免不必要的复杂性，因此当复杂性出现时，它表明有关的代码需要仔细理解和维护。理想情况下，应该有相应的注释来解释其中的道理，并指出应该注意的地方。在优化代码以提高性能时，经常会出现这种情况；这样做往往需要更复杂的方法，比如预先分配一个缓冲区并在整个 goroutine 生命周期内重复使用它。当维护者看到这种情况时，应该是一个线索，说明相关的代码是基于性能的关键考虑，这应该影响到未来修改时的谨慎。另一方面，如果不必要地使用，这种复杂性会给那些需要在未来阅读或修改代码的人带来负担。</p>
<p>如果代码非常复杂，但其目的应该是简单的，这往往是一个我们可以重新审视代码实现的信号，看看是否有更简单的方法来完成同样的事情。</p>
<h4 id="最小化机制">最小化机制</h4>
<p>如果有几种方法来表达同一个想法，最好选择使用最标准工具的方法。复杂的机制经常存在，但不应该无缘无故地使用。根据需要增加代码的复杂性是很容易的，而在发现没有必要的情况下删除现有的复杂性则要难得多。</p>
<ol>
<li>当足以满足你的使用情况时，争取使用一个核心语言结构（例如通道、切片、地图、循环或结构）</li>
<li>如果没有，就在标准库中寻找一个工具（如 HTTP 客户端或模板引擎）</li>
<li>最后，在引入新的依赖或创建自己的依赖之前，考虑 Google 代码库中是否有一个能够满足的核心库</li>
</ol>
<p>例如，考虑生产代码包含一个绑定在变量上的标志，它的默认值必须在测试中被覆盖。除非打算测试程序的命令行界面本身（例如，用<code>os/exec</code>），否则直接覆盖绑定的值比使用 <code>flag.Set</code> 更简单，因此更可取。</p>
<p>同样，如果一段代码需要检查集合成员的资格，一个布尔值的映射（例如，<code>map[string]bool</code>）通常就足够了。只有在需要更复杂的操作，不能使用 map 或过于复杂时，才应使用提供类似集合类型和功能的库。</p>
<h3 id="简洁">简洁</h3>
<p>简洁的 Go 代码具有很高的信噪比。它很容易分辨出相关的细节，而命名和结构则引导读者了解这些细节。</p>
<p>而有很多东西会常常会阻碍这些最突出的细节：</p>
<ul>
<li>重复代码</li>
<li>外来的语法</li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/#%E5%91%BD%E5%90%8D">含义不明的名称</a></li>
<li>不必要的抽象</li>
<li>空白</li>
</ul>
<p>重复代码尤其容易掩盖每个相似代码之间的差异，需要读者直观地比较相似的代码行来发现变化。<a href="https://github.com/golang/go/wiki/TableDrivenTests">表驱动测试</a>是一个很好的例子，这种机制可以简明地从每个重复的重要细节中找出共同的代码，但是选择哪些部分囊括在表中，会对表格的易懂程度产生影响。</p>
<p>在考虑多种结构代码的方式时，值得考虑哪种方式能使重要的细节最显著。</p>
<p>理解和使用常见的代码结构和规范对于保持高信噪比也很重要。例如，下面的代码块在<a href="https://go.dev/blog/errors-are-values">错误处理</a>中非常常见，读者可以很快理解这个代码块的目的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Good:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">doSomething</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>如果代码看起来非常相似但却有细微的不同，读者可能不会注意到这种变化。在这样的情况下，值得故意<a href="https://gocn.github.io/styleguide/docs/04-best-practices/#%E4%BF%A1%E5%8F%B7%E5%A2%9E%E5%BC%BA">“提高”</a>错误检查的信号，增加一个注释以引起关注。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Good:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">doSomething</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// if NO error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="可维护性">可维护性</h3>
<p>代码被编辑的次数比它写它的次数多得多。可读的代码不仅对试图了解其工作原理的读者有意义，而且对需要改写它的程序员也有意义，清晰性很关键。</p>
<p>可维护的代码：</p>
<ul>
<li>容易让未来的程序员正确进行修改</li>
<li>拥有结构化的 API，使其能够优雅地增加</li>
<li>清楚代码预设条件，并选择映射到问题结构而不是代码结构的抽象</li>
<li>避免不必要的耦合，不包括不使用的功能</li>
<li>有一个全面的测试套件，以确保预期行为可控、重要逻辑正确，并且测试在失败的情况下提供清晰、可操作的诊断</li>
</ul>
<p>当使用像接口和类型这样的抽象时，根据定义，它们会从使用的上下文中移除信息，因此必须确保它们提供足够的好处。当使用具体类型时，编辑器和 IDE 可以直接连接到方法定义并显示相应的文档，但在其他情况下只能参考接口定义。接口是一个强大的工具，但也是有代价的，因为维护者可能需要了解底层实现的具体细节才能正确使用接口，这必须在接口文档中或在调用现场进行解释。</p>
<p>可维护的代码还可以避免在容易忽视的地方隐藏重要的细节。例如，在下面的每一行代码中，是否有 <code>:</code> 字符对于理解这一行至关重要。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Bad:
</span></span></span><span class="line"><span class="cl"><span class="c1">// 使用 = 而不是 := 可以完全改变这一行的含义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">UserByID</span><span class="p">(</span><span class="nx">userID</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Bad:
</span></span></span><span class="line"><span class="cl"><span class="c1">// 这行中间的 ！ 很容易错过
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">leap</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">year</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(!(</span><span class="nx">year</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">year</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span></span></code></pre></div><p>这两种写法不能说错误，但都可以写得更明确，或者可以有一个附带的评论，提醒注意重要的行为。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Good:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">u</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">UserByID</span><span class="p">(</span><span class="nx">userID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invalid origin user: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">user</span> <span class="p">=</span> <span class="nx">u</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Good:
</span></span></span><span class="line"><span class="cl"><span class="c1">// 公历闰年不仅仅是 year%4 == 0
</span></span></span><span class="line"><span class="cl"><span class="c1">// 查看 https://en.wikipedia.org/wiki/Leap_year#Algorithm.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">leap4</span>   <span class="p">=</span> <span class="nx">year</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">leap100</span> <span class="p">=</span> <span class="nx">year</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">leap400</span> <span class="p">=</span> <span class="nx">year</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">leap</span> <span class="o">:=</span> <span class="nx">leap4</span> <span class="o">&amp;&amp;</span> <span class="p">(!</span><span class="nx">leap100</span> <span class="o">||</span> <span class="nx">leap400</span><span class="p">)</span>
</span></span></code></pre></div><p>同样地，一个隐藏了关键逻辑或重要边界情况的辅助函数，可能会使未来的变化很容易地被误解。</p>
<p>易联想的名字是可维护代码的另一个特点。一个包的用户或一段代码的维护者应该能够联想到一个变量、方法或函数在特定情况下的名称。相同概念的函数参数和接收器名称通常应该共享相同的名称，这既是为了保持文档的可理解性，也是为了方便以最小的开销重构代码。</p>
<p>可维护的代码尽量减少其依赖性（包括隐性和显性）。对更少包的依赖意味着更少的代码行可以影响其行为。避免对内部或未记录的行为的依赖，使得代码在未来这些行为发生变化时，不太容易造成维护负担。</p>
<p>在考虑如何构造或编写代码时，值得花时间去思考代码可能随着时间的推移而演变的方式。如果一个给定的方法更有利于未来更容易和更安全的变化，这往往是一个很好的权衡，即使它意味着一个稍微复杂的设计。</p>
<h3 id="一致">一致</h3>
<p>一致性的代码是指在更广泛的代码库中，在一个团队或包的范围内，甚至在一个文件中，看起来、感觉和行为都是类似的代码。</p>
<p>一致性的问题并不凌驾于上述的任何原则之上，但如果必须有所取舍，那往往有利于一致性的实现。</p>
<p>一个包内的一致性通常是最直接重要的一致性水平。如果同一个问题在一个包里有多种处理方式，或者同一个概念在一个文件里有很多名字，那就会非常不优雅。然而，即使这样，也不应该凌驾于文件的风格原则或全局一致性之上。</p>
<h2 id="核心准则">核心准则</h2>
<p>这些准则收集了所有 Go 代码都应遵循的 Go 风格的最重要方面。我们希望这些原则在你被保障可读性的时候就已经学会并遵循了。这些不会经常改变，新增加内容也有较高准入门槛。</p>
<p>下面的准则是对 <a href="https://go.dev/doc/effective_go">Effective Go</a> 中建议的扩展，它为整个社区的 Go 代码提供了一个共同的基准线。</p>
<h3 id="格式化">格式化</h3>
<p>所有 Go 源文件必须符合 gofmt 工具所输出的格式。这个格式是由 Google 代码库中的预提交检查强制执行的。<a href="https://docs.bazel.build/versions/main/be/general.html#genrule">生成的代码</a>通常也应该被格式化（例如，通过使用<code>format.Source</code>），因为它也可以在代码搜索中浏览。</p>
<h3 id="大小写混合">大小写混合</h3>
<p>Go 源代码在编写包含多个字的名称时使用<code>MixedCaps</code>或<code>mixedCaps</code>（驼峰大写）而不是下划线（蛇形大写）。</p>
<p>即使在其他语言中打破惯例，这也适用。例如，一个常量如果被导出，则为<code>MaxLength</code>（而不是<code>MAX_LENGTH</code>），如果未被导出，则为<code>maxLength</code>（而不是<code>max_length</code>）。</p>
<p>基于初始化大小写的考量，局部变量被认为是 <a href="https://go.dev/ref/spec#Exported_identifiers">不可导出的</a>。</p>
<h3 id="行长度">行长度</h3>
<p>Go 源代码没有固定的行长度。如果觉得某一行太长，就应该对其进行重构而不是破坏。如果它已经很短了，那么就应该允许它继续增加。</p>
<p>不要在以下情况进行分行：</p>
<ul>
<li>在<a href="https://gocn.github.io/styleguide/docs/03-decisions/#%E7%BC%A9%E8%BF%9B%E7%9A%84%E6%B7%B7%E4%B9%B1">缩进变化</a>之前(例如，函数声明、条件)</li>
<li>要使一个长的字符串（例如，一个 URL）适合于多个较短的行</li>
</ul>
<h3 id="命名">命名</h3>
<p>命名是艺术而不是科学。在 Go 中，名字往往比许多其他语言的名字短一些，但同样的<a href="https://testing.googleblog.com/2017/10/code-health-identifiernamingpostforworl.html">一般准则</a>也适用，名称应：</p>
<ul>
<li>使用时不感到<a href="https://gocn.github.io/styleguide/docs/03-decisions/#%E9%87%8D%E5%A4%8Drepetition">重复</a></li>
<li>将上下文考虑在内</li>
<li>不重复已经明确的概念</li>
</ul>
<p>你可以在<a href="https://gocn.github.io/styleguide/docs/02-guide/#%E5%91%BD%E5%90%8D">决定</a>中找到关于命名的更具体的指导。</p>
<h3 id="本地化一致性">本地化一致性</h3>
<p>如果风格指南对某一特定的风格点没有说明，作者可以自由选择他们喜欢的风格，除非相近的代码（通常在同一个文件或包内，但有时在一个团队或项目目录内）对这个问题采取了一致的立场。</p>
<p><strong>有效的</strong>本地风格化考虑例子：</p>
<ul>
<li>使用 <code>%s</code> or <code>%v</code> 来打印错误</li>
<li>使用缓冲通道来代替 mutexes</li>
</ul>
<p><strong>无效的</strong>本地化风格化考虑例子：</p>
<ul>
<li>代码行长度的限制</li>
<li>使用基于断言的测试库</li>
</ul>
<p>如果本地化风格与风格指南不一致，但对可读性的影响仅限于一个文件，它通常会在代码审查中浮出水面，而一致的修复将超出有关 CL 的范围。在这一点上，提交一个 bug 来跟踪修复是合适的。</p>
<p>如果一个改变会使现有的风格偏差变大，在更多的 API 表面暴露出来，扩大存在偏差的文件数量，或者引入一个实际的错误，那么局部一致性就不再是违反新代码风格指南的有效理由。在这些情况下，作者应该在同一 CL 中清理现有的代码库，在当前 CL 之前进行重构，或者找到一个至少不会使本地化问题恶化的替代方案。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://google.github.io/styleguide/go/guide">原文地址</a></li>
<li><a href="https://gocn.github.io/styleguide/docs/02-guide/">本文永久链接</a></li>
<li><a href="https://github.com/gocn/translator">GoCN &lt;每周译 Go&gt;</a></li>
<li><a href="https://github.com/pseudoyu">译者：pseudoyu</a></li>
<li><a href="https://github.com/zxmfke">校对：Xiaomin Zheng</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>周报 #21 - 重新捡起的生活</title><link>https://www.pseudoyu.com/en/2022/12/06/weekly_review_20221206/</link><pubDate>Tue, 06 Dec 2022 21:48:50 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/12/06/weekly_review_20221206/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-11-28 到 2022-12-06 这周生活的记录与思考。 都说 21 天可以养成一个习惯，然而到了第 21 篇周报，却依然没能如期更新，每周都是花式</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1206_photo.png" alt="weekly_review_1206_photo"></p>
<p>本篇是对 <code>2022-11-28</code> 到 <code>2022-12-06</code> 这周生活的记录与思考。</p>
<p>都说 21 天可以养成一个习惯，然而到了第 21 篇周报，却依然没能如期更新，每周都是花式拖更理由了。</p>
<p>过去的一周工作上其实算不上多忙碌，为活动开发的功能都顺利上线而进入了日常维护阶段，但是睡眠状况依然堪忧，几乎也都还是 3 点后才睡。之前提到过的和学弟一起做的项目筹备得差不多，也逐步启动了，却更多地感觉是在忙自己喜欢的事，所以也算是幸福的负担了。但前前后后堆积的事还是不少，即使是习惯了多线程的自己也频繁感觉到有些力不从心，好在身体健康状况感觉还行。</p>
<p>仍然因为疫情而居家远程办公（已经整整 15 天没有出门了），继续和捏捏共度时光，与之前的一篇周报主题“<a href="https://www.pseudoyu.com/en/2022/10/09/weekly_review_20221009/">被搁置的生活与自我</a>”相对应，我的生活似乎重新被捡起来了，多了许多明媚时光。</p>
<h2 id="重新捡起的生活">重新捡起的生活</h2>
<p>其实即使自己并没有怎么意识到，在接捏捏回家后的这 40 天中，自己发生了很多变化。因为前段时间分别忙碌于工作，和一位友人一个多月没有联系，这次刚好我帮忙解决一个电脑问题，聊了几句，有了如下对话：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/chat_with_jmadeinapril.png" alt="chat_with_jmadeinapril"></p>
<p>虽然也没有说的忧郁气质那么夸张，但我总体来说是个不那么积极阳光的人，对于生活和很多事都有着一种置身事外感，并不是不关心或是无法共情，只是不会有那么大的情绪投入，就像是一种角色扮演游戏，我扮演着我自己。而与他人的对话中其实更加不会过多展现自己的内心部分，同样，并不是因为不信任或是蓄意隐瞒所打造什么人设，只是不习惯。</p>
<p>而现在，即使自己好像并没有刻意改变什么，却依然能从哪怕只是日常的对话中让人感觉到情绪，是一种渐渐从自己的言语中溢出的满足感和充盈感。虽说决定再次养猫这件事也经过了反复思虑和权衡，但也未曾想这是一件会对我改变那么大的事，作为宠物和舍友责任与牵挂之余，她已然成为了我生活密不可分的一部分。</p>
<p>和另一位挚友聊天时被问到一句：</p>
<blockquote>
<p>“有了捏捏后会不会更安于现在的生活而不愿意做什么改变？”</p>
</blockquote>
<p>其实我的感知恰恰相反，最近有更加频繁和主动地去重新规划自己的生活节奏与未来目标，包括后续的工作形式、地域和内容。似乎对于之前的我来说，在哪个城市或是做怎样的工作，只要是自己喜欢做的事，只要是和自己在意的人一起，就已经足够满足，其他的没太太所谓。而现在则在自我独处以及和捏捏的“虚度时光”中逐渐更加能找到令自己舒适的生活状态与模式，也更加会在意生活本身的意义，生活不仅仅是自己爱好与工作的附属品，而是本身就值得被尊重和去好好探索的珍贵存在。</p>
<p>虽然并不想说得那么深沉，但捏捏似乎就像是在我生活的灰暗时刻突然出现的救赎，我在照顾之余也寄托了太多太多情绪与情感。所以其实会更加对未来会一起度过的生活有着更多期待，至少会更尽力工作来挣猫粮钱和争取更高的时间支配权来给予更多陪伴。</p>
<h2 id="与捏捏的日常">与『捏捏』的日常</h2>
<p>之前看过一部纪录片，《喵星人的奇思妙想》，是在解读猫的行为和背后潜藏的想法，自己最近似乎也有一些这样的倾向，在一些生活中的有趣时刻会拍下一张照片，并配上自己的猫语解读，是一种很有意思的体验，似乎猫和人都在互相揣测对方的想法。</p>
<p>因为她眼角分泌物比较多，咨询了医生说可能蛋白质摄入过多，所以开始换粮并减少了一些零食的投喂，第一天她发现吃的没有以前丰盛了，就一直趴在我电脑上用下图眼神看着我。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_11.jpeg" alt="刚来的时候感觉你家伙食很好的？不会是养不起我了吧？" />
    </div>
    
      <figcaption>
          <p>刚来的时候感觉你家伙食很好的？不会是养不起我了吧？
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_12.jpeg" alt="别工作了，看看我嘛" />
    </div>
    
      <figcaption>
          <p>别工作了，看看我嘛
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_13.jpeg" alt="你的小可爱想引起你的注意力" />
    </div>
    
      <figcaption>
          <p>你的小可爱想引起你的注意力
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_14.jpeg" alt="猫和老鼠都是你们人看着玩的，本猫都看困了" />
    </div>
    
      <figcaption>
          <p>猫和老鼠都是你们人看着玩的，本猫都看困了
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_15.jpeg" alt="不许在我睡觉的时候卷我" />
    </div>
    
      <figcaption>
          <p>不许在我睡觉的时候卷我
              
          </p>
      </figcaption>
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输出">输出</h3>
<p>发现好久没正经写技术博客了，其实很多都已经打了草稿和笔记，只是还没有梳理成文，要继续加紧输出了。不过最近倒是和 GoCN 的小伙伴们一起翻译了一个 『<a href="https://gocn.github.io/styleguide/">Google Go 编程规范</a>』，还连同之前的『<a href="https://gocn.github.io/How-To-Code-in-Go/">How To Code In Go</a>』发布了在线版本和 pdf 版本，今天还接到了极客时间的合作邀请（顺便小组成员都能白嫖一个专栏），也算是很开心的一个小成就了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/gocn_trans_book.png" alt="gocn_trans_book"></p>
<p>不知不觉自己的 Telegram 频道『<a href="https://t.me/pseudoyulife">Yu&rsquo;s Life</a>』刚满了 200 订阅了，其实挺神奇的，只是一个自动化同步自己各个平台输入输出的一个小频道，慢慢积累了一些关注，也常常收到各个平台来的读者们的私信或是加好友申请，说频道有为他们带来一些不一样的视角和思考，还挺荣幸当时的一个小小的想法能够产生这样有趣的结果的，前几周忙碌于工作也少了很多输入输出，也希望继续坚持下去了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_life_tg_subs_100.png" alt="yu_life_tg_subs_100"></p>
<p>这周的另一个小爱好就是调戏 ChatGPT，现在的 AI 聊天机器人也太强了，要是 GitHub Copilot 可能更多只是能够辅助一下写一些工具方法，但是 ChatGPT 是真能把整个程序给写出来（并且忽略了我的拼写错误正确理解了），要失业咯。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/chatgpt_help_me_code_golang.png" alt="chatgpt_help_me_code_golang"></p>
<h3 id="输入">输入</h3>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>唐朝诡事录</strong>，被朋友推荐来看的，好像这种题材看得蛮少的，有些惊喜感，集中一个周末就刷完了，剧情大多还算经得起推敲，人物都很讨喜，喜君和小薛环都太可爱了！</li>
<li><strong>边缘世界</strong>，前几集虽然有点缝合但是感觉呈现形式挺不错的，后面越看越混乱，既没有了像是头号玩家那样的爽感，也算不上有什么深度，最后也算烂尾了。</li>
<li><strong>Wednesday，星期三</strong>，忘记从哪看到的推荐，工作间隙看完了，除了最开始的设定初见还比较新颖，后面有些不明所以，有点失望但还是追完了。</li>
<li><strong>静雪</strong>，正在追，侧重于情感渲染，所以后续节奏也比较慢，只求别再虐男二了。</li>
</ul>
]]></content:encoded></item><item><title>周报 #20 - 丧失的消费欲</title><link>https://www.pseudoyu.com/en/2022/11/27/weekly_review_20221127/</link><pubDate>Sun, 27 Nov 2022 21:08:00 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/11/27/weekly_review_20221127/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-11-18 到 2022-11-27 这周生活的记录与思考。 刚好到周末了，难得一天没有集中的开发工作量，饱饱地睡了一觉，下午补了落下的剧的</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1127_photo.jpeg" alt="weekly_review_1127_photo"></p>
<p>本篇是对 <code>2022-11-18</code> 到 <code>2022-11-27</code> 这周生活的记录与思考。</p>
<p>刚好到周末了，难得一天没有集中的开发工作量，饱饱地睡了一觉，下午补了落下的剧的一些进度，终于开始写周报，好像每周拖延几天（偷偷）磨掉了一周的周报哈哈，又回到了周日，新的轮回开始了。</p>
<p>这周是魔鬼作息，日常都是凌晨三四点睡，早上八九点起，有两三天甚至直接到了早上六点多才睡，然后又是一整天的工作量，周而复始，不过有猫猫的陪伴倒也算不上多苦，而且一直居家，反而多了一些相依为命的情谊。</p>
<p>可能因为确实过得太工作狂+生活佛系，又刚好要帮之前提过的酷学姐把一个她的画作上架成 NFT，所以让我带着猫猫去家里玩，体验了一下 “WeWork + 猫咖”，还蹭了两顿饭，是这周中为数不多的惬意时刻，也再次感慨自己的生活方式和品质和她的差距之大，不过也各有各的乐趣。</p>
<p>倒是猫猫是真的没良心，一点也不认生，一点好吃的好玩的就被收买了，四处好奇地探索，走的时候还不舍得，白养了，以后一定努力改善生活环境哈哈（卑微铲屎官的觉悟）。</p>
<h2 id="丧失的消费欲">丧失的消费欲</h2>
<p>其实自己以前一直算是个消费欲比较强的人，更多像是一种压制之下的报复性消费。因为家庭教育方式的问题，自己在学生时代一直是没有常规意义上的零用钱的，也不会有什么考好后的奖励这些（当然，与之相对的也是没有考不好后的批评和惩罚，很公平），而是有什么需要的会去跟父母说然后直接买，可能也是一种还不错的模式，但一些额外或是无用的消费也不太好跟家人提。</p>
<p>至今仍然记忆犹新（或者说是耿耿于怀哈哈）小学时期待了半年的一个礼物，原本一直以为会是 GBA SP（就是那个翻盖、有背光的 GBA 掌机，因为一直想来打口袋妖怪），但是收到后是一个遥控直升机，当时很失望。现在想想其实也挺好的，后面学无人机也有了一些基础直接上手了。</p>
<p>不过就是因为当下想要的东西总是没法第一时间获得，总是一种对于消费欲的压抑，而从大三开始经济独立，因为都是自己赚的钱所以可以很自由地支配，所以陆续买了很多东西，尤其是各种电子/数码产品，其实有些也并不是刚需或是真的很想要的东西，只是享受于能够自由拥有的感觉，甚至还有收藏各种包装盒的习惯（现在还都整齐地堆在书架顶上）。</p>
<p>工作后其实也更加是，毕竟也是一个算是天天和软硬件打交道的职业，再加上自己喜欢折腾各种工具应用，在有了一定经济能力后也都支持正版，在电子设备和软件上一直都有不小的开销，甚至还维护了一个还算小有热度的『<a href="https://github.com/pseudoyu/yu-tools">个人工具箱 - pseudoyu/yu-tools</a>』项目，也在持续更新中；同时，也常常会买一些感兴趣的 Switch 游戏，虽然有好多甚至都还没来得及打开，也少了很多沉下来慢慢品味的心境。</p>
<p>我似乎是一个不吝在爱好和喜欢的事物上消费的人，比起这些，反倒是自己的日常饮食或是生活起居才算是比较敷衍。但感觉近半年来，自己的消费欲在逐渐丧失，似乎再没有那种为了一个硬件产品期待好多天蹲发布、看评测和等收获的热情了，虽然常常嚷着自己的 16 寸 Intel 笔记本是被 Apple 背刺了，但也没那么在意所谓的 M 系列和它背后的数字了，更多就像是一种习惯一样看看发布的参数和跑分，提升了哪些哪些，然后自己来一句，“哦好，下一代再说吧”。</p>
<p>前段时间参加了双十一，因为刚刚把猫领回家，所以买了很多相关用品，倒是接连收了几天快递。然而在都安置好了，想着要不要给自己买点什么时，却好像陷入了一种空白，好像并不缺什么，也没有什么想要的，后来只好作罢；最近也是到了黑五，跟往年一样打开一些推文和文章看看有什么打折的软件数码，看了好半天最后也就买了两门和最近工作相关的课和一个笔记软件 Craft 的个人订阅会员，大部分期限也快结束了，自己也没什么感觉；可能双十二会买个体检套餐吧。</p>
<p>物欲的降低说不上是一件好事还是坏事，可能是因为现在自己已经不需要太多实体的、能触摸到的东西所带来的实感来填补自己的内心需要，慢慢地转向了一些可以内化的部分；可能是因为自己将许多需求的部分寄托到了猫猫和一些依赖关系上，并没有像以前那样有更多心思来关注自己的一些一时的满足；抑或是自己在日渐饱和的工作与日常中已经慢慢被磨灭了一些好奇心与探索的动力。</p>
<h2 id="与捏捏的日常">与『捏捏』的日常</h2>
<p>这周忙到书也没看，剧也只有周末的时候追了一部，其他也是什么都没顾上，但还是抽出时间带捏捏去体检了，依然有一些令人担心的小问题，也在继续吃药治疗了，希望能一直健健康康的，真的是有一点点小问题都会无比担心。</p>
<p>而因为一直都居家办公，陪伴的时间长了很多，有很多很棒的时刻值得记录，很不得每天都发好几条日常，像是一个晒娃狂魔，于是打算周报开一个小模块，日常记录这些瞬间，后面也想弄一些类似相册来记录下这些宝贵的时光。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_04.jpeg" alt="来，帮我开会" />
    </div>
    
      <figcaption>
          <p>来，帮我开会
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_05.jpeg" alt="优雅的姿态" />
    </div>
    
      <figcaption>
          <p>优雅的姿态
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_06.jpeg" alt="藏在被子里的小可爱" />
    </div>
    
      <figcaption>
          <p>藏在被子里的小可爱
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_07.jpeg" alt="这个无线充是给我充电用的么？" />
    </div>
    
      <figcaption>
          <p>这个无线充是给我充电用的么？
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_08.jpeg" alt="你是要讲道理还是要我" />
    </div>
    
      <figcaption>
          <p>你是要讲道理还是要我
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_09.jpeg" alt="熟睡的捏捏" />
    </div>
    
      <figcaption>
          <p>熟睡的捏捏
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_10.jpeg" alt="三顿半和猫猫续命" />
    </div>
    
      <figcaption>
          <p>三顿半和猫猫续命
              
          </p>
      </figcaption>
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>初恋，First Love</strong>，出租车司机的设定让我想到之前看的《稍微想起一点》、《驾驶我的车》和一部动漫《奇巧计程车》，觉得这个还真的是能看到人世间百态的职业。这部期待了挺久的其实，围绕着音乐的展开、回忆和当下交错的呈现方式和满岛光，都是吸引的点，有好几个转场有被惊艳到。不过轮剧情上很难说出彩，只是现在越来越受不得虐，觉得这样甜甜的也挺好，毕竟看隔壁在播的《静雪》天天都在心疼男二和女二，果然年纪大了，还是适合甜甜恋爱的展开。总体来说还是蛮值得一追的。</li>
<li><strong>静雪</strong>，正在追，真的是被虐到，一直到更能带入一点男二却要被刀。</li>
<li><strong>边缘世界</strong>，正在追。</li>
</ul>
]]></content:encoded></item><item><title>周报 #19 - 忆一次创业经历</title><link>https://www.pseudoyu.com/en/2022/11/17/weekly_review_20221117/</link><pubDate>Thu, 17 Nov 2022 21:25:09 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/11/17/weekly_review_20221117/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-11-09 到 2022-11-17 这周生活的记录与思考。 这周的周报差点就鸽了，好像已经很久没有在周日准时发布了（甚至越拖越晚），总是有</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1117_photo.png" alt="weekly_review_1117_photo"></p>
<p>本篇是对 <code>2022-11-09</code> 到 <code>2022-11-17</code> 这周生活的记录与思考。</p>
<p>这周的周报差点就鸽了，好像已经很久没有在周日准时发布了（甚至越拖越晚），总是有各种各样的事，原本也常常安慰自己说反正是自己的一种生活点滴记录，太忙了也可以降低一下优先级，但偶然在后台会发现一些用心的留言，甚至在微博这样已经几乎废弃使用的平台也能偶现一些催更，让我很真实地感觉到了自己写的文字和屏幕前的阅读者之间的链接，所以每次打开文档时也很难做到敷衍，倒不是说给自己压力一定要产出什么干货或是什么有价值的想法，但也难免会想象如果我作为读者在按照每周惯例打开周报看时是否会失望，也算是自己的一个小小标准吧。</p>
<p>其实一直很难称呼自己为作者，总觉得这个称号太重，似乎一下子和读者有了一些鸿沟，可能更多是自我定义为真诚写作的人，不论是一些周报想法中的碎碎念还是技术博文中对于知识的消化与解构，自己似乎很习惯于将自己的很多东西以文字形式呈现出来，归根结底还是自我分享欲的载体，但也常常能收获很多意外之喜，也更有动力坚持下去。</p>
<p>因为被工作占满了，这周的输入输出都不算多，不过倒是因为一些事记起了之前的一次创业经历，也算是第一次完整地回顾吧。</p>
<h2 id="忆一次创业经历">忆一次创业经历</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_02.jpeg" alt="my_cat_nie_nie_02"></p>
<p>工作上已经连续熬了一周多的大夜，大概每天都是两三点睡，第二天挣扎着爬起来开晨会，上线了好几个大需求，不过大部分时间在家远程，偶尔想出门了就去公司，所以也提前享受了一下自己理想的远程办公模式，再加上有猫猫陪着，尽管处于高压之下，也没有去年驻场开发赶交付终验那么痛苦。</p>
<p>并且甚至在赶着项目的同时，还和一位偶识的挺有缘的学弟开启了一个分支创业项目，参与的初衷只是更快地提升一下自己的技术力，但能够把一些小小的构想通过一次次的讨论逐步成型也是一个很有趣的过程，也很乐在其中。</p>
<p>而且这周也第三次重温了美剧《硅谷》，大概自己就是那种只要感觉自己处于新领域探索或新知识学习时就会有用不完的精力（或者某种程度上的透支），似乎更能找到乐趣和成就感，自己大体还是幸运的吧，自己所谋生的工作同时也承载了自己的兴趣与个人追求。提到这个，其实在目前的阶段倒是可以略有些不好意思地说自己曾经有过那么一段创业的时光，结果不怎么好，但对于我也是一段很珍惜的经历。</p>
<p>大三结束的暑假自己咬牙买了一台 Sony A7M3，全套下来两万多的售价掏空了当时的全部积蓄，于是和一位学院的老师一拍即合，萌生了做一个在线教育视频工作室的想法。</p>
<p>事情的展开比自己想象得顺利很多。7 月底有了初步构想，八月底制作了商业计划书（BP）并和学院领导进行合作协商，很快申请到了一个可以免费使用的场地、一笔在当时看来不菲的启动资金与一些项目的合作机会；9 月就成立了公司，甚至为了省钱连注册公司与财务都自己去学习和尝试（最后注销公司的时候差点因为一些税务申报不规范问题而翻车），接下来就是几周的工作室设备购置与布置；10 月就正式招人和录制了第一门课程。</p>
<p>即使站在现在的角度也很难想象当初是抱着怎样的想法与热情在做这件事，市场推广、打光、拍摄、剪辑、后期、包装和各种繁琐的商业宣讲与谈判，为了节约成本前期都是自己一个人去做，后面才慢慢也带出了几位得意的“实习生”。已经记不清在那个因为要隔音而密不透风的录影棚中通宵过多少个夜晚，宜家沙发床的质感也成为了那段时间无法磨灭的记忆点。</p>
<p>经过了一年的探索，一切似乎慢慢有了起色，工作室也初具规模，但临近毕业时候的自己却很难真正将做视频这件事当作自己的事业，有些任性地还是选择了自己去申请计算机的研究生，于是一边做着一些远程工作维持 gap year 的生计，偶尔往返武汉完成录制项目，同时准备着雅思与申请文书，其实当时自己已经意识到了可能并没有打算再把这件事坚持做下去，只是不愿意就这样放弃自己的心血。</p>
<p>这样的纠结其实并没有持续太久，疫情来了，Base 在武汉且高度依赖线下业务的工作室自然陷入了停滞，而随着我赴香港读研，挤出来的时间也只够自己远程完成一些业务的收尾工作，于是在 21 年的 5 月也正式注销了公司。其实在收到最终的注销确认单时，算不上遗憾，在自己力所能及的领域做了一些尝试，为自己的大学生涯涂抹上了几分色彩。结束得也还算体面，将最后的一笔业务收益（尽管不多）全分给了参与投资的老师和依然在帮我完成许多善后工作的工作室成员，为自己的创业画上了一个还算圆满的休止符。</p>
<p>尽管都是自己主动的选择，依然残留着几分难过，在后面很多次的总结中也仅仅是轻描淡写地提及一下，似乎是在害怕过了这个阶段的自己就没办法捡起这样的勇气去做这些事，那再提“当年勇”也失去了意义。比起纠结于结果的成败，我依然觉得那段时光在积极地影响着我的工作与生活态度，尽管领域和内容天差地别，但坚持做好一件事的信念、解决问题的方法论、多线程处理各种事的冷静以及太多太多的品质似乎都是那时候所留下的，我也很庆幸现在的自己依然能够追随本心去尝试一些东西。</p>
<h2 id="捏捏与被治愈的生活">『捏捏』与被治愈的生活</h2>
<p>其实还没有正式取名字，总觉得是一件需要非常郑重去决定的事，一直还没有思绪。但最近也有了一个小名叫“捏捏”，一个可爱的拟声词，后面大概每篇周报都会有一些日常记录吧，周末也开始整理一下相机，开始记录一些成长，没准能成为一个 vlog 或萌宠博主呢（？在做梦），不过也确实因为在 B 站看到的 <a href="https://space.bilibili.com/58078997">polebug</a> 的视频周记而燃起了视频记录的念头，总之想做的事还是挺多的，一点点开始吧。</p>
<p>这周跟一位朋友聊天时，突然被评价说好像我的生活也还挺治愈的。才突然意识到好像是很久没有被这么说过了，总是让自己沉溺在一些情绪中，或是通过一些内心或是外部的忙碌来填充自己的时间，但这两周有了捏捏的陪伴，似乎成为了晒娃狂魔和一个奶爸，似乎整个世界都变的明媚了起来，连带着我的生活。</p>
<p>可能因为太宠了，最近总是在我工作的时候来捣乱，也爱上了爬我的键盘和电脑，完全无心工作哈哈。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_01.jpeg"  />
    </div>
    
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_nie_nie_03.jpeg"  />
    </div>
    
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>我的职业是小说家</strong>，正在读，村上真的是一个很独特的作家，太喜欢他的笔触与表达方式了。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>硅谷</strong>，重温第三遍，第一次看是在高中，觉得很酷但作为文科生的自己也没 get 太多；第二次是在大学毕业后，即将去读 CS，对其中的很多梗和这群 tech guys 的热情也更加向往；最近看完了第三遍，自己也终于如愿成为了 tech guy，尤其是后面很多区块链与去中心网络相关的，又有了奇妙的链接与共鸣，算是和《社交网络》一样对我影响挺大的一部作品了。不知道下一次重温的自己会是在做什么呢？</li>
<li><strong>她和她的她</strong>，被题材和宣传片所吸引，没办法去很自大地说自己能够对女性所面临的这些困境感同身受，但还是有很多共情的点，上周刚经受了《房思琪的初恋乐园》所残留的一些情绪波动，又看了这部，有些失语。整体节奏还不错，但依然还是觉得结局似乎有些太过于理想化和口号式，现实残酷的多。</li>
<li><strong>边缘世界</strong>，正在追。</li>
</ul>
]]></content:encoded></item><item><title>周报 #18 - 陪伴与另一种生活</title><link>https://www.pseudoyu.com/en/2022/11/08/weekly_review_20221108/</link><pubDate>Tue, 08 Nov 2022 13:04:41 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/11/08/weekly_review_20221108/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-11-01 到 2022-11-08 这周生活的记录与思考。 这周是和猫相处的第一周，因为双十一买了很多猫的各种设施和吃的，快递很多，大概有</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1108_photo.png" alt="weekly_review_1108_photo"></p>
<p>本篇是对 <code>2022-11-01</code> 到 <code>2022-11-08</code> 这周生活的记录与思考。</p>
<p>这周是和猫相处的第一周，因为双十一买了很多猫的各种设施和吃的，快递很多，大概有一半多的时间是在居家办公收快递，所以也能有更多的相处时间，太乖了；周末带去体检了，整体还算健康，眼睛和肠胃有一些令人忧心的指标问题，开药进行了一些治疗，下周再去复查。</p>
<p>工作上这周进展不错，两个项目并行且都有了一些进展，写了一个合约并上生产环境使用了，并且针对一些常用的日常活动写了一些实用脚本，减少了很多重复性的繁琐工作，还挺开心的。</p>
<h2 id="陪伴">陪伴</h2>
<p>这是与猫度过的完整的第一周，因为也很不放心在家时候的状态，所以一半时间居家在家了，在公司上班的时候也时长开着摄像头观察一举一动（虽然大部分时间都是趴在椅子上睡觉的非静止画面，依然能盯着看很久），有一种莫名的牵挂。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cute_cat_1.jpeg" alt="Cat On Bed" />
    </div>
    
      <figcaption>
          <p>Cat On Bed
              
          </p>
      </figcaption>
  </figure>
</div>

<p>常常以为自己是很能独处的一个人，并不需要太多陪伴，探索一些有趣的东西、或是看看电影书籍似乎已经足够填满我的大部分闲暇时光。但渐渐地发现其实自己是属于一个情绪隔绝的状态，低落和消沉的情绪逐步积累，却也不会影响我的正常生活工作，而从日常或是工作中获取的愉悦感也无法反向去消减我的负面。长此以往，有时甚至我自己都能够清晰地触摸到我的情绪值。</p>
<p>而这一周和猫的共处中，我能够感受到自己有在依赖这种感觉，一边开着会议一边抱着猫，或者看着她在旁边玩耍，时间流动得缓慢而美好，慢慢地才意识到这种感觉多么久违。</p>
<p>人和猫的羁绊真的很神奇，语言不通，情绪也很难共感，却似乎有一种隐隐的默契，一个将自己的被需要感寄托，一个静静地陪伴着。后面也慢慢打算捡起相机多拍摄一些自己的生活与猫的日常，似乎每天也都能有所期待了。</p>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cute_cat_2.jpeg" alt="Cat With Me" />
    </div>
    
      <figcaption>
          <p>Cat With Me
              
          </p>
      </figcaption>
  </figure>
</div>

<h2 id="另一种生活">另一种生活</h2>
<p>这周和之前在香港结识，并且现在同样北漂的学姐吃了饭，一年可能也就会约三四次饭，每次却都有挺不一样的体会，大概是每次都能从中获取自己对另一种生活方式的想象与期待。</p>
<p>大概从经历和性格上来说完全是两个不一样的人，我有自己专注的东西，似乎工作内容本身和沿着这个方向领域的许多事宜都是我所享受其中的，可以说是某种程度上的幸运，却也常常有些好奇如果没有走这条路，自己的生活又会是什么模样。</p>
<p>自己大概原本是一个所谓的挺“斜杠青年”的人，常常去学习体验一些全新的东西，有时候是享受于学会一项新东西的愉悦，有时候仅仅是沉浸于在学东西的过程。后来陷入了挺深的迷茫，纠结于“知识和体验是要更加追求深度还是广度”，最后还是选择了一个更专精的领域，同时，某种程度上来说也放弃了其他的可能性。</p>
<p>而学姐则是一个可以把自己的事做好，却也很能把自己的工作与自我追求分离的人，会在周末和闲暇的时候去攀岩、跳舞、游泳、冲浪、打拳，以及最重要的画画，在自己的各种兴趣爱好中尽情探索，不在意那么多得失，也不去纠结那么多意义，只是享受过程，同时享受着自我的补全。</p>
<p>而明明处于事业和个人发展都令人羡慕的阶段，却充满着热情跟我讲着在计划明年 gap 一年去美院参加一年全日制项目学画画，也不为了什么转型或是方向调整，只是喜欢。一时竟分不出自己是在羡慕能为了这样仅仅是“喜欢”的追求而能够做到这种程度还是能够找到这样的喜欢。</p>
<p>也许自己也在一些阶段做出了一些转变，不论是学业还是工作的方向，似乎也需要一些所谓的勇气，但内心深知自己已经平衡了其中的成本与得失，自己似乎已经好久好久没有为自己的内心追求与纯粹的喜欢去做一些事了。学姐所在体验与践行的就是曾经的我所向往的另一种生活，也让我看到了另一种生活的可能性。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<p>收到了一位读者 seyee 的评论：</p>
<blockquote>
<p>好奇一下这些书你都会读完嘛（没有质疑的意思，只是作为社畜觉得一周读这么多书好厉害）</p>
</blockquote>
<p>其实当然是不可能一周读那么多的书哈哈，只是我有并行读书的习惯，尤其是一些非小说类的书籍我可能会每天读部分章节，也根据时段和心情不同选择读不同的书，平均下来一本完整的书读完会在 2 周左右，但是遇到感兴趣的剧情类的可能一下午或者一晚上就会读完，或是两三个通勤时段，列举出来的大多是刚好在这周读完或是有读部分篇章的书。</p>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/reading_book_yizang.jpeg" alt="Reading Book" />
    </div>
    
      <figcaption>
          <p>Reading Book
              
          </p>
      </figcaption>
  </figure>
</div>

<p>对于读书这件事从并不想以量或是产出作为自己的压力或是限制，而是更多作为自己的一种输入渠道和某种程度上的放松手段（当然在之前读《房思琪的初恋乐园》的时候也会 emo 好几天），尽量会达到一种情绪平衡吧。也是因为来自工作和多个方面的压力才寄托在书籍、电影这些媒介上，更像自己的一方净土吧。</p>
<ul>
<li><strong>我的职业是小说家</strong>，正在读。</li>
<li><strong>常识</strong>，正在读。</li>
<li><strong>自学大全</strong>，其实自己好像不算很喜欢像是《如何阅读一本书》这类的偏工具技巧类书籍，但确实有挺多经验可取的地方，这本书最近也比较火，刚开始看看，希望能有些方法上的参照。</li>
<li><strong>what if，那些古怪又让人忧心的问题</strong>，发现是那个火柴人的作者，真的讲了好多我小时候一些很好奇的疑问。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>Hacking Google</strong>，意外地节奏感很不错，虽然没有深入技术细节，但有把安全链条中的各个环节很清晰地呈现出来，很向往。</li>
<li><strong>边缘世界</strong>，正在追，但是感觉从第三集开始有些节奏一般，不过应该还是会追完。</li>
</ul>
]]></content:encoded></item><item><title>周报 #17 - 他和他的猫</title><link>https://www.pseudoyu.com/en/2022/10/31/weekly_review_20221031/</link><pubDate>Mon, 31 Oct 2022 10:46:08 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/10/31/weekly_review_20221031/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-10-28 到 2022-10-31 这周生活的记录与思考。 因为上一篇周报很晚才更新，所以这期在时间跨度上显得尤为短暂，但却也因生活中迎来</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1031_photo.png" alt="weekly_review_1031_photo"></p>
<p>本篇是对 <code>2022-10-28</code> 到 <code>2022-10-31</code> 这周生活的记录与思考。</p>
<p>因为上一篇周报很晚才更新，所以这期在时间跨度上显得尤为短暂，但却也因生活中迎来的一个重大改变而别具意义。</p>
<p>经过了周五到周日三天的猫舍之旅与纠结，我把一只很合眼缘的银点（银渐层重点色？才发现原来也分那么多品类）小猫（名字还没决定）带回了家，重新过上了与猫的生活。</p>
<h2 id="他和他的猫">他和他的猫</h2>
<p>这个标题源于一部动漫《她和她的猫》，其中有这样一句话印象很深：</p>
<blockquote>
<p>我一直寻找着她的踪迹，我寻找她的理由，正是因为她同样也在寻找我。 —— 《她和她的猫》</p>
</blockquote>
<p>一直很喜欢猫，在遥远的 16 年的一家咖啡厅看到店主的可爱布偶时也动过想拥有一只的念头，但似乎在上段恋爱之前，自己从未真正认真思考过养猫这件事，或者说与猫为伴的生活。可能对于猫的热情与耐心是有的，但总是觉得自己并没有做好为一个新的生活伙伴负责的准备，自己的生活也常常是一团糟，又怎么敢去自以为是地负责 ta 的一生呢？之前见到过这样一句话，朴素却让人有些心痛。</p>
<blockquote>
<p>猫可能只是你这一生中的一小部分，而你却是它一生中的全部。</p>
</blockquote>
<p>在来北京生活工作稳定之后，“养猫”这件事似乎发生得自然而然，花了一个周末，去了几家猫舍，很快决定了很合眼缘的小薯，像是初为父母一样对于这个新伙伴的一切好奇而又紧张。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pity_and_ideas_in_hk.png" alt="pity_and_ideas_in_hk"></p>
<p>日子一天天地过去，似乎这已经是平淡的日常，但其实并没有那么理所应当。过去也曾有过这样的视日常为习惯的阶段，当似乎认为已经自己和一切改变了的时候，才发现不过更多的是自我满足罢了。</p>
<p>也很惭愧地说，在之前似乎也不短的养猫生活中，自己更多是享受其中的角色，在忙碌疲累时有所期待，在痛苦消沉的时候有所陪伴，在欢欣喜悦时有所寄托。而对于照顾猫的很多细节，似乎自己并没有上心太多，甚至到现在也很难准确说出小薯最喜欢的猫粮和罐头的品牌，实在也算不上称职。</p>
<p>后来的事也自然而然地发生了，在之前的一篇『<a href="https://www.pseudoyu.com/en/2022/08/22/weekly_review_20220822/">周报 #08 - 职业杂谈、404 Not Found 与猫</a>』中也提到过：</p>
<blockquote>
<p>实话说和她一起之前自己并没有想过养猫，大概是觉得连自己都照顾不好的人又怎么有资格对另一个生灵负责，但当真正家里多了一个成员时也才渐渐发现自己享受于这种依赖与被依赖，似乎生活也多了很多目标。</p>
</blockquote>
<blockquote>
<p>她离开后，小薯一并被带走了，虽然常常也跟朋友无奈地玩笑说自己“人猫两空”了，但也心知自己之前的照顾确实不如她，这样的选择也无可厚非，只是每次忆及从前又多了一倍的难过。</p>
</blockquote>
<blockquote>
<p>昨晚看了『喵星人的奇思妙想』纪录片后也更多了解了之前忽略的很多猫的想法和相处细节，也隐隐萌生出是不是要自己再养一只猫的念头。只是这就像是对小薯的一种背叛，自己也依然没能做好这个心理准备去再次去好好对待一个新的成员，而在自己需要的时候迎接一个新的成员于人于己都很难说是一个负责任的选择。</p>
</blockquote>
<blockquote>
<p>也许未来某一天吧。</p>
</blockquote>
<p>提到的这“未来某一天”，到了。</p>
<blockquote>
<p>远处的事物看起来渺小又模糊，近处的东西却非常清晰，回忆也是同样，遥远的曾经非常模糊，方才发生的事能记得一清二楚，本应这样才对。但我最近总能清晰地回忆起往事。 —— 《她和她的猫》</p>
</blockquote>
<p>原本觉得这一天会很遥远，会需要到我能够真正接受过去的时候才能够做到，会需要到我能够真正能说出“let it go”的时候才能坦然面对。然而并非如此，越是想要遗忘，回忆就越是清晰。</p>
<p>经常能够收到“珍惜当下”的安慰或是祝愿，但其实这于我而言是一个很狡猾的词，过去的所有经历构成了现在的我，过去和当下同样值得珍惜，而自己也并不想因为想走出消极情绪而抛弃一个完整的自己。大概还是抱着这样的念头继续生活下去了。</p>
<p>心理上很难说是不是真正做好了准备，各种意义上的准备都是，思绪理不清。但是，觉得自己应该已经可以好好地再接受一个新的生活伙伴了，或者说，也需要这样一种互相陪伴的关系了，也在『<a href="https://www.pseudoyu.com/en/2022/10/09/weekly_review_20221009/">周报 #14 - 被搁置的生活与自我</a>』中提及了：</p>
<blockquote>
<p>10 月 10 日就是当时第一次接小薯回家的日子了，躺在沙发下几个小时用猫粮吸引着她出来的时光还历历在目，第一次到怀里的欣喜也难以忘怀，临近这个日子却也只会愈加难过。</p>
</blockquote>
<blockquote>
<p>养猫大概是一件需要倾注许多心力去做好的一件事，原本更多觉得是我们在照顾猫，给她一个优渥的生活环境，到现在才发现，原来是我需要她。大概会早些考虑再养一只猫吧，等能够返京后会去之前的猫舍看看，让自己的生活多少能够增加一些期待与温存。</p>
</blockquote>
<p>这个时候其实挺感激当时立下了写周报这个 flag 的自己的，把这些思绪与其背后的自我记录了下来，也许是因为这些文字，自己才能够从中找到一些问题的答案。</p>
<p>尽管想再养一只猫的心路历程已经持续了好久，但下定决心其实更像是一个一时之念。周五下班后去了预订好的离公司并不远的猫舍，原本想选一只与小薯相似的布偶，却被一只小小的银渐层所吸引，也许是因为她蓝蓝的晶莹的的眼睛，也许是因为一来就乖乖地趴在我的腿上，安静而温柔。</p>
<p>因为要出差的安排，一直很犹豫，想着也许要在 12 月底才能带回家，害怕错过重要的陪伴阶段，也害怕路途与环境的颠簸对她带来的不适，似乎一到这样的时候就开始考虑很多。</p>
<p>周末还是去了原定的昌平的猫舍去看布偶，因为路途遥远，路上翻起了村上的这本《我的职业是小说家》。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/life_about_cat_cunshang.jpeg" alt="life_about_cat_cunshang"></p>
<p>他讲到了这一段刚毕业时候的经历，突然很戳内心感受，大概自己已经很久没有泛起这种温暖而有所期待的感觉了，原来，我比自己想象得更加需要一个陪伴。</p>
<p>在打听清楚了跨省托运的规则，和公司也经过一些沟通交涉后，还是决定当下就领回家，重新过上了与猫的生活。其实很奇妙，明明似乎一切都没什么变化，但在回家途中的出租车上，自己跟司机有一搭没一搭地聊着天，时不时地看一眼航空箱里的猫，突然有一种生活又重新流动起来的感觉，窗外依旧是那个并不算熟悉的北京，内心却有了一些归属。</p>

<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cute_cat_01.jpeg" alt="My Cute Cat" />
    </div>
    
      <figcaption>
          <p>My Cute Cat
              
          </p>
      </figcaption>
  </figure>
</div>

<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>我的职业是小说家</strong>，正在读，村上的文字真的太有意思了，几分真实几分自嘲。</li>
<li><strong>计算机体系结构：量化研究方法（第 6 版）</strong>，正在读，有点难啃。</li>
<li><strong>Programming in Lua, Fourth Edition</strong>，看完了视频，通过书巩固一下。</li>
<li><strong>常识</strong>，正在读，果然在行程里没有一口气读完就拖到了现在。</li>
<li><strong>乌合之众</strong>，正好重温了下，印象最深的也是进入一个群体就很容易降智或是忽略自己行为中错误的部分，即使并不是直接加害者，也难免成为一个抱有“法不责众”的心态去释放恶意的帮凶。 有些部分还挺有参考性的吧，但个人色彩也很浓厚。对于恶意群体是否值得被拯救也是挺需要思考的。</li>
<li><strong>五种时间</strong>，小鹿的视频里提到这本书就好奇来看了一下，我算是对于时间管理、知识管理等等这些有所追求的那一类群体了，依然在这本书中没法获取什么有益的部分。理论讲解的部分过于经验谈，很难了解到获取这些经验背后的经历和思考逻辑，这一部分《被讨厌的勇气》中阿德勒的对话思辨方式会好得多；而方法论部分华丽的“花园模型”却也很难有所参照。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>静雪</strong>，看了第四集突然好难过，虽然是意料之中，但还是很心疼凑斗（可能代入感比较强）。</li>
<li><strong>边缘世界</strong>，正在追。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>她和她的猫</strong>，很短却又很戳感受的一部短片，因为周报的标题重温了一下，对于新养了一只猫的自己可能触动尤其明显。猫可能只是你这一生中的一小部分，而你却是它一生中的全部。养猫大概是一件需要倾注许多心力去做好的一件事，原本更多觉得是我们在照顾猫，给她一个优渥的生活环境，到现在才发现，原来是我需要她。</li>
</ul>
<h4 id="游戏">游戏</h4>
<ul>
<li><strong>女神异闻录 5 皇家版</strong>，期待了很久终于上了 Switch，但才玩了指引的部分，画风、配乐和玩法设计都很惊艳，有时候做别的事放着作背景音乐也是一种享受，不知道什么时候才能完整体验完。</li>
</ul>
]]></content:encoded></item><item><title>周报 #16 - 纯粹性学习</title><link>https://www.pseudoyu.com/en/2022/10/27/weekly_review_20221027/</link><pubDate>Thu, 27 Oct 2022 00:28:15 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/10/27/weekly_review_20221027/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-10-19 到 2022-10-27 这周生活的记录与思考。 这一周工作项目很忙，连续好几天都在加班，不过总算是完成了自己部分的需求。但是在</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1027_photo.png" alt="weekly_review_1027_photo"></p>
<p>本篇是对 <code>2022-10-19</code> 到 <code>2022-10-27</code> 这周生活的记录与思考。</p>
<p>这一周工作项目很忙，连续好几天都在加班，不过总算是完成了自己部分的需求。但是在闲隙时间里，倒是把几个之前一直想学的语言的入门教程看了，很有意思。然后公司安排作了一次技术分享，讲智能合约这一块，还是好好做了 ppt，不得不说 Apple 的 Keynote 真好用，神奇移动和一些内置的动画效果都很顺滑。</p>
<p>又折腾了好几个小网站和系统，自己的 starter page 也越来越丰富啦。其他就是因为一些个人的规划问题，打算把之前的一些项目和文章做一下双语版本了，后面可能除了周报外其他的技术文章也会先写英文再翻译一版中文（或者反过来？），感觉压力很大，不过还是要坚持下去。</p>
<h2 id="纯粹性学习">纯粹性学习</h2>
<p>这周沉迷学了好多新技术，把一直有些好奇的 Lua 基础语法看了，感觉能用来写点脚本和小游戏；C++ 进行了一些入门学习，这个主要想深入一些语言的机制，这次学反而更加能体会到一些语言设计的精巧；Rust 也把基础语法又巩固了一下，算是第二次冲击入门了；因为要写一些 DApp，React 和 TypeScript 也在进行中。</p>
<p>继续在读那几本很难啃的书，像是《深入理解计算机系统（CSAPP）》和新出的《计算机体系结构：量化研究方法（第六版）》进展都有点缓慢，但是慢慢来吧。</p>
<p>其实学这些倒也没有那么强的目的性，大部分在工作中也不会马上用到（这也是时常觉得工作有时候有些无趣的主要原因），可能没有很多实际应用的话也会常常忘记，但是本身学习过程就很有意思。慢慢还挺喜欢 Crash Course 这种形式，几个小时揭开了一些神秘名词的面纱，或是掌握一些奇奇怪怪的技能，能感受到一种很纯粹的学习乐趣。</p>
<p>这个好像是一直以来的习惯，大学时候就鼓捣着学习好几种新的外语（当然，学了一阵子后就放弃了，德语作为二外算是入门了吧，但不知道什么时候才能捡起来，有点后悔没好好学），以及把 Adobe 全家桶都学一遍（好多确实有点鸡肋，但有用的确实学得差不多了）。比起一项技能或是一类知识能够给自己带来的实际益处，似乎探索带来的动力更为重要。</p>
<p>目前也很想能做出一些有意思的东西，希望能一直从自己做的事中找到乐趣吧。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="twitter-统计系统">Twitter 统计系统</h3>
<p>跟着推友<a href="https://twitter.com/disksing">象牙山刘能</a>的『<a href="https://github.com/disksing/twiyou">twiyou</a>』项目搭建了自己的统计系统，很有意思。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_twitter_monitor.png" alt="yu_twitter_monitor"></p>
<h3 id="博客系统">博客系统</h3>
<p>之前虽然也经常魔改一些主题设置，还给我用的 hugo 主题提过 pr，但其实一直没深入研究过 hugo 的模板系统，这几天好好研究了一下，打算写一些 shortcode 来供使用，还是挺强大的。</p>
<p>文章的部分闲置了好久，其实都在 Logseq 中有记录，但是一直没细致整理，后面有些不一定很成文的可能就放在 Notes 模块了，持续更新下。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>乌合之众</strong>，正在重温。</li>
<li><strong>Programming in Lua, Fourth Edition</strong>，学了一点 Lua，感觉是个很有意思的语言。</li>
<li><strong>计算机体系结构：量化研究方法（第 6 版）</strong></li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>溺水小刀</strong>，画面还不错，有几个经典场景常有在混剪中看到，但是剧情和节奏还是挺平庸的。全程也就是在欣赏音乐了，歌单添加了好几首，很适合做视频的 bgm。</li>
<li><strong>罗马</strong>，节奏和画面都无比缓慢的一部电影，像是一部个人的回忆录，在当时的环境下又有一些微妙的隐喻，也正如在时代下无从适从的当下的我们。</li>
<li><strong>瞬息全宇宙</strong>，前几个月火到不行，今晚一边补周报一边看了，很失望，有点不明所以，情绪转折和反转都很莫名，有种想表达的太多，也立意太高，反而撑不起内核的感觉。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>串流先锋</strong>，故事总是相似，虽然在心目中还远比不上《社交网络》，但作为一个互联网创业故事很难得地没有仅仅专注于程序员，很新颖。崇拜 The Coder 中的科技宅们但是最喜欢的还是 Martin，毫无拘束，商业和现实世界不仅仅只是二进制，需要有人来为其理想主义而背负代价。另外，The Lawyer 中的许多转场画面很惊艳。</li>
<li><strong>龙之家族</strong>，我本身也不算权游的爱好者吧，当时看到第五还是第六季听说烂尾了就没追了，书倒是看了大半。前几个月比较热门所以追了，前几集几度想要弃坑，零碎着看完了，感觉这么宏大的世界观可能还是书更适合铺垫，剧集总有一些断续感。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>朝花夕誓</strong>，也是被朋友推荐，略带些奇幻的不老一族的设定。宏大的世界观下却只是从时间流逝与缘起缘尽的人情讲述整个故事，有一种不一样的视角。</li>
<li><strong>万神殿</strong>，同事说这部动漫有并行计算，资源池、死锁、互斥锁，于是好奇来看看。前几集很有意思，临近结尾有些抽象，看得很累，可能也是因为在午休闲隙看的没能细细琢磨，但总体还是很值得一看的。</li>
</ul>
]]></content:encoded></item><item><title>周报 #15 - 内观与外求</title><link>https://www.pseudoyu.com/en/2022/10/18/weekly_review_20221018/</link><pubDate>Tue, 18 Oct 2022 17:38:39 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/10/18/weekly_review_20221018/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-10-10 到 2022-10-18 这周生活的记录与思考。 因为疫情的缘故一直在杭州居家，天气日渐转凉，没带太多衣服，所以在健康宝状态正常</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1018_photo.png" alt="weekly_review_1018_photo"></p>
<p>本篇是对 <code>2022-10-10</code> 到 <code>2022-10-18</code> 这周生活的记录与思考。</p>
<p>因为疫情的缘故一直在杭州居家，天气日渐转凉，没带太多衣服，所以在健康宝状态正常之后马上买了回来的票，周五就回了北京。短短半个月时间家里就有些一团糟，周末两天几乎都在大扫除和整理。</p>
<p>两个项目陆续开始有些重叠，在家的工作效率不算太高，也很久没有好好学点东西了，整理了下学习计划与日程安排。</p>
<p>不错的是自己终于坚持了几天晨跑，看到了久违的杭州的风景，不过也明显感觉到自己体能有所下降，临近秋冬了可能多做一些室内的运动吧。</p>
<h2 id="记一次印象深刻的交流">记一次印象深刻的交流</h2>
<p>本科时候在社团结识并一直师徒相称的一个朋友完成了第一部小说，也开始做自己的 B 站荐书的帐号，有一种很因缘际会的感觉。记得很遥远之前谈论过要写这样的一部作品，就像一棵幼芽一样藏在记忆中，而到了现在渐渐有了第一个发芽的种子，而自己作为这样的见证者，也由衷地开心。倒是作为师父，自己一直想做的一些事（比如 B 站帐号）反而持续搁置，也该加油了。</p>
<p>自己其实一直很珍惜这种能够不基于日常的交流模式，尽管好像已经有近两年没什么联系，却依旧发现了很多想法和特质上相像的点。这就像是一种磁场或是默契，基于个性特征的契合而不是日常或是某些其他的目的性的交流也更容易保持恒久，似乎只需要想到些什么，一句“对了，我突然想到&hellip;”或是相隔几个月毫无铺垫的一句“约个电话？”就已经足够打开话匣，是一种很令人惬意的关系模式。</p>
<h3 id="性别与交流">性别与交流</h3>
<p>起初聊到了关于性别与交流的问题，提到说好像当前比较普遍的男生比较难去完完全全静下心去看女生产出的内容，就好像总是对照片、工作情感状况尤其敏感，而常常忽略一些观点性的输出，就好像性别隔离了平等交流。</p>
<p>这是一个挺有意思的现象，似乎天然存在于异性之间的关系中，且由于心思细腻程度的一些天然差异，男性也更容易成为无视女性观点性表达的一方。诚然，自己也不是什么高尚的人，无法免俗地因外表或是称之为魅力的因素影响一些起初印象的判断，但一旦进入朋友的范畴，会更倾向忽略这些来追求更为真实与平等的交流，而尤其随着自己逐渐不再依赖于社交，也对这样仍可以交流的机会倍感珍惜，而这样的真诚也往往能有同样的回应。</p>
<h3 id="创作与分享欲">创作与分享欲</h3>
<p>还聊到了创作与分享的一些关系。其实某种程度上来说我的博客与朋友的书都是一种创作，同样也是我们分享欲的载体。</p>
<p>写东西、产出内容、表达想法，或是把之前埋下的想法一点点实现，是分享欲的一种表现，但并不是那种告诉别人自己在写一些似乎很厉害的东西这样的虚荣心作祟，而是希望真诚表达，或是自己付诸心血完成的作品能被认真对待，或者是得到一些反馈。</p>
<p>朋友的一句比喻很贴切，这就像是对着山谷发声，希望能听到回音。</p>
<h3 id="内观与外求">内观与外求</h3>
<p>印象比较深的是提到了“内观与外求”这个概念。我们作为人的关注点往往都分为内在与外在两个方面，相较而言，对外的关注点由于更具刺激性与正反馈而占了绝大部分，而对内在的关注则往往容易被忽略。</p>
<p>似乎从某个阶段起，开始有些害怕和警惕自己的变化，担心有一天再也看不进书和电影，或是看完后想法空空，这是一件多么难以想象和接受的事呀；与此同时，似乎又有些担心自己停止变化，那又会错过多少有趣的人生阶段呢？</p>
<p>细想了一下，自己其实是在害怕不再具备内观的能力，外求似乎总能有一些答案，而内观则没有终点。如果失去了自己的内核，失去了对自我的好奇与探索的动力，是最值得恐惧和难以忍受的事。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>毛姆读书随笔</strong>，补标，几年前最初读到，后面陆续又看了好几遍，可以说是重新燃起了我对文学经典的热情。</li>
<li><strong>常识</strong>，道长的时评政论，不得不说那么多年前的一些政治看法在现在的中国环境下看，有一些很有意思的点。</li>
<li><strong>乌合之众</strong>，也是大一的时候看过，路途上重温，挺不一样的，尤其是能够感觉到个体特质渐渐在被抹去的当下。</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>坠落</strong>，看得全程很都很精神紧绷，也还是挺不一样的观感，大概上一次有这种感觉还是《云中行走》了。平时自己虽然并不怕过山车这样的活动但也不会刻意去追求刺激感，大概也比较难理解这种体验，倒是有点好奇，最近有在思考去徒步，也许之后可以去试试蹦极和跳伞。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>终极名单/The Terminal List</strong>，第一集的铺垫看着有点累和压抑，后面节奏感很紧凑，PTSD 与复仇元素也算是剧集常客了，但依然有不少惊喜感，查了一下原来也是 poi 的导演，熟悉的感觉。</li>
<li><strong>石子和羽男-这种事情也好告吗？</strong>，因为有村架纯的一个表情包看的这部剧，风格不错但是剧情和案子也就这样吧，可能原本定位更偏向社会现状影射和教育意义。另外怎么感觉最近律政题材的不错的新剧也越来越多了。</li>
<li><strong>甄嬛传</strong>，周末居家的时候补了，以前一直因为题材不太感兴趣，古装里面一直也都喜欢《琅琊榜》，不过追完后倒是发现了很多不一样的吸引点了，当时的剧集节奏和演技都还是挺绝的。</li>
<li><strong>静雪</strong>，在追的一部新日剧，很美。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>狼的孩子雨和雪</strong>，晚上突然翻起豆瓣想看的列表，偶然看见这部从高中时候就码了的动漫电影，就打开看完了。很喜欢的画风，尤其是自然景观的部分很细致，剧情上虽然结局算是不错但依然有点致郁，人物的性格都好喜欢。</li>
<li><strong>电锯人</strong>，高中时好像很有名，但是我当时没看过动漫，补一下番，看了第一集还蛮不错的。</li>
<li><strong>万神殿</strong>，听同事说看这个番还得了解死锁、互斥锁和并行计算什么的，有点兴趣，就追了一下，感觉设定也挺有意思的。</li>
</ul>
<h4 id="游戏">游戏</h4>
<ul>
<li><strong>火焰纹章：烈火之剑</strong>，打了一半多了，有点累了，比较费脑，等下一波时间空一点打完。</li>
</ul>
]]></content:encoded></item><item><title>周报 #14 - 被搁置的生活与自我</title><link>https://www.pseudoyu.com/en/2022/10/09/weekly_review_20221009/</link><pubDate>Sun, 09 Oct 2022 09:51:31 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/10/09/weekly_review_20221009/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-09-27 到 2022-10-09 这周生活的记录与思考。 这是一篇跨度很长的周报了，缘由是我自 9.29 日早晨就提前调休回了杭州，接着国庆假期，</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_1009_photo.png" alt="weekly_review_1009_photo"></p>
<p>本篇是对 <code>2022-09-27</code> 到 <code>2022-10-09</code> 这周生活的记录与思考。</p>
<p>这是一篇跨度很长的周报了，缘由是我自 9.29 日早晨就提前调休回了杭州，接着国庆假期，又凑了个小长假，那一周主要也是加班与回家的行程，便干脆合并为一篇了。</p>
<p>继续忙于手头项目的上线，且由于节前的调休而有些匆忙，尽管假期还有很多需要加班调整的，但总算功能是完成了。因此在家的一周多也算是有些放松，陪伴了家人、见了一些朋友、换了个发色（蓝灰色），也重新整理了自己被搁置的生活。</p>
<h2 id="被搁置的生活与自我">被搁置的生活与自我</h2>
<p>距离年中的生活变动已经过了接近半年，我一直以为自己在经历着无可避免地遗忘，但最近愈来愈频繁的梦境像是嘲弄般地提醒着我，不过是被搁置了而已，从未真正过去。</p>
<p>自己之前一直不怎么做梦，虽然算不上无忧无虑，但还算积极的品性也使得烦恼确实并没有在显著影响着我的生活。然而最近总是有一些真实记忆和情景通过梦境的方式重现，真实到每天早上都有些茫然，需要花越来越久的时间来排解这些低落情绪，或是任由它们滋生并蔓延到我生活的角落里。</p>
<p>细数一下过去的半年自己似乎并算不上一蹶不振，工作还算完成得不错，重新捡起的博客得到了一些认可并且有了还算可观的访问量；周报虽然常有摸鱼的时候，但也还算坚持下来了；作为分享欲出口的推特帐户也积攒了一些粉丝，算是一个小小的技术+日常博主，自己碎碎念的频道也慢慢充盈着丰富的内容。同时，我也看了很多之前 Mark 的书、电影、动漫和剧集，可能思想算不上有什么变化但有在培养思考的习惯。</p>
<p>似乎一切都有着不错的态势，但总是隐隐觉得缺少了一些什么。</p>
<p>我似乎总是自我保护式地避免让自己陷入极度糟糕的状态，在某些方面低落消沉时便会强迫式地将精力投入其他，像是在寻求某些方面的平衡与体面，就像是从一个客观视角审视自己的生活，过于冷静地填补着生活的空缺之处，而生活本身的意义则是被搁置了，似乎失去了其重要性与意义。</p>
<p>几年前写过一篇《<a href="https://www.pseudoyu.com/en/2020/06/06/yearly_review_23/">23 岁的自白：去追寻意义</a>》，也算是这个博客颇具意义的开篇之作。回看当时的文字，尽管在一些略带自以为是的心得体悟陈述后最终也没得出什么太深刻的道理，但多少还是有些追寻自我的傲气与建构自我的决心。</p>
<p>然而现在的自己似乎把自我这件事随着生活意义的缺失而一同搁置了，似乎只要能让自己不闲下来，一切都好，周报算是一种自省的渠道，却也只能解决当下的状态与心情而难以触及自我的深处。</p>
<p>能看到明显的颓势却无力去弥补，这种无力感并不是主观的自我麻痹与纵容，而是一种如在大海中溺水般的窒息与绝望，无法自救，更难以指望他人，看不见灯塔，只能依靠着偶然出现的浮木苟活。并不想总是留下一些消极的文字，但在这个假期却放任自己被情绪的漩涡所吞噬，几乎感受不到时间的流逝。</p>
<p>10 月 10 日就是当时第一次接小薯回家的日子了，躺在沙发下几个小时用猫粮吸引着她出来的时光还历历在目，第一次到怀里的欣喜也难以忘怀，临近这个日子却也只会愈加难过。</p>
<p>养猫大概是一件需要倾注许多心力去做好的一件事，原本更多觉得是我们在照顾猫，给她一个优渥的生活环境，到现在才发现，原来是我需要她。大概会早些考虑再养一只猫吧，等能够返京后会去之前的猫舍看看，让自己的生活多少能够增加一些期待与温存。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="设备">设备</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/rg351v_game_console.jpeg" alt="rg351v_game_console"></p>
<p>每隔一两年就会用手机模拟器重温一下经典 GBA 游戏，但虚拟按键玩起来总差点小时候的那种感觉。从
<a href="https://twitter.com/Ehco1996">@Ehco1996</a> get 新玩具，解锁了开源掌机新世界！</p>
<p>火速重温宝可梦和火焰纹章系列（虽然已经通关好多遍了），快乐！</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>送你一颗子弹</strong>，是我近两年看得最享受的一本书了，因为是杂文札记，通勤时看上几篇不至于有断续感。可太喜欢刘瑜的讲话风格了，生活随笔掺杂着一些政治、文化思考，好几次在地铁上快笑出声，原来文字可以把一个人怎样生活和其世界的面貌展现得如此具体而真实。另外这种文字中的真实和对自己的戏谑也是我所向往的状态，希望多年后看自己的文字也能或多或少有这样的惊喜感。</li>
<li><strong>悉达多</strong>，很短的一本小书，两个小时的航程途中看完的，可能因为物理上隔绝了外部干扰，莫名宁静。讲述的是印度宗教哲学，是一种对人的自我纯净与宁静部分的追寻。听一位朋友讲说有过觉得一切都无意义的阶段，封闭且痛苦，自己也常有，就突然想到了悉达多。一个完整的人需要经历悉达多的一生，从反抗世间的一切、拒绝庸碌，到克己、压制欲望、自我逃避与安慰，再到开始认识、学习并推翻自己，自我矛盾，最后到依然遵循自我，却能够理解与同情世人和他们的生活方式。于我而言最深刻的点就是从一个完整的一生的维度告诫了自己人生无法通过遵循规律或是模仿、追随他人来找到自我，只有不断思考与找寻才能真正理解自己与生活，并不是说一定所有事都需要亲历，只是至少更应该探究与体验而非索取。强烈推荐看 B 站宝藏 up “天真的和感伤的小说家”的评析视频。</li>
<li><strong>小于一</strong>，回家整理书架发现几年前读过，但记忆已经有些模糊了，补标一下，之后有空重读一下。当时真爱纸质书啊。</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>子弹列车</strong>，有点《两杆大烟枪》的即视感，镜头切换和霓虹灯旁白设定还挺印象深刻，可惜最后收尾和背景解释有些仓促。</li>
<li><strong>海边的曼彻斯特</strong>，可能并不是一部适合在我本身情绪低迷时候看的电影，还是静静看完了。悔恨、感情、亲情、一个人的孤独感，称不上感同身受但有在好好体会。</li>
<li><strong>新·奥特曼</strong>，没想到现在还能看一部奥特曼电影，还是熟悉的感觉。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>终极名单/The Terminal List</strong>，看到推荐，刚看了个开头。</li>
<li><strong>石子和羽男-这种事情也好告吗？</strong>，已经完结了，但一直还看完，前段时间看到竹棘的剪辑，于是想着把后面的部分看了。</li>
<li><strong>龙之家族 第一季</strong>，看到中间了觉得倒是还行，想着干脆追完吧。</li>
<li><strong>瑞克和莫蒂 第六季</strong>，可能因为前几季连着看完有些匆忙，追这一季慢慢看能发现更多细节。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，陪我度过了这半年，设定、节奏和剧情都很舒服，结局我圆满了，果然谁不爱甜甜的恋爱呢。</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，抛去设定，中后期更像恋爱日常番，倒是也有点甜。</li>
</ul>
<h4 id="游戏">游戏</h4>
<ul>
<li><strong>火焰纹章：烈火之剑</strong>，最近闲鱼收了一个开源掌机，可以静下心补一下之前心心念的火焰纹章系列，当时太小，没能太体会战棋策略类的乐趣，也算是有些遗憾。</li>
</ul>
]]></content:encoded></item><item><title>周报 #13 - 忙里偷闲的乐趣</title><link>https://www.pseudoyu.com/en/2022/09/26/weekly_review_20220926/</link><pubDate>Mon, 26 Sep 2022 23:19:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/26/weekly_review_20220926/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-09-19 到 2022-09-26 这周生活的记录与思考。 这一周异常忙碌，有好几天都很晚才到家，但是神奇的是倒是只有在这样的时候才似乎更</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0926_photo.png" alt="weekly_review_0926_photo"></p>
<p>本篇是对 <code>2022-09-19</code> 到 <code>2022-09-26</code> 这周生活的记录与思考。</p>
<p>这一周异常忙碌，有好几天都很晚才到家，但是神奇的是倒是只有在这样的时候才似乎更有动力做更多，看完了一本书，补了好多电影和剧集，还完成了不少大大小小的事，其余倒是没有太多事发生，以至于周报都有些拖沓。</p>
<h2 id="忙里偷闲的乐趣">忙里偷闲的乐趣</h2>
<p>今天刷推时偶尔看到<a href="https://twitter.com/disksing">象牙山刘能</a>和<a href="https://twitter.com/cloudwu">云风</a>的一段对话，觉得很有意思：</p>
<blockquote>
<p><strong>象牙山刘能</strong>：平时上班干活的时候总想着做 side project，真到了周末只想打游戏看剧&hellip;</p>
<p><strong>云风</strong>：不如上班永远做 side project ，周末工作。这样就不会打游戏看剧了，因为周末再不做，就真的什么工作都没做了。这样做还有一个好处：如果你的工作和同事是相互依赖的，那么这样没有并行，所以永远不会产生冲突。你还可以充分考虑产品多变的需求后才开始动手。</p>
<p><strong>网友</strong>：这个想法的侧面是，工作两天就能做完</p>
<p><strong>云风</strong>：一个长期工程的实际有效工作量远小于 2/5 吧。如果实在做不完，可以适当延长周末工作时间。另外，每周有长达五天时间去自习估算这个工作量，一般不会错了。所以，这个方法实质上指：多想少做。</p>
<p><strong>象牙山刘能</strong>：多想少做这点确实是的，经常拖得越久做起来就越顺利。不过只在周末做正经工作这个难度有点高，我还以为你在讲段子哈哈。而且应该很多人都不适合，比如说我如果工作都推到周末估计会因为压力太大直接摆烂😳</p>
<p><strong>云风</strong>：一半是段子 :) 不过我这些年不少关键工作的确是周末/法定假日做的。</p>
</blockquote>
<p>仔细回想，自己似乎总是有这样的倾向，大二备考专四和软考时，尽管复习时间已经十分紧张了，却好像拿这段时间来学了很多无关（但也不至于无用）的东西，能够感受到挤压出来的时间尤其珍贵，做什么事都有额外的乐趣。</p>
<p>在忙到爆炸争分夺秒时，常常会有这样的念头，“原来我这短短的一周能够完成那么多事，那等我考完/假期/闲下来，有了大把能够支配的时间，那一定能学完/做完 xxx”。但其实当那个节点真正来到时，反而开始“摆烂”了。</p>
<p>仔细想想自己的大部分额外的技能或是学习的东西都是“不务正业”时完成的，甚至在很久后的现在都还受益良多，而真正那些正经任务却经常是积累到 deadline 的最后时刻完成的，似乎也有不错的结果，这不禁让我困惑时间与效率之间的相关性以及心态对自己做一件事动力的影响。</p>
<p>每个人对于任务安排与时间管理的模式各不相同，我可能是个效率控，但绝对不是一个对于时间安排极度细致的人。某种程度上我享受于一种并不有序却又能恰好完成所有事的一种随意感，这让我觉得自己不是在被任务清单上一个个条目所奴役，而是在支配着自己的时间。作为这种模式产生的副作用，我常常会有不得不“力挽狂澜”的时候，久而久之倒是心态也变得更稳了，或者说对于自己解决问题的能力有了一些衡量标准与累积的信心。</p>
<p>另外，惯性与乐趣也在其中扮演了重要角色。</p>
<p>这在五六月我被疫情封锁在家中，接近 50 天未出门的那一段经历中表现得尤其明显。那段时间因为自己的精神状态也并不好，一心投入了工作中，在很多会议或是任务项的间隙，却一直在学很多额外的部分，同时也重新开始写博客记录，似乎自己要在极其有限的时间里消耗完全部精力，而现在依然从那一段时间的很多积累、决定和培养的习惯中获益。而到了七八月项目结束略空闲的时期，尽管还是有在按照计划做一些事，却很难找到当时的沉浸感。</p>
<p>后来发现这取决于如何看待这些事，在工作忙碌时的学习或是放松是一种额外的状态出口，能够从繁重而重复的日常中脱离，当然也更容易感受到乐趣所在，而且这时并不需要太多状态调整或是筹备的前期步骤，依靠工作状态的惯性也更容易切换。而到了真正可以支配的自由时间时，我们却不得不将其看待为任务项，需要为其安排出时间并将自己从休息或是娱乐的状态中切换回来，成本更高，阻力也更多。</p>
<p>所以之后在工作日回家的可能并不那么完整的时间里，也会尽量安排一些 side project 或是学习的部分，而周末则希望更完整用来外出或是书籍、电影、剧集或是游戏这样的输入活动，更好将自己的状态作一些切分似乎也是不错的方式，会尝试探索一下。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>法治的细节</strong>，之前看过一些罗翔老师的视频，也读过他的一本《圆圈正义》，我觉得与其说“清醒”，我更觉得罗老师只是保持了对于一切的“敬畏”与“谦卑”，在此之上，尽管觉得自己永远做不到，无法画出一个完美的圆，但始终在追寻。受益很多。读经典的这一部分读得很吃力，重看了几遍还是没办法消化，“自由、平等与博爱”那么大的主题却能那么娓娓道来，果然还是需要更多积累吧。</li>
<li><strong>送你一颗子弹</strong>，正在看，太喜欢刘瑜的讲话风格了。</li>
</ul>
<h4 id="播客">播客</h4>
<ul>
<li><strong>Fork It - #22 - PoW vs PoS</strong>，随着 “The Merge”的发生，这个话题又变得热门起来，一期很好的概念梳理探究，值得反复听和记笔记。</li>
<li><strong>Fork It - #23 - PoS 是谎言么？</strong>，前后花了三天的通勤才完整听完，有几个概念解释不断回退反复听，还是发现了很多理解上的漏洞，打算看看 BTC Study 补补了。</li>
<li><strong>科技乱炖：你被羊了个羊骗了么？</strong>，最近挺现象级的一个游戏，但自己又没什么兴趣，通过主播们的这期了解一下，很短，但作为科普话题也还算有意思。</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>春天不是读书天</strong>，刚开始看还觉得男主有些太跳了，后面慢慢发现这才是不设限的生活方式，太快乐了。和《早餐俱乐部》连着看，感觉内心的叛逆都被唤醒了。</li>
<li><strong>鹬</strong>，最近加班加到有点心累，想起了一些一直躺在列表里的动画短片，莫名好治愈。</li>
<li><strong>达拉斯买家俱乐部</strong>，片子里对于绝望与窒息感的刻画太细了，耳鸣的音效和逼仄的画面，代入感极强。看到了一个 cowboy 的生活态度，好像厌倦一切却真真切切地热爱着人生，似乎漠不关心他人却又愿意付诸真心，太酷了。另外，虽然没什么爱情戏，但后半段和女主的几次眼神和神态交流也真的很够回味许久的，好配。</li>
<li><strong>花样年华</strong>，一次次重复的走过巷子与擦肩的镜头描写，点到为止的情欲和欲言又止的情愫，原来爱是真的能从眉眼间滋生和蔓延的。能感受到其魅却又不至于艳俗，拿捏得刚好，可能这也是香港和那个时代特有的气质了。另外，真的很喜欢这部的英文片名，In the mood for love，太美了。</li>
<li><strong>爱乐之城</strong>，说来有意思，爱乐之城组曲的现场音乐会都去了两次，电影却才第一次真正看完。遥远的 16 年，刚上映的那个情人节订了电影票却因故错过，后来也一直没补上。最近听朋友提到，就分了两个夜晚看完了，也才真正感受到那曲《City Of Stars》的韵味，一曲便走完了想象中的一生。</li>
<li><strong>卡萨布兰卡</strong>，看《爱乐之城》的时候女主提到小时候看了这部电影反复模仿，也在之前自己的列表里所以就翻出来看了下。不得不说那个年代的片子还是经典，不需要太多拖沓的剧情，对话就已经足够展现大多数主题了，最后机场的那场三个人的对话，关于革命、民族与爱情，寥寥几句就把各自性格和对应的选择呈现得很具象，特有的魅力了。</li>
<li><strong>敦刻尔克</strong>，没有什么宏大的战争场面，只是海滩上战争的狼藉、海上义无反顾的小船和天空中战斗机的周旋几个场景不断切换，形成了一种异样的美感。最后燃烧的飞机和驶在国土上的火车的对比，隐于发言稿之下战争的代价让人心痛。</li>
<li><strong>Nope 不</strong>，大概分三次才看完，叙事确实有些乱，看了一半还是有些不明所以，可能缺少渲染，剧情推动上如果是那个导演可能还合理一点（但是很轻描淡写），只是那对兄妹做这些事的动机实在不足（可能是什么奇妙的家族骄傲），以至于到了最后也没能很理解。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>人生切割术</strong>，前段时间风评不错的剧，整体风格节奏很喜欢，尤其是片头，太惊艳了。故事设定上蛮新的，对一种扭曲的“Work Life Balance”科技的反叛，但可能是因为第一季的戛然而止，总感觉有些动机不足，期待后续发展了。</li>
<li><strong>真相捕捉</strong>，同类型里的最经典还是《疑犯追踪》，但英剧特有的紧凑节奏感也很适合这样的叙事方式，感觉第一季可能都是几年前看的了，衔接剧情上也没什么问题，看了一半左右大概就能猜到结局，但真正最后反转的大型 show 上演时还是燃起来了，只能说不愧是 BBC 剧里的 BBC，很强。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>红辣椒</strong>，补一下今敏的作品，原本主要是想看看分镜和转场，发现真的藏了好多隐喻和想象力的部分，也可以理解之后那么多的致敬今敏的一些由来了。</li>
<li><strong>夏日重现</strong>，追番中，要结局了，潮也太好了。</li>
</ul>
]]></content:encoded></item><item><title>周报 #12 - 赛博空间、自我定义与界限</title><link>https://www.pseudoyu.com/en/2022/09/19/weekly_review_20220919/</link><pubDate>Mon, 19 Sep 2022 12:53:53 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/19/weekly_review_20220919/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-09-13 到 2022-09-18 这周生活的记录与思考。 过去这一周有些忙碌，在几个项目中反复徘徊，所以也没能有很多输入。周末要加班但不</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0919_photo.png" alt="weekly_review_0919_photo"></p>
<p>本篇是对 <code>2022-09-13</code> 到 <code>2022-09-18</code> 这周生活的记录与思考。</p>
<p>过去这一周有些忙碌，在几个项目中反复徘徊，所以也没能有很多输入。周末要加班但不想一直窝在家里，所以外出了，意外发现了一家挺不错的咖啡厅，度过了惬意的一天。</p>
<h2 id="赛博空间">赛博空间</h2>
<p>之前从 <a href="https://twitter.com/novoreorx">Reorx</a> 的这一篇『<a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出</a>』了解到了“<a href="https://en.wikipedia.org/wiki/Cyberspace">赛博空间</a>” 这一概念，原话是：</p>
<blockquote>
<p>赛博空间构成了我的精神世界。</p>
</blockquote>
<p>很难不赞同这一描述。</p>
<p>不知道从什么时候起，自己其实能很明显感受到自己对网络世界信息的依赖。可能有别于游戏瘾或是经常被诟病的短视频算法鸦片，我的这种依赖并不是机械性地刷刷刷，或是面对焦虑时的逃避，而是一种对于信息获取的渴求，甚至内化为了一种生活方式。</p>
<p>依赖于网络世界其实最难免的是与社交媒体与算法的抗争，一方面是要避免自己被过载的贩卖焦虑的信息或是熟人社交圈的“Peer Pressure”所困扰，另一方面也需要警惕算法所构造的信息茧房。</p>
<p>实话说这一点挺难做到，即使自己多少算是具备一些克制和过滤信息的能力并有意识在这样做，但依然难以避免被其所扰乱思绪或是引导。我最后采取了一种简单却也行之有效的方式 —— 关闭微信朋友圈入口与大部分软件通知提醒。</p>
<p>大概是从大三的一个晚上我关闭了朋友圈的入口，具体的情境与动机已经有些模糊，但这一偶然之举也奇迹般成为了一个我坚持至今的习惯。想说的是，这并不意味着我不再关注朋友或是周围人的动态，在关闭朋友圈之后，常常在阶段性想起一些人的时候会点进他们的头像去看看近况，也许会就一些内容开启一次对话。</p>
<p>也许听起来有些多余，比起一个即时的小红点提醒，我们需要经历“想起某个具体的人/事 -&gt; 找到对话框 -&gt; 点进头像 -&gt; 查看朋友圈 -&gt; 了解近况”这样繁琐的过程。但于我而言，如同一种仪式感的隐喻，这种刻意制造的麻烦不断提醒着我维护一段关系所需要付出的部分，渐渐地，朋友越来越少，但留存的人也愈加重要。</p>
<p>而近两年也做了一些另外的改变，关闭了除了即时通讯软件（微信、Telegram）和邮件以外的所有软件消息提醒，并且把大部分不带社交属性而仅仅是用于信息获取的平台（如 B 站、微博等）的关注数量控制在 100 以内，如果新增则筛选优化之前的关注，减少无关内容的干扰。</p>
<h2 id="我的信息流">我的信息流</h2>
<p>通过这一篇『<a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出</a>』和后续的『<a href="https://reorx.com/blog/0-cost-self-hosted-n8n-with-railway-and-supabase/">使用 Railway 和 Supabase 零成本搭建 n8n 自动化平台</a>』迭代升级，我也通过 n8n 和 Telegram 搭建了自己的自动化信息流平台 —— 『<a href="https://t.me/pseudoyulife">Yu&rsquo;s Life</a>』，</p>
<p>参照着 Reorx 的列表，我也整理了自己的输入输出源：</p>
<ul>
<li><strong>Telegram</strong>，采集我零散在各个平台的信息输入输出，并且最近还会将我对电影、书籍的观后感以及自己其他一些所思所想发在频道里。也关注了一些频道和群组获取一些资讯或是认识一些志同道合的人，偶尔会手动转发。</li>
<li><strong>Blog</strong>，目前最用心在维护的输出渠道了，现在更像是一种生活日志。</li>
<li><strong>Twitter</strong>，我目前主要在使用的社交平台，也是分享欲的载体，认识和关注了很多有意思的朋友。</li>
<li><strong>Instagram</strong>，最近才打算恢复使用，主要想分享一下自己的摄影成果和一些日常生活。</li>
<li><strong>YouTube</strong>，也是重度用户了，看技术相关教程和数码资讯比较多，偶尔也有很多好玩的内容。</li>
<li><strong>Bilibili</strong>，主要保留了自己这么多年一直在关注的一些博主，看旅拍比较多，只看动态不看首页和热门，之前倒是有自己经营帐号的计划，暂时没有什么好的想法。</li>
<li><strong>Pinboard</strong>，书签和网站保存管理工具，才开始用几个月就保存了很多重要的内容，重度依赖了。</li>
<li><strong>Instapaper</strong>，管理稍后读，主要是一些精品或是长文的保存。</li>
<li><strong>GitHub</strong>，也是日常刷了，看一些好的项目，也用列表在管理 Star。</li>
<li><strong>Apple Music</strong>，日常听歌软件（毕竟全家桶还是方便），但是列表这些交互感觉很一般。</li>
<li><strong>YouTube Music</strong>，订阅了 YouTube 会员所以附带了这个，用得不算多，但偶尔用于检索。</li>
<li><strong>Spotify</strong>，在上述两个音乐软件听到的好歌会在 Spotify 标注一下并且自动同步到频道。</li>
<li><strong>豆瓣</strong>，记录自己的书籍、剧集、电影、动漫和游戏，也是重度使用了，也在尝试每一个看过/玩过的作品都写一下自己的评价。</li>
<li><strong>微博</strong>，很少发，也依然是保留了一些熟人关注，偶尔会同步分享一些动态吧但是没有太多动力。</li>
<li><strong>微信朋友圈</strong>，摄影以及一些自己写得比较开心的文章会发，基本是偶尔证明自己还活着的频率。</li>
</ul>
<p>自己就像是有一种信息整理的强迫症，在看到自己这些零散的数字痕迹被归集到自己的个人小空间时会感到由衷的快乐，写周报时候往回翻翻也能捡起不少有意思的点，希望之后也能积累越来越多的东西。</p>
<h2 id="自我定义与界限">自我定义与界限</h2>
<p>这周末可能有点叛逆，看了两部青少年电影，《<a href="https://movie.douban.com/subject/1295728/">早餐俱乐部</a>》和《<a href="https://movie.douban.com/subject/1295437/">春天不是读书天</a>》，都是很老的片子了。主题上跟自己看了好几遍的《<a href="https://movie.douban.com/subject/1291548/">死亡诗社</a>》一样，有对于自己个性的坚持、对权威的认知与反抗、对生活与未来可能性界限的冲击，但相比起来可能更加轻松与诙谐。</p>
<p>随着经历见长，自己可能在面对生活与变动已经不算怯懦，也常常踏出一些不一样的选择，但即使到了现在我依然觉得自己还是一个被内心界限所定义的人，以及会用这样的方式与习惯去定义周遭的一切。</p>
<p>我不认为自己是有很强“创造力”的人，所以常常在遇到相关事情或是选择时本能逃避；我认为“友善”和“礼貌”是自己的标签所以常常在一些交流中不愿意破坏，“理性”和应有的“坚持”常常为之让步；我可能愿意为自己的一些看似疯狂的选择负责但其实已经在内心评估过其代价与是否能承受，所以其实也缺少真正“冒险”的勇气。</p>
<p>在亲情、友谊与亲密关系上其实也是如此，我似乎在内心为每段关系下了自己的一些定义，并自认为遵守着其中的界限，但其实情感并非如此分明，自己有意无意地忽略了这一点，却还觉得自己在维系着这样的平衡。</p>
<p>本周自己与身边的一些关系发生了微妙的变化，自己的第一感是无所适从，就像是面对变化的本能的恐惧，在克服之余却也很难马上梳理清楚自己的情绪与想法，可能这种状态可以称之为“情绪过载”吧。自己在这样反复的过程中也常常会思考着是不是自己一直太执着于界限本身而放弃了感受情绪和情感的真实变化，抑或是界限本就是一种自我保护的机制。</p>
<p>好难。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>送你一颗子弹</strong>，正在看</li>
<li><strong>法治的细节</strong>，正在看</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>医院五日</strong>，讲美国卡特里娜飓风时候的一些事，难免不让人联想到武汉疫情当时的一些事。就医学伦理或是法律相关的知识储备都不足以让我来评价紧急情况下安乐死的正当与否，只是在其中也确实看到了政治家的傲慢、人性的真实与小人物在其中的卑微。就像其中所说的，没有亲历常常也是没有资格去居高临下评判其对错的。</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>早餐俱乐部</strong>，可能老片的年代感和主题上会让我稍稍想起《死亡诗社》，但是更轻松有趣，学生的视角、一个有限的空间场景和足量的对话这样结合的表达方式会让人很容易代入，叛逆与对权威（家庭、校园）的本能畏惧展现得很自然，而最后的集体独白也令人会心一笑 — 一群并不愿意被定义的青少年。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>赛博朋克：边缘行者</strong>，剧情比较常规，画风也算不上喜欢，但有些造型和场景美术还可以。可能因为没玩过游戏本体，对其中世界观和人物的部分没有太多代入。算是中规中矩的游戏周边动画吧。</li>
<li><strong>夏日重现</strong>，追番中</li>
</ul>
]]></content:encoded></item><item><title>周报 #11 - 心情、旅行与不期而遇</title><link>https://www.pseudoyu.com/en/2022/09/13/weekly_review_20220913/</link><pubDate>Tue, 13 Sep 2022 12:53:53 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/13/weekly_review_20220913/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-09-05 到 2022-09-12 这周生活的记录与思考。 过去的这一周不论是周中还是中秋假期都还挺丰富的，工作渐渐变得忙碌但也有趣；日常</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0913_photo.png" alt="weekly_review_0913_photo"></p>
<p>本篇是对 <code>2022-09-05</code> 到 <code>2022-09-12</code> 这周生活的记录与思考。</p>
<p>过去的这一周不论是周中还是中秋假期都还挺丰富的，工作渐渐变得忙碌但也有趣；日常也有了一些变化，不至于那么乏味和碌碌；也会在即使只有短短几十分钟的车程里习惯性地拿出 Kindle 翻上几页，很快便沉浸其中；出门也变得更多了，即使只是毫无目的地在街上走走。</p>
<p>大概一切都有在变好。</p>
<h2 id="心情">心情</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_mood_review_20220913.png" alt="yu_mood_review_20220913"></p>
<p>虽说平时话并不多，但自己大体上还是个挺情绪化的人，会因为一些突然闯入的心绪伤感，因为一部电影的结局而发呆许久，也会因为一些生活中的小小细节而感到莫名地欢喜。</p>
<p>我并不是一个对生活那么乐观的人，现在依旧觉得生活中的不幸远远多过幸运，在遭受痛苦时常常觉得自己理应承担这些。过去一两年经历了很多痛苦的事，有的是天灾人祸，遗憾而不甘；有的是自作自受，自责而悔恨。幸而有这样几位挚友，可能并不一定在身边，但过去的那些共同度过的惬意时光常常像是冬日暖阳般照亮我的至暗时刻。</p>
<p>但有时候也需要踏出自己的角落，走在阳光下。</p>
<blockquote>
<p>今天早上起来晚了一点 出来上班的时候天已经挺晴的了 不过气温还好 有点风 在一边听歌（五月天的温柔） 突然感觉心情很好很好 已经很久很久没有那么放松 从心底比较愉悦的这种感受了</p>
</blockquote>
<p>我很庆幸能有这样的时刻，哪怕只是很短暂的情绪，也让我感受到自己与内心的某些部分和解了，连带着周遭的时空。</p>
<h2 id="旅行">旅行</h2>
<p>自己应该算不上一个旅游爱好者，之前有闲暇的时光大多宅在家里打发了，想到要计划各种出行琐事，兴致早已减了大半，更别说还要忍受热门景区的拥挤和吵闹了。</p>
<p>买了相机后，开始有了一些出门的念想，在实习和工作之余也常常随身带着相机出去转转，不知不觉走过了很多城市，拍下了很多记忆。后来看了『<a href="https://space.bilibili.com/37029661">小鹿 Lawrence</a>』的旅拍视频后，在自己的出行清单里列了一条又一条，可始终未能兑现。</p>
<p>8 月本来有去青岛旅行的计划，但因为工作和一些细碎的事未能成行（可能更多也是因为懒），而后疫情又开始各地蔓延，只能一拖再拖。所以当中秋第二天突然得知要去青岛出差时，欣喜的情绪甚至盖过了突发工作任务的压力。</p>
<p>定了第二天一早的票，一边补眠一边看着沿途的风景。抵达后很幸运遇上了一位本地的出租车司机，攀谈几句后突发奇想地决定改行程，让他带着我绕着海边转一圈，一路走走停停，遇到不错的风景就下来吹吹海风，顺带着拍几张照。</p>
<p>这一个小时的旅程似乎是一个青岛旅游的缩印版本，没有看什么攻略，没有在几个景点之间奔波。有的景错过也就错过了，没有多少遗憾；而有的心绪感受到了，却会成为记忆中很美好的一部分，在许久之后也值得会心一笑。</p>
<p>因为只带了一只轻便的 55mm F1.8，却因为时间关系只能拍远景，所以匆匆几下快门的结果并不那么满意，但至少留下了一些记忆点，也勉强串了一个主题《海边的人们》。</p>
<p>
<link rel="stylesheet" href="https://www.pseudoyu.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/people_with_the_sea_04.PNG" alt="A man" />
    </div>
    
      <figcaption>
          <p>A man
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/people_with_the_sea_01.PNG" alt="Shoes" />
    </div>
    
      <figcaption>
          <p>Shoes
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/people_with_the_sea_02.PNG" alt="A girl" />
    </div>
    
      <figcaption>
          <p>A girl
              
          </p>
      </figcaption>
  </figure>
</div>



<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/people_with_the_sea_03.PNG" alt="Family" />
    </div>
    
      <figcaption>
          <p>Family
              
          </p>
      </figcaption>
  </figure>
</div>
</p>
<h2 id="不期而遇">不期而遇</h2>
<p>其实之前和挚友去泰国也是一样，比起曼谷的繁荣热闹，我们在清迈逗留了更久，有时候只是走在街道找一些不起眼的美食，或是跟着 Pokémon Go 的活动探索着城市的另一面。</p>
<p>愈加觉得对于自己而言，旅行的重点早已不是那些“十佳”、“必去”和“绝美”的景色，而是旅途中的心绪感受，以及陪伴着走过的时光。在这样的心境下，所有的不期而遇反而更加美好。</p>
<p>看了小鹿最新一期视频 —— 《<a href="https://www.bilibili.com/video/BV1pe411g7om">不做攻略的旅行有多绝望&hellip;</a>》，可能，下一站会是云南吧。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="工作">工作</h3>
<p>这周工作上做了一些和链交互的开发，还挺有意思的，后面也想再研究一下链上数据处理这一块。也开始要写一些生产级的智能合约了，工作任务挺多的，十一前也得上线两个我负责的新模块，需要加油了。</p>
<h3 id="博客">博客</h3>
<p>很意外的是自己写的一篇『<a href="https://www.pseudoyu.com/en/2022/09/05/database_postgres_basic/">PostgreSQL 基础与实践</a>』得到了很多关注和反馈，后面也还会继续写工作实践系列了，目前完成了：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/">MySQL 基础与实践</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/09/05/database_postgres_basic/">PostgreSQL 基础与实践</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/09/07/container_docker_basic/">Docker 基础与实践</a></li>
</ul>
<p>其他的就是还蹭了个 Go 的热点，给 GoCN 首发翻译了一篇文章：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/09/10/vulnerability_management_for_go/">[译] Go 新漏洞管理工具：govulncheck</a></li>
</ul>
<p>还有很多想写的主题，后面不能再偷懒了。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>黑客与画家</strong>，通勤路上在读的，原本以为像是软技能那样的比较实际的一些内容，是当作路途消遣来看的，但是出乎意料地很多想法挺有趣，文风也很舒服。一直觉得代码、绘画或是写作都是创作的不同形式，都能让人感受到创造的快乐，但少有书籍能将这部分那么自然地表达出来。</li>
<li><strong>送你一颗子弹</strong>，正在看</li>
<li><strong>法治的细节</strong>，正在看</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>蓝色大门</strong>，之前对台湾电影最深的印象应该就是《阳光普照》了，许多对话、独白和长镜头，很多景就像是想把记忆碎片拍下来。假期补了这部《蓝色大门》，早期青春片的质感真的很绝，诠释了“唯美”这一后续被滥用的形容。陈柏霖的《我可能不会爱你》影响了我青春的很多部分，甚至有些想法和品性深入了我的人格本身，对他的印象也多是沉稳而温暖，是自己想成为的样子。在这部看到了一个相似却不一样的他，很喜欢的一点是他总是认真而坚定地重复着自己的话，不论是自我介绍还是带着愠怒的质问，似乎在和自己确认着什么，又带着一些青春特有的胆怯。最后一段独白也很戳，终于找到了之前喜欢的这句话的出处 — “虽然，我闭着眼睛也看不见自己， 但是我却可以看见你。”</li>
<li><strong>驴得水</strong>，又是一部群像的电影，刚好是我最近最喜欢的叙述方式。不知道该归咎于时代还是人性，混乱与可笑的政治正确的秩序交织着影响着事情的各种走向。政治、爱情、女性，包罗了太多主题，却不至于让人感觉到故事的剥离感，喜剧和幽默的部分自一开始就没打算掩盖其悲剧的内核，以至于到了结局虽然有些难过，但更多的还是无力。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，追番中</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，追番中</li>
</ul>
<h3 id="摄影">摄影</h3>
<p>目前一直在用的是 Sony A7M3，主要看中的是视频性能，也买了大疆稳定器来拍一些视频，但就没法兼顾拍照了。想着之后旅游再有一台设备来进行街拍，对 Fuji Xpro3 有点心动，尤其是光学取景和胶片模拟，太有仪式感了。</p>
<p>不过还是先多出门多拍，再更新设备吧。</p>
]]></content:encoded></item><item><title>[译] Go 新漏洞管理工具：govulncheck</title><link>https://www.pseudoyu.com/en/2022/09/10/vulnerability_management_for_go/</link><pubDate>Sat, 10 Sep 2022 10:27:18 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/10/vulnerability_management_for_go/</guid><description>《后来的我们 - 五月天》 前言 我们很高兴地宣布 Go 对漏洞管理的最新支持，这是我们为帮助 Go 开发者了解可能影响他们的已知漏洞而迈出的第一步。 这篇文章概</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>我们很高兴地宣布 Go 对漏洞管理的最新支持，这是我们为帮助 Go 开发者了解可能影响他们的已知漏洞而迈出的第一步。</p>
<p>这篇文章概述了这个项目的当前状况和后续计划。</p>
<h2 id="概览">概览</h2>
<p>Go 提供的工具可以分析你的代码库并展示出已知的漏洞，该工具由 Go 安全团队设计维护的 Go 漏洞数据库提供支持。Go 只展示代码调用函数中的漏洞，从而减少结果中的噪音。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/go_vulnerability_management_architecture.png" alt="go_vulnerability_management_architecture"></p>
<h2 id="go-漏洞数据库">Go 漏洞数据库</h2>
<p>Go 漏洞数据库(<a href="https://vuln.go.dev/">https://vuln.go.dev/</a>)是一个囊括了公共 Go 模块中可导入包的已知漏洞的全面信息源。</p>
<p>漏洞数据来自现有来源（如 CVEs 和 GHSAs）以及 Go 软件包维护者的直接报告。这些信息将由 Go 安全团队审查并添加至数据库中。</p>
<p>我们鼓励软件包维护者<a href="https://go.dev/s/vulndb-report-new">贡献</a>他们自己项目中的公共漏洞信息，并<a href="https://go.dev/s/vulndb-report-feedback">更新</a>现有漏洞信息。我们旨在让报告漏洞成为一个低阻力的过程，所以请<a href="https://golang.org/s/vuln-feedback">把你的建议</a>发送给我们，以便于我们进行改进。</p>
<p>我们可以在浏览器中查看 Go 漏洞数据库，网址为 <a href="https://pkg.go.dev/vuln">pkg.go.dev/vuln</a>。关于数据库的更多信息详见 <a href="https://go.dev/security/vuln/database">go.dev/security/vuln/database</a>。</p>
<h2 id="使用-govulncheck-进行漏洞检测">使用 govulncheck 进行漏洞检测</h2>
<p>新的 <a href="https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck">govulncheck 命令</a>是一种低噪音、稳定的方式，让 Go 用户了解可能影响其项目的已知漏洞。Govulncheck 会基于代码中涉及调用易受攻击函数的函数分析你的代码库，展示对你有实际影响的漏洞。你可以在项目中运行以下程序来使用 govulncheck。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ go install golang.org/x/vuln/cmd/govulncheck@latest
</span></span><span class="line"><span class="cl">$ govulncheck ./...
</span></span></code></pre></div><p>Govulncheck 是一个独立的工具，以便在我们收集用户的反馈时可以频繁更新和快速迭代。从长远来看，我们计划将 govulncheck 工具整合到 Go 的主要发行版中。</p>
<p>为了将漏洞检查直接集成到其他工具和流程中，<a href="https://pkg.go.dev/golang.org/x/vuln/vulncheck">vulncheck</a> 包将 govulncheck 的功能作为 Go API 导出。</p>
<h3 id="集成">集成</h3>
<p>在开发和部署过程中尽可能早地了解漏洞总是更好的。为此，我们将漏洞检测整合到现有的 Go 工具和服务中，如<a href="https://pkg.go.dev/">Go 软件包发现页</a>。例如，<a href="https://pkg.go.dev/golang.org/x/text?tab=versions">这个页面</a>显示了 golang.org/x/text 每个版本中的已知漏洞。通过 VS Code Go 扩展进行漏洞检查的功能也即将推出。</p>
<h2 id="后续计划">后续计划</h2>
<p>我们希望你能发现 Go 对漏洞管理的支持是有用的，并帮助我们改进它!</p>
<p>Go 漏洞管理是一项正在积极开发中的新功能，可能会有一些错误和<a href="https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck#hdr-Limitations">局限之处</a>。</p>
<p>我们希望您能在以下方面做出贡献，帮助我们进行改进。</p>
<ul>
<li><a href="https://golang.org/s/vulndb-report-new">贡献新的</a>和<a href="https://go.dev/s/vulndb-report-feedback">更新现有的</a>涉及你所维护的 Go 软件包的公共漏洞信息</li>
<li><a href="https://golang.org/s/govulncheck-feedback">参加此调查</a>，分享您使用 govulncheck 的体验</li>
<li><a href="https://golang.org/s/vuln-feedback">向我们反馈</a>问题和新功能需求</li>
</ul>
<p>我们很高兴能与你合作，建立一个更好、更安全的 Go 生态系统。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li>原文地址：<a href="https://go.dev/blog/vuln">https://go.dev/blog/vuln</a></li>
<li>原文作者：Julie Qiu, for the Go security team</li>
<li>本文永久链接：<a href="https://github.com/gocn/translator/blob/master/2022/w37_Vulnerability_Management_for_Go.md">https://github.com/gocn/translator/blob/master/2022/w37_Vulnerability_Management_for_Go.md</a></li>
<li>译者：<a href="https://github.com/pseudoyu">张宇</a></li>
<li>校对：<a href="https://github.com/fivezh">Fivezh</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Docker 基础与实践</title><link>https://www.pseudoyu.com/en/2022/09/07/container_docker_basic/</link><pubDate>Wed, 07 Sep 2022 01:30:48 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/07/container_docker_basic/</guid><description>《后来的我们 - 五月天》 前言 这是工作实践系列容器部分的第一篇，主要介绍 Docker 的基础知识与实践。 作为一个后端开发，我刚开始工作的时候其实主要都是在本</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>这是工作实践系列容器部分的第一篇，主要介绍 Docker 的基础知识与实践。</p>
<p>作为一个后端开发，我刚开始工作的时候其实主要都是在本地调试的，并没有怎么了解过 Docker 的相关使用。直到后来开始接触较为复杂的底层链开发，因为链或其相关工具的依赖关系比较复杂，也涉及很多版本冲突问题，在本机或服务器上每次需要配置复杂的环境，且每次重启后很多服务与配置都需要重新部署，繁琐且容易出现一些莫名的跨平台错误。</p>
<p>因此逐渐开始采用编写项目特定 Dockerfile 并编译镜像的方式进行后续的开发调试，部署的机器仅需安装 Docker 环境（以及 Docker Compose），而不需要本地安装各种依赖，很便捷。后续也和 Leader 一起基于 Docker 镜像、GitLab CI 与 k8s 环境配置了项目的 CI/CD 流程，极大提升了开发调试效率。</p>
<p>本文将基于这些经验对 Docker 相关的概念与实践进行总结，希望能有所帮助。</p>
<h2 id="docker-简介">Docker 简介</h2>
<p>我们所开发的服务往往以二进制的方式运行在操作系统中，而 Docker 是一种容器技术，将我们的应用程序及相关依赖打包在一个容器中，容器往往是基于一个较为轻量级的 Linux 镜像，是多层镜像的堆叠，我们的应用往往在最上层，这些依赖关系在 Dockerfile 中进行指定。</p>
<p>使用容器进行部署比起在本机或远程服务器有很多明显的优势。</p>
<ol>
<li>无需在操作系统上安装各类环境和依赖（除了 Docker 自身）。如果采用原有的服务启动模式，开发流程会变得十分繁琐，需要开发与运维不断沟通，配合完成环境配置与部署，并且如果一台机器上部署了多个服务，也极易造成依赖/版本冲突问题。</li>
<li>可以拥有独立的部署环境。我们通过为不同的项目编写 Dockerfile 来构建镜像，将应用所需环境与依赖打包在镜像中，可以很方便地运行同个应用的不同版本，或为 MySQL 这样的通用服务运行多个实例，并且可以通过 Docker 命令或 Docker Compose 命令进行管理，一键启动/暂停。</li>
<li>Docker 并不强依赖于操作系统本身的版本，同一个 Docker 镜像可以在不同的操作系统（Windows、macOS、不同发行版的 Linux）上运行，易于服务的分享、迁移与跨平台部署等。</li>
<li>与虚拟机相比，Docker 容器没有内核而只包含应用层，体积更小，启动速度更快，更加轻量级。</li>
</ol>
<p>当然，Docker 容器的兼容性相比操作系统与虚拟机相对更差一些，如 VM 能够运行任意其他操作系统，能满足更特定的一些需求。</p>
<h2 id="docker-基础操作">Docker 基础操作</h2>
<h3 id="安装-docker">安装 Docker</h3>
<p>Docker 的安装很简单，在<a href="https://www.docker.com">官网</a>下载自己操作系统对应的安装包并按照指引进行安装即可。</p>
<h4 id="macos">macOS</h4>
<p>我个人的 macOS 系统起初是安装了 <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>，可以通过图形化界面对镜像、容器进行管理，很方便但是占用较高，比较耗电。</p>
<p>后来尝试了 <a href="https://github.com/abiosoft/colima">Colima</a>，一个较为轻量级的容器运行环境，在 macOS 系统上本机调试十分方便，推荐使用，根据项目官方文档安装并配置环境即可。我直接通过 <code>brew</code> 包管理工具来进行安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install colima
</span></span></code></pre></div><p>安装完成后运行 <code>colima start</code> 即可启动容器，运行 <code>colima stop</code> 停止容器，更多命令可以通过 <code>colima --help</code> 查看。</p>
<p>我通过了如下命令启动了自己的常用开发环境，大家可以根据自己的需求自行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">colima start -c <span class="m">8</span> -m <span class="m">16</span> -a x86_64 -p docker-amd
</span></span></code></pre></div><h4 id="centos">CentOS</h4>
<p>比起本机开发，Docker 更常用的应用场景是在服务器上部署应用，我常用的操作系统是 <code>CentOS 7</code>，可以通过 <code>yum</code> 包管理工具安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install -y yum-utils device-mapper-persistent-data lvm2
</span></span><span class="line"><span class="cl">yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</span></span><span class="line"><span class="cl">yum install docker-ce
</span></span></code></pre></div><p>安装完成后，启动 Docker 服务并配置其开机自启：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl <span class="nb">enable</span> docker
</span></span><span class="line"><span class="cl">systemctl start docker
</span></span></code></pre></div><h3 id="docker-镜像">Docker 镜像</h3>
<p>Docker 主要有镜像和容器两个概念，可以认为镜像是通过 Dockerfile 编译出来的容器的一个模板，而容器是镜像的一个实例。</p>
<h4 id="dockerfile">Dockerfile</h4>
<p>我们通过 Dockerfile 来指定应用所需环境与依赖，其基本格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> &lt;image&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">USERNAME</span><span class="o">=</span>admin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">PASSWORD</span><span class="o">=</span><span class="m">123456</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">RUN</span> mkdir -p &lt;app-directory&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> . /&lt;app-directory&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;&lt;command&gt;&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;entrypoint file&gt;&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><p>完成 Dockerfile 编写后，我们可以在同级目录（或指定 Dockerfile）下通过 <code>docker build</code> 命令来构建镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 镜像构建</span>
</span></span><span class="line"><span class="cl">docker build -t &lt;image:tag&gt; .
</span></span></code></pre></div><h4 id="存储加载镜像">存储、加载镜像</h4>
<p>我们可以把本地编译好的镜像存储为 <code>tar</code> 包来进行分享：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker save -o &lt;image-name&gt;.tar &lt;image-name&gt;
</span></span></code></pre></div><p>当需要使用镜像时则可以通过 <code>docker load</code> 命令来加载 tar 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker load -i &lt;image-name&gt;.tar
</span></span></code></pre></div><h4 id="上传拉取镜像">上传、拉取镜像</h4>
<p>当然，通过镜像 <code>tar</code> 包的方式来进行分享并不那么便捷，有的镜像可能会很大，传输也不方便。因此，我们可以通过 <code>docker push</code> 命令来将镜像推送至官方镜像仓库或企业/个人的私有库（像我所在的项目就是通过 Harbor 来管理镜像），并通过 <code>docker pull</code> 命令来进行拉取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 拉取官方镜像（简写）</span>
</span></span><span class="line"><span class="cl">docker pull &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取官方镜像（完整命令）</span>
</span></span><span class="line"><span class="cl">docker pull docker.io/library/&lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送镜像至官方镜像仓库 Docker Hub</span>
</span></span><span class="line"><span class="cl">docker push &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送镜像至私有库（需要配置鉴权）</span>
</span></span><span class="line"><span class="cl">docker tag &lt;image:tag&gt; &lt;private-repo-path&gt;/&lt;image:tag&gt;
</span></span><span class="line"><span class="cl">docker push &lt;private-repo-path&gt;/&lt;image:tag&gt;
</span></span></code></pre></div><h4 id="docker-镜像操作">Docker 镜像操作</h4>
<p>针对 Docker 镜像，我常用到的操作就是查看、删除与重命名 tag，更多命令可以通过 <code>docker image --help</code> 或官网查看。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看所有镜像</span>
</span></span><span class="line"><span class="cl">docker images
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除镜像</span>
</span></span><span class="line"><span class="cl">docker rmi &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重命名镜像</span>
</span></span><span class="line"><span class="cl">docker tag &lt;old-image:tag&gt; &lt;new-image:tag&gt;
</span></span></code></pre></div><h3 id="容器操作">容器操作</h3>
<h4 id="查看容器">查看容器</h4>
<p>当我们通过 Docker 或 Docker Compose 命令启动镜像后，可以通过以下命令查看服务状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看运行中容器</span>
</span></span><span class="line"><span class="cl">docker ps
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有容器</span>
</span></span><span class="line"><span class="cl">docker ps -a
</span></span></code></pre></div><h4 id="通过镜像启动停止实例">通过镜像启动/停止实例</h4>
<p>当我们通过 Dockerfile 编译好了所需镜像后，可以通过 <code>docker run</code> 命令启动镜像实例，并在命令中加入一些配置来满足我们的服务需求，我的常用操作如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 运行容器</span>
</span></span><span class="line"><span class="cl">docker run &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 运行容器并指定名称</span>
</span></span><span class="line"><span class="cl">docker run --name &lt;server-name&gt; &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以 detached 模式运行容器</span>
</span></span><span class="line"><span class="cl">docker run -d &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 端口映射</span>
</span></span><span class="line"><span class="cl">docker run -p6000:6379 &lt;image:tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置环境变量</span>
</span></span><span class="line"><span class="cl">docker run -e <span class="nv">USERNAME</span><span class="o">=</span>admin -e <span class="nv">PASSWORD</span><span class="o">=</span><span class="m">123456</span> &lt;image:tag&gt;
</span></span></code></pre></div><h4 id="启动停止容器服务">启动/停止容器服务</h4>
<p>当我们通过镜像创建实例后，可以通过如下命令来启动/停止容器服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 启动/重启容器</span>
</span></span><span class="line"><span class="cl">docker start &lt;container-id&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 暂停容器</span>
</span></span><span class="line"><span class="cl">docker stop &lt;container-id&gt;
</span></span></code></pre></div><h4 id="查看日志">查看日志</h4>
<p>当我们的通过 Docker 启动服务后，还常常需要查看其运行日志以便于调试，可以通过 <code>docker logs</code> 进行查看，具体命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看日志</span>
</span></span><span class="line"><span class="cl">docker logs &lt;container-id&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 滚动查看日志</span>
</span></span><span class="line"><span class="cl">docker logs -f &lt;container-id&gt;
</span></span></code></pre></div><h4 id="进入容器">进入容器</h4>
<p>有时我们还需要进入 Docker 容器服务内部进行服务查看与调试，可以通过 <code>docker exec</code> 命令进入容器，具体命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 根据 id 进入特定容器</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it &lt;container-id&gt; &lt;command&gt;
</span></span></code></pre></div><h4 id="docker-网络">Docker 网络</h4>
<p>Docker 容器实例运行于网络中，我们上文的各个命令未指定网络，所以服务会运行在默认网络下，我们可以通过以下命令来查看网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看所有网络</span>
</span></span><span class="line"><span class="cl">docker network ls
</span></span></code></pre></div><p>如果不想运行在默认网络中，我们可以通过如下命令创建自定义网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 创建自定义网络</span>
</span></span><span class="line"><span class="cl">docker network create &lt;network-name&gt;
</span></span></code></pre></div><p>创建了我们的自定义网络后，在创建容器实例时我们可以通过 <code>--network</code> 参数来指定网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --network &lt;network-name&gt; &lt;image:tag&gt;
</span></span></code></pre></div><h4 id="docker-数据持久化">Docker 数据持久化</h4>
<p>使用 Docker 实例运行服务后，我们的数据会保存在容器中，当容器被删除后，数据也会被删除，对于一些需要长期运行的服务来说会造成数据丢失。因此，我们需要进行数据的持久化，我常用 host 挂载与 container 挂载两种方式。</p>
<p>我们可以通过将宿主机的某个具体的目录挂载映射至容器内的目录来实现持久化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 通过宿主机目录挂载容器内目录</span>
</span></span><span class="line"><span class="cl">docker run -v &lt;host-file-path&gt;:&lt;container-file-path&gt; &lt;image:tag&gt;
</span></span></code></pre></div><p>也可以通过 container 挂载的方式，使用 volume 来实现持久化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 可以通过名字来引用 volume</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Docker 会自动生成一个路径</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Windows: C:\ProgramData\docker\volumes</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Linux: /var/lib/docker/volumes</span>
</span></span><span class="line"><span class="cl"><span class="c1"># macOS: /var/lib/docker/volumes</span>
</span></span><span class="line"><span class="cl">docker run -v &lt;volume-name&gt;:&lt;container-file-path&gt; &lt;image:tag&gt;
</span></span></code></pre></div><p>如果只是需要挂载，不需要对文件进行具体的管理查看等，我们也可以通过 container 匿名挂载的方式，不指定 volume 名称，而使用其自动生成的目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Docker 会自动生成一个路径</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Windows: C:\ProgramData\docker\volumes</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Linux: /var/lib/docker/volumes</span>
</span></span><span class="line"><span class="cl"><span class="c1"># macOS: /var/lib/docker/volumes</span>
</span></span><span class="line"><span class="cl">docker run -v &lt;container-file-path&gt; &lt;image:tag&gt;
</span></span></code></pre></div><h2 id="docker-compose">Docker Compose</h2>
<p>Docker 提供了丰富的命令供我们使用，但是使用命令行操作不易于记忆，且如果应用依赖多个环境/服务，则需要分别运行与管理多个容器，造成不便。因此，我们可以通过 Docker Compose 工具来进行管理。</p>
<p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具，其通过 <code>.yaml</code> 文件来进行配置管理。我在日常工作中使用最高频率的也是 Docker Compose，只有一些很简单的应用才会使用 <code>docker run</code> 命令来启动，也便于统一管理和后续的配置调整。</p>
<h3 id="安装">安装</h3>
<p>macOS 系统如果安装了 Docker Desktop 则已经自带了 Docker Compose，可以直接使用。如果是 Linux 系统则需要单独安装，我这里同样以 <code>CentOS 7</code> 为例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -L <span class="s2">&#34;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-</span><span class="k">$(</span>uname -s<span class="k">)</span><span class="s2">-</span><span class="k">$(</span>uname -m<span class="k">)</span><span class="s2">&#34;</span> -o /usr/local/bin/docker-compose
</span></span><span class="line"><span class="cl">chmod +x /usr/local/bin/docker-compose
</span></span><span class="line"><span class="cl">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
</span></span></code></pre></div><p>完成安装后就可以使用 <code>docker-compose</code> 命令了。</p>
<h3 id="配置管理">配置管理</h3>
<p>Docker Compose 的配置文件是一个 <code>yaml</code> 文件，其基本格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">contrainer-1</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;image-name&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span>- <span class="l">&lt;host&gt;:&lt;container&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span>- <span class="l">&lt;host-file-path&gt;:&lt;container-file-path&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span><span class="l">&lt;ENV-KEY&gt;=&lt;ENV-VALUE&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">contrainer-2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;image-name&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span>- <span class="l">&lt;host&gt;:&lt;container&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span>- <span class="l">&lt;volume-name-1&gt;:&lt;container-file-path&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        	</span><span class="l">&lt;ENV-KEY&gt;=&lt;ENV-VALUE&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">volume-name-1</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    	</span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">local</span><span class="w">
</span></span></span></code></pre></div><p>其大部分配置都很直观，如服务名称、镜像名称、端口映射、文件挂载、环境变量等。</p>
<p>其中，<code>version</code> 表示配置文件的版本，<code>services</code> 表示服务列表，<code>volumes</code> 表示挂载的卷列表。</p>
<p>在具体的 <code>services</code> 中，<code>image</code> 表示镜像名称，<code>ports</code> 表示端口映射，<code>volumes</code> 表示文件挂载，<code>environment</code> 表示环境变量，更多配置可以根据项目需要进行查看。</p>
<h3 id="常用命令">常用命令</h3>
<h4 id="启动停止服务">启动/停止服务</h4>
<p>跟 <code>docker run</code> 命令类似，Docker Compose 也提供了 <code>up</code> 和 <code>down</code> 命令来启动和停止服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 启动服务</span>
</span></span><span class="line"><span class="cl">docker-compose -f &lt;name&gt;.yaml up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以 detached 模式启动服务</span>
</span></span><span class="line"><span class="cl">docker-compose -f &lt;name&gt;.yaml up -d
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 停止服务</span>
</span></span><span class="line"><span class="cl">docker-compose -f &lt;name&gt;.yaml down
</span></span></code></pre></div><h4 id="查看日志-1">查看日志</h4>
<p>我们可以通过 <code>logs</code> 命令来查看服务的日志。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看日志</span>
</span></span><span class="line"><span class="cl">docker-compose logs &lt;container-id&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 滚动查看日志</span>
</span></span><span class="line"><span class="cl">docker-compose logs -f &lt;container-id&gt;
</span></span></code></pre></div><h2 id="实用操作命令">实用操作命令</h2>
<p>除了以上基础命令外，我常用的还有以下几个常用命令。</p>
<h3 id="清除无用容器">清除无用容器</h3>
<p>当我们因配置或程序运行时调用出错而导致容器实例退出时，其依然会保留，可以通过 <code>docker ps -a</code> 命令来查看，我们可以通过以下组合命令进行清理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker rm <span class="sb">`</span>docker ps -a <span class="p">|</span> grep Exited <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span></span></code></pre></div><h3 id="批量导入本地镜像">批量导入本地镜像</h3>
<p>当我们需要将大量本地镜像导入机器时，如果一个个导入会非常麻烦，我们可以将镜像放入同一个目录并通过以下命令进行批量导入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="sb">`</span>ls<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> docker load &lt; <span class="nv">$i</span> <span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我对 Docker 容器技术的基础知识与实用操作的讲解，希望对你有所帮助。其实 Docker 的内容还有很多，如在上一个项目中尝试用到 Docker 的 <code>Buildkit</code> 特性，极大减小了最终构建镜像的大小，以及使用到 <code>buildx</code> 来实现跨平台兼容等等，本文旨在讲解基础知识与实践中常用的命令，这些拓展部分如果大家感兴趣的话后续再进行更新。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.docker.com">Docker 官网</a></li>
<li><a href="https://www.youtube.com/watch?v=3c-iBn73dDE">Docker Tutorial for Beginners</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>PostgreSQL 基础与实践</title><link>https://www.pseudoyu.com/en/2022/09/05/database_postgres_basic/</link><pubDate>Mon, 05 Sep 2022 23:30:46 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/05/database_postgres_basic/</guid><description>《后来的我们 - 五月天》 前言 最近想着把工作中常用到的技术点与工具做一些整理总结，一方面梳理一下这些知识点，加深使用记忆，也可以作为之后使用的查</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>最近想着把工作中常用到的技术点与工具做一些整理总结，一方面梳理一下这些知识点，加深使用记忆，也可以作为之后使用的查阅。</p>
<p>目前主要计划了数据库相关、CI/CD 相关（GitHub Actions + GitLab CI）、容器相关（Docker + k8s）、运维相关（Ansible 等）这几个核心介绍，以及一些像是语言特性、Git 实用技巧、Shell 脚本等技巧总结。因为有很多内容工作中只是接触到，自己做了一些拓展学习，所以不一定完全符合企业具体实践（大多为自己的经验与理解），希望能有所帮助。</p>
<p>本篇是数据库系列的 PostgreSQL 部分，关于 MySQL 之前已经梳理过，可以进行查阅 —— 『<a href="https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/">MySQL 基础知识与相关操作</a>』。</p>
<h2 id="数据与数据库概述">数据与数据库概述</h2>
<h3 id="数据">数据</h3>
<p>首先，数据其实本质上是一种事实或者观察到的结果，是对客观事务的逻辑上的归纳总结，是信息的一种表现形式和载体。人们从很早的时候就开始管理数据（即使还没有这个概念），最初是由人工管理，而后来渐渐有了文件系统（就像图书馆一样，分门别类地管理不同信息），而随着计算机技术的发展，最后形成了用数据库进行管理的这种较为便捷高效的模式。</p>
<h3 id="数据库">数据库</h3>
<p>数据库是按照一定的数据结构来组织、存储和管理数据的一个仓库，主要特征为</p>
<ul>
<li>结构化</li>
<li>可共享</li>
<li>冗余度小</li>
<li>独立性高</li>
<li>易于拓展</li>
</ul>
<p>很好理解的是，按照不同关系/结构组织起来的数据具备不同的特征，同时也适用于不同的应用场景，目前主要分为层次数据库、网状数据库和关系数据库三种，而我们要着重介绍的 Postgres 就是关系数据库。</p>
<h3 id="数据库管理系统dbms">数据库管理系统(DBMS)</h3>
<p>数据库管理系统(DBMS)是对数据库进行各种操作的一个系统，一具有建立和维护数据库、对数据的存储进行组织管理、对数据库进行控制、定义数据、操纵数据以及管理数据之间的通信等核心功能，不同的数据库管理系统对数据库和数据的处理方式不同，数据呈现方式也不同，也往往需要根据数据规模、业务需求等场景选择合适的数据库管理系统，如在海量数据和高并发数据读写的情况下，关系性数据库的性能会下降得很厉害。</p>
<h2 id="关系性数据库rdbms">关系性数据库(RDBMS)</h2>
<h3 id="主要特征">主要特征</h3>
<p>关系性数据库主要以数据表的形式呈现，每一行为一条记录，每一列则为记录名称所对应的数据域(Field)。许多行列组成一张单表，而若干单表则组成数据库。用户/系统通过 SQL(结构化查询语言对数据库进行查询。</p>
<p>有些关系型数据库的操作具有事务性，即 ACID 规则</p>
<ul>
<li>原子性(Atomicity)</li>
<li>一致性(Consistency)</li>
<li>隔离性(Isolation)</li>
<li>持久性(Durability)</li>
</ul>
<p>原子性是指一系列事务操作要么都完成，要么都失败，不存在完成了一部分这样的情况，例如银行转账这样的场景里，转账行为发生后，发送方余额减少，而如果数据库出现了操作错误，接收方余额未增加，则会造成严重的问题。</p>
<p>一致性是指在事务执行完成后，整个数据库的数据是一致的，不应存在数据库内同一数据不同步的情况。</p>
<p>隔离性则是指不同的事务之间应该独立进行运行、互不干扰的，当然，这样会牺牲一定的效率，但对数据的准确性等提供了较好保障。</p>
<p>持久性则是指当一个事务执行完成后，它对数据库进行的更改、对系统产生的影响是永久的。</p>
<h3 id="数据完整性">数据完整性</h3>
<p>数据完整性是数据库很重要的一个要求和属性，是指存储在数据库中的数据应该保持一致性和可靠性，主要分为以下四种</p>
<ul>
<li>实体完整性</li>
<li>域完整性</li>
<li>参照完整性</li>
<li>用户定义完整性</li>
</ul>
<p>实体完整性要求每张数据表都有一个唯一的标识符，每张表中的主键字段不能为空且不能重复，这主要是指表中的数据都可以被唯一区分。</p>
<p>域完整性则是通过对表中列做一些额外限制，如限制数据类型、检查约束、设置默认值、是否允许空值以及值域范围等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 在创建表时对字段进行唯一性的约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="n">auto_increment</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id_number</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>参照完整性是指数据库不允许引用不存在的实体，数据库的表与其他表之间往往存在一些关联，可以通过外键约束来保障其完整性。</p>
<p>而用户自定义完整性则是根据具体应用场景和涉及到数据来对数据进行一些语义方面的限制，如余额不能为负数等，一般用设定规则、存储过程和触发器等来进行约束和限制。</p>
<h3 id="主流-rdbms">主流 RDBMS</h3>
<p>目前主流的关系型数据库有以下几种</p>
<ul>
<li>SQL Server</li>
<li>Sybase</li>
<li>DB2</li>
<li>Oracle</li>
<li>MySQL</li>
<li>PostgreSQL</li>
</ul>
<p>企业和个人用得比较多的是 Oracle、MySQL、PostgreSQL 几种，接下来也会以 PostgreSQL 为例进行详细的操作讲解。</p>
<h2 id="postgresql">PostgreSQL</h2>
<h3 id="安装与配置">安装与配置</h3>
<p>PostgreSQL 是一种现代化的开源对象关系性数据库管理系统。</p>
<p>作为个人用户学习使用，可以直接下载软件安装包使用本地搭建环境，可以根据不同的系统选择不同的版本，也具备较便捷的图形界面供大家进行服务的开启、关闭、重启以及进行相关的配置等。本文以 macOS 系统下的 <code>PostgreSQL 14</code> 为例，在<a href="https://postgresapp.com">官网</a>安装及进行基本设置后，就可以对本机 PostgreSQL 服务进行管理，版本可能会略有差别，但核心功能差别不大。</p>
<h4 id="图形界面">图形界面</h4>
<p>打开 PostgreSQL.app 应用，可以看到如下界面：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mac_postgres_interface.png" alt="mac_postgres_interface"></p>
<p>在这个管理界面可以很方便地进行 PostgreSQL 服务的开启与关闭，点击对应的数据库也可以进入命令行操作界面。</p>
<h4 id="命令行界面">命令行界面</h4>
<p>首先我们讲 <code>psql</code> 的路径加入环境变量以便后续使用，我使用的是 <code>zsh</code>，所以在 <code>~/.zshrc</code> 文件中添加如下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># postgres</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="si">${</span><span class="nv">PATH</span><span class="si">}</span>:/Applications/Postgres.app/Contents/Versions/14/bin
</span></span></code></pre></div><p>之后在终端中输入 <code>psql</code>，就可以访问 PostgreSQL 的命令行界面了。可以使用如下命令查看 psql 的命令列表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql --help
</span></span></code></pre></div><h3 id="连接-postgresql">连接 PostgreSQL</h3>
<p>我们可以通过以下命令连接数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连接数据库</span>
</span></span><span class="line"><span class="cl">psql -h &lt;host&gt; -p &lt;port&gt; -U &lt;username&gt; &lt;database-name&gt;
</span></span></code></pre></div><p>当然，我们也可以通过一些第三方工具来更方便地连接数据库使用，我当前使用的 <a href="http://tableplus.com">TablePlus</a> 就支持 PostgreSQL 数据库，推荐。</p>
<h3 id="命令行交互">命令行交互</h3>
<p>PostgreSQL 提供了强大的命令行交互功能，我们可以使用 <code>\</code> + 关键词来进行操作。我们可以通过查阅文档或 <code>\?</code> 与 <code>help</code> 命令来查看命令详情与帮助信息。其他常用命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看帮助</span>
</span></span><span class="line"><span class="cl"><span class="nb">help</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 psql 命令详情</span>
</span></span><span class="line"><span class="cl"><span class="se">\?</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看数据库（全部）</span>
</span></span><span class="line"><span class="cl"><span class="se">\l</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看数据库（指定）</span>
</span></span><span class="line"><span class="cl"><span class="se">\l</span> &lt;database-name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 连接数据库</span>
</span></span><span class="line"><span class="cl"><span class="se">\c</span> &lt;database-name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看方法</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span>f
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看表（全部）</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看表（只看表）</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span>t
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看表（指定）</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span> &lt;table-name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行 sql 命令</span>
</span></span><span class="line"><span class="cl"><span class="se">\i</span> &lt;filepath&gt;/&lt;filename&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 打开拓展视图</span>
</span></span><span class="line"><span class="cl"><span class="se">\x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 导出至 CSV</span>
</span></span><span class="line"><span class="cl"><span class="se">\c</span>opy <span class="o">(</span>SELECT * FROM person LEFT JOIN car ON person.car_id <span class="o">=</span> car.id<span class="o">)</span> TO <span class="s1">&#39;path/to/output.csv&#39;</span> DELIMITER <span class="s1">&#39;,&#39;</span> CSV HEADER<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 退出</span>
</span></span><span class="line"><span class="cl"><span class="se">\q</span>
</span></span></code></pre></div><h3 id="核心语法">核心语法</h3>
<p>经过了本地 PostgreSQL 配置与连接后，我们就可以对数据库进行一些操作了，SQL 语言主要分为以下四类</p>
<ul>
<li>DDL 数据定义语言（Data Definition Language）</li>
<li>DML 数据操纵语言（Data Manipulation Language）</li>
<li>DQL 数据查询语言（Data Query Language）</li>
<li>DCL 数据控制语言（Data Control Language）</li>
</ul>
<h4 id="ddl-操作">DDL 操作</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 创建数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="o">&lt;</span><span class="k">database</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="o">&lt;</span><span class="k">database</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 进入某个数据库</span>
</span></span><span class="line"><span class="cl"><span class="se">\c</span> &lt;database-name&gt;<span class="p">;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 创建表（添加约束）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">BIGSERIAL</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">first_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">last_name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">date_of_birth</span><span class="w"> </span><span class="nb">DATE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">country_of_birth</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">email</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">column</span><span class="w"> </span><span class="n">email</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除全表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="dml-操作">DML 操作</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 插入数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">first_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">last_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">date_of_birth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;Yu&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;ZHANG&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;MALE&#39;</span><span class="p">,</span><span class="w"> </span><span class="nb">DATE</span><span class="w"> </span><span class="s1">&#39;1997-06-06&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改数据内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">UPDATE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">email</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;ommar@gmail.com&#39;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除数据内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>可以使用 <code>ON CONFLICT</code> 关键字来处理冲突：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 当发生冲突时不进行操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">first_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">last_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">date_of_birth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;Yu&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;ZHANG&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;MALE&#39;</span><span class="p">,</span><span class="w"> </span><span class="nb">DATE</span><span class="w"> </span><span class="s1">&#39;1997-06-06&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">CONFLICT</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w"> </span><span class="k">DO</span><span class="w"> </span><span class="k">NOTHING</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 当发生冲突时更新指定字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">first_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">last_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gender</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">date_of_birth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;Yu&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;ZHANG&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;MALE&#39;</span><span class="p">,</span><span class="w"> </span><span class="nb">DATE</span><span class="w"> </span><span class="s1">&#39;1997-06-06&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">CONFLICT</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w"> </span><span class="k">DO</span><span class="w"> </span><span class="k">UPDATE</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">email</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">EXCLUDED</span><span class="p">.</span><span class="n">email</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="dql-操作">DQL 操作</h4>
<p>可以通过 <code>SELECT</code> 命令来对表进行查询，最常用的查看全表命令为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查看表的全部数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 查询数据（特定字段）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>可以通过 <code>WHERE</code> 关键字来进行条件查询、以及多个条件的组合查询：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（条件筛查，WHERE | AND | OR | 比较 &gt; | &gt;= | &lt; | &lt;= | = | &lt;&gt;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">gender</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MALE&#39;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">country_of_birth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;Poland&#39;</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="n">country_of_birth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;China&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p><code>IN</code>、<code>BETWEEN</code>、<code>LIKE</code> 和 <code>ILIKE</code> 也是一些可以很灵活用于查询的关键字。</p>
<p><code>IN</code> 可以帮助我们过滤某个字段的多个值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（使用 IN 关键词查询）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">country_of_birth</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;China&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;Brazil&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;France&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p><code>BETWEEN</code> 可以帮助我们过滤某个字段的一个范围。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（使用 BETWEEN 关键词查询）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">date_of_birth</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="nb">DATE</span><span class="w"> </span><span class="s1">&#39;2021-10-10&#39;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="s1">&#39;2022-08-31&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><code>LIKE</code> 可以帮助我们进行一些包含关系的模糊搜索，<code>%</code> 可以匹配任一个字符，<code>_</code> 可以匹配单个字符。而 <code>ILIKE</code> 则是不区分大小写的 <code>LIKE</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（使用 LIKE/ILIKE 关键词查询，_ | %）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">email</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@bloomberg.%&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">email</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;________@google.%&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">country_of_birth</span><span class="w"> </span><span class="k">ILIKE</span><span class="w"> </span><span class="s1">&#39;p%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>实际应用中，往往数据表的数据量非常庞大，会对数据根据相应条件进行分组，这就要用到 <code>GROUP BY</code> 关键字，以及 <code>HAVING</code> 用于进一步筛选条件。<code>GROUP BY</code> 需要配合聚合函数进行使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（使用 GROUP BY 关键词分组查询，使用 HAVING 关键词添加条件，使用 AS 对结果别名）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">country_of_birth</span><span class="p">,</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">country_of_birth</span><span class="w"> </span><span class="k">HAVING</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">country_of_birth</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>有时候我们只需要返回唯一值，而需要去掉重复数据，则可以使用 <code>DISTINCT</code> 关键字</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（去重）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">country_of_birth</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在实际应用中，还很有可能会需要对某些商品交易量进行排名、对一些数值进行排列或博客文章中按照时间线后进行顺序显示等，这就需要用到 <code>ORDER BY</code> 这一关键字，它默认为 <code>ASC</code> 升序排列，可以通过手动设置 <code>DESC</code> 来实现降序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（排序 ASC | DESC）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">country_of_birth</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>同时，有的数据库数据量非常大，一次返回所有的数据比较消耗资源，因此也可以使用 <code>LIMIT</code> 关键字来约束返回的记录数，同时可以使用 <code>OFFSET</code> 指定偏移量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询数据（指定数量与偏移量）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="k">FETCH</span><span class="w"> </span><span class="k">FIRST</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="k">ROW</span><span class="w"> </span><span class="k">ONLY</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="核心概念">核心概念</h3>
<h4 id="primary-key-主键">PRIMARY KEY 主键</h4>
<p>主键在数据表中的唯一身份记录，用以下命令创建与修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 添加主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">BIGSERIAL</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改主键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>其中主键通常会使用 <code>SERIAL/BIGSERIAL</code> 递增 <code>INT</code> 值，也可以使用 <code>UUID</code> 作为主键。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">UUID</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h4 id="foreign-key-外键">FOREIGN KEY 外键</h4>
<p>外键是一种特殊的主键，它是另一个表的主键，用以下命令创建与修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 添加外键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">BIGSERIAL</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">car_id</span><span class="w"> </span><span class="nb">BIGINT</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">car</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">UNIQUE</span><span class="p">(</span><span class="n">car_id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改外键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">car</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">BIGSERIAL</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><h4 id="join-联表查询">JOIN 联表查询</h4>
<p>联表查询是指在查询时，将多个表中的数据进行连接，以便查询出更多的信息。在 SQL 中，我们可以使用 <code>JOIN</code> 关键字来实现联表查询，使用 <code>LEFT JOIN</code> 关键字来实现左联表查询，使用 <code>RIGHT JOIN</code> 关键字来实现右联表查询。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- JOIN 联表查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">JOIN</span><span class="w"> </span><span class="n">car</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">car_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">car</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- LEFT JOIN 左联表查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">car</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">car_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">car</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span></code></pre></div><p>可以通过 <code>USING</code> 关键字来简化 <code>ON</code> 关键字的使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">car</span><span class="w"> </span><span class="k">USING</span><span class="w"> </span><span class="p">(</span><span class="n">car_id</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h4 id="约束">约束</h4>
<p>CONSTRAINT 约束是用来限制数据表中的数据的，我们可以通过以下命令来添加约束：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">gender_constraint</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">gender</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;Female&#39;</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="n">gender</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;Male&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>例如通过添加 <code>UNIQUE</code> 来显示唯一：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">BIGSERIAL</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">email</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="n">CONTRAINT</span><span class="w"> </span><span class="n">unique_email_address</span><span class="w"> </span><span class="k">UNIQUE</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="常用技巧">常用技巧</h3>
<h4 id="聚合函数">聚合函数</h4>
<p>内置了很多聚合函数，例如 <code>COUNT</code>、<code>SUM</code>、<code>AVG</code>、<code>MIN</code>、<code>MAX</code> 等，用于对数据进行聚合计算。</p>
<h4 id="coalesce">COALESCE</h4>
<p>在查询数据时我们可以使用 <code>COALESCE</code> 填充默认值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 使用 COALESCE 填充默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">COALESCE</span><span class="p">(</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;Email Not Provided&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="nullif">NULLIF</h4>
<p>使用 <code>NULLIF</code> 关键字，当第二个参数与第一个相同时返回 <code>NULL</code>，否则返回第一个参数，用于防止一些被除数为 <code>0</code> 的报错等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">COALESCE</span><span class="p">(</span><span class="mi">10</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="k">NULLIF</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h4 id="时间">时间</h4>
<p>时间的显示格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">NOW</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">NOW</span><span class="p">()::</span><span class="nb">DATE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">NOW</span><span class="p">()::</span><span class="n">TIME</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>我们可以对时间进行运算：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">NOW</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="nb">INTERVAL</span><span class="w"> </span><span class="s1">&#39;1 YEAR&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">NOW</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">INTERVAL</span><span class="w"> </span><span class="s1">&#39;10 MONTHS&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="p">(</span><span class="n">NOW</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="nb">INTERVAL</span><span class="w"> </span><span class="s1">&#39;3 DAYS&#39;</span><span class="p">)::</span><span class="nb">DATE</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>可以通过 <code>EXTRACT</code> 来获取时间的某个部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">EXTRACT</span><span class="p">(</span><span class="k">YEAR</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">NOW</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">EXTRACT</span><span class="p">(</span><span class="k">MONTH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">NOW</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">EXTRACT</span><span class="p">(</span><span class="k">DAY</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">NOW</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">DOW</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">NOW</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">CENTURY</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">NOW</span><span class="p">());</span><span class="w">
</span></span></span></code></pre></div><p>可以通过 <code>AGE</code> 关键字来计算年龄差值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="n">AGE</span><span class="p">(</span><span class="n">NOW</span><span class="p">(),</span><span class="w"> </span><span class="n">date_of_birth</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">person</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="拓展支持">拓展支持</h3>
<p>PostgreSQL 提供了许多拓展，以实现更丰富的功能。</p>
<h4 id="安装拓展">安装拓展</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="s2">&#34;uuid-ossp&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="查看拓展方法">查看拓展方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">df
</span></span></code></pre></div><h4 id="使用拓展方法">使用拓展方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">uuid_generate_v4</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我对 PostgreSQL 的基础知识与实用操作的讲解，希望对你有所帮助。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="http://www.postgresql.org">PostgreSQL 官网</a></li>
<li><a href="https://postgresapp.com">Postgres.app 官网</a></li>
<li><a href="https://tableplus.com">TablePlus 官网</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>周报 #10 - 重返过去、遗憾与当下</title><link>https://www.pseudoyu.com/en/2022/09/04/weekly_review_20220904/</link><pubDate>Sun, 04 Sep 2022 23:05:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/09/04/weekly_review_20220904/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-08-29 到 2022-09-04 这周生活的记录与思考。 发现以前拍的照片原片越堆越多，好多都没修，最近在慢慢整理。目前每篇封面图也都会</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0904_photo.png" alt="weekly_review_0904_photo"></p>
<p>本篇是对 <code>2022-08-29</code> 到 <code>2022-09-04</code> 这周生活的记录与思考。</p>
<p>发现以前拍的照片原片越堆越多，好多都没修，最近在慢慢整理。目前每篇封面图也都会选一张尽量符合主题的作品作为展示，看看后续能不能挑选一些作为特定主题的作品集。</p>
<p>挺意外从好几个现实里的朋友这里听说在 follow 我的周报，在聊天时讲到一些话题时会说“你在之前周报里提到过”，也有一位意料之外的人因为周报而恢复了一些联系，自己分享欲的载体慢慢在关联与影响着自己的现实生活，感觉很奇妙。</p>
<h2 id="重返过去遗憾与当下">重返过去、遗憾与当下</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/back_to_campus.jpg" alt="back_to_campus"></p>
<p>因为一段对话，周五度过了一个未眠之夜，很多学生时代的记忆不断浮现。</p>
<p>第二天实在有些心乱，于是重温了一部古早的日剧《求婚大作战》，大概是讲了男主通过照片重返过去来弥补遗憾，却发现不论怎么修补都无法改变结局，最终决定在现实中付诸行动的故事。</p>
<p>其实几年前看的时候一直有些疑惑，在多年后重拾以前的遗憾，去试图达到一个美好的结局是否真的有意义？换言之，这一切会不会只是对记忆滤镜映射出的美好想象的盲目追逐，就像那些用于穿越的照片所散发的青春与美好一样，存在于记忆中，也仅仅存在于记忆中。</p>
<h3 id="重返过去">重返过去</h3>
<p>不知道该说是幸运还是不幸，自己曾有过这样一段可以称之为“重返过去”的故事。故事倒并不复杂，初中时喜欢过的女生在大一时因为一些交集再次相遇，也许是重新燃起了一些莫名的情感，在一起了，一个多月后，又分开了。</p>
<p>可能因为一切都发生得太快，来不及留下什么美好，只有一条大意为“新鲜感不是和未知的人体验已知的事，而是和已知的人探索未知的事”的说说被遗忘在记忆的某个角落里。</p>
<p>其实那段感情结束带来的伤害早已不再重要，但它的存在本身却有其特殊的意义。初中的我大概是木讷而迟钝的，对她学不会隐藏自己的喜欢却也只会笨拙地表达，现实中并没有什么男主光环，自然也没有皆大欢喜的结果，但那确实是我第一次感受到了名为“喜欢”的情绪，而“巧”的是大学的这一次“续前缘”也是我的初次恋爱。</p>
<p>同一个人带上了两层不同的情感和意义，也许本应是一段佳话，“多年后弥补初次悸动的遗憾”这样百看不厌的爱情主题。但真正进入了这段感情后，却发现并不是如此，当初的喜欢经过了时间和成长的磨损后仅剩的一些执念也被这样的逞强所撕扯得支离破碎。</p>
<h3 id="遗憾与当下">遗憾与当下</h3>
<p>我们都不存在回到过去改变记忆的超能力，并且因为上述的经历，自己也一直有些害怕重蹈覆辙，我对待那些遗憾像是潘多拉魔盒一般谨慎。一直习惯于将过去的这些事尘封起来，有时候甚至久到觉得自己都已经忘记了，而因为一些事或言语牵动情绪时才发现依然清晰。</p>
<p>既然聊到这个话题了，我还想讲另一个故事，一个藏在记忆深处的悠长的故事。</p>
<p>高中文理分科后，进了文科班，一个陌生的环境。脸盲晚期的自己却莫名在第一时间记住了前排的一个小个子女生，笑起来很好看，第一次加好友时别致的“猜猜我是谁”也让我每每想起时都嘴角上扬。一个国庆假期的聊天让我们亲近了许多，一句本是玩笑话的“我打电话到你宿舍呀”让我之后好几个月的周末中午都充满期待。因为常常一聊就是几个小时，我会沿着运河边的小道一直走，踩在落叶上的沙沙声和电话听筒那端的温柔勾画了我记忆中最美好的一个秋天。</p>
<p>后来的记忆以陪伴为主线，夹杂着一些细碎却温暖的日常：每次晚自习下课后默契地一起在走廊看夜空，与喝着 QQ 星牛奶努力长高的她聊日常成为了一天里最幸福的时光；记得一次偶然听到她说一位同学带来的糖葫芦很好吃，不好意思开口问，于是在打探到的同学家住址附近走了几条街，终于根据包装袋找到了一样的，只为看到送到手边时惊喜却又故作淡定的小表情；记得一次学校办手工节义卖，我选了一个很喜欢的蓝色风铃填写了她的名字让他们送到班级，青涩的小心思伴随着风铃轻轻晃动；她 18 岁生日之前几个月我申请了走读，悄悄录制着她身边重要的人的祝福视频以及全班的留言录音，剪辑成一条现在看来可能无比粗糙但当时倾注了许多心意的视频，只是想让这个生日在她的人生中多几分特别；&hellip;</p>
<p>似乎只要与她有关，什么都好。</p>
<p>但世间美好往往带着遗憾匆匆收场，最后也没能在一起，让人感慨缘分之无情。</p>
<p>高考后，因为一些也许现在看来本可以释怀的事争吵、决裂、互删。尽管后来有问过分数和志愿，几番犹豫之后却鬼迷心窍地避开了所有与她有关的城市。直到大学才打听到了近况，恢复了一些联系，但已经都不是曾经的我们了。</p>
<p>其实那么多年一直没法云淡风轻地讲出这段故事，也一直畏惧着那些遗憾和衍生的情绪，直到这些记忆全在这个夜晚涌现，无眠。</p>
<p>过去的这些美好与遗憾造就了现在的自己，《求婚大作战》中的健选择了带着这些面对当下，而我选择写下来。勇气的表现各不相同，但至少，我们都迈出了第一步。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="工作">工作</h3>
<p>这周工作上主要在忙一个演示的排练，因为要系统操作演示+讲解共计一个多小时，对内容编排和临场应对都有一些考验，难免还是有点紧张，希望正式的时候能够顺利一些；其余时间都在了解新项目，还没正式进入我的开发任务部分，其实以前的时候也常常多任务并行，但大多是同类型，这次因为有很多需要额外了解学习的，略有些力不从心。</p>
<p>其他就是学了一下 PostgreSQL，就想着整理一下工作实践中用到的一些常用技术栈或是工具的使用，也可以作为一个查阅，就当作一个持续更新的系列吧（又是一个 Flag）。不知道什么时候才能更得心应手写一些深度的文章，还差得远呀。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>黑客与画家</strong>，通勤路上在读的，原本以为像是软技能那样的比较实际的一些内容，是当作路途消遣来看的，但是出乎意料地很多想法挺有趣，文风也很舒服，看了一半左右了，还有些沉浸</li>
<li><strong>送你一颗子弹</strong>，刚开始看，更多想学一下怎么样“审视”身边的人事物</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>彩排</strong>，看第一集的时候就有在想，参与彩排主角的人真的能以一个新的身份进入角色么？抑或是如果身处彩排其中的人逐渐分不清其和现实的界限会怎么样？很短也很有趣的走向，就像一开始就告诉你这是在表演，少了一些反转的期待却更容易被事情发展吸引到，滑滑梯下来的年龄转换有被惊艳到，以及很多长镜头</li>
<li><strong>求婚大作战</strong>，老剧，因为本周的一些事想到了高中时代，重温了一下这部剧，上次看应该也是大一大二了</li>
<li><strong>医院五日</strong>，讲到医学伦理部分，有些好奇在这样政治环境下的处理方式</li>
<li><strong>龙之家族</strong>，又追了一集，感觉快要弃了</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>奇巧计程车</strong>，群像的感觉很不错，围绕着一个主线的各个人之间都有关联。挺喜欢漫才组合的那条线，想到了好久之前看的日剧《火花》，觉得这个职业一直好有意思</li>
<li><strong>夏日重现</strong>，追番中</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，追番中</li>
</ul>
]]></content:encoded></item><item><title>周报 #09 - 没有色彩的 Yu 和他的巡礼之年</title><link>https://www.pseudoyu.com/en/2022/08/29/weekly_review_20220829/</link><pubDate>Mon, 29 Aug 2022 11:08:14 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/08/29/weekly_review_20220829/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-08-22 到 2022-08-28 这周生活的记录与思考。 这周工作上终于有了些变化，进入了另一个很感兴趣也更有挑战性的项目，感觉可以把之</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0829_photo.png" alt="weekly_review_0829_photo"></p>
<p>本篇是对 <code>2022-08-22</code> 到 <code>2022-08-28</code> 这周生活的记录与思考。</p>
<p>这周工作上终于有了些变化，进入了另一个很感兴趣也更有挑战性的项目，感觉可以把之前居家时候学的合约和底层链相关的都用上一点。周中有个挺亲近的同事离职了，比我早一周入职，我工作以来的第一个接口就是他教我写的，可能还没太习惯离别，有些感慨。</p>
<p>周末和推友 <a href="https://twitter.com/RealAkemiHomura">Homura</a> 面基了，是个有趣&amp;可爱的男孩子，聊了很多，有很多想法和爱好相近的地方，很开心的体验。大概因为之前不打网游也不怎么发社交媒体，自己好像不太会结识网友，也算是最近的一个小改变了（社恐康复治疗），也决定之后多出门拍照和让生活更丰富一些。</p>
<p>另外就是看了不少书，逐渐也在生活的正轨上了，很巧（或是隐隐有些倾向）的是这周在看的两本书和联想到的剧都是讲述一个普通人的生活与想法，引申了很多思考，关于有趣、平凡与自我。</p>
<p>另外还因为 <a href="https://twitter.com/Manjusaka_Lee">Manjusaka</a> 的一条推勾起了一些记忆以及对慈善和善意的一些思考。</p>
<h2 id="没有色彩的-yu-和他的巡礼之年">没有色彩的 Yu 和他的巡礼之年</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/no_color_people.png" alt="no_color_people"></p>
<p>这个标题取自村上春树的『<a href="https://book.douban.com/subject/25733470/">没有色彩的多崎作和他的巡礼之年</a>』，很长又略些不知所云的名字。这本书是在和 Humura 面基的时候约在了书店，瞥到了他在看村上的『<a href="https://book.douban.com/subject/30144095/">海边的卡夫卡</a>』，突然想到之前想补一下村上的书。</p>
<p>之前看『<a href="https://book.douban.com/subject/10529920/">1Q84</a>』和『<a href="https://book.douban.com/subject/27200257/">挪威的森林</a>』这两部的时候就挺喜欢他的文风，感觉平实而有些娓娓道来的韵味，夹杂着一些充满想象力的比喻。但我最喜欢的还是他的杂文札记，在『<a href="https://book.douban.com/subject/3369600/">当我谈跑步时我谈些什么</a>』的很多思考耐人寻味，看完后也有动力坚持跑了一个寒假的步。</p>
<p>北京的万圣书园外面很破败，甚至对着地图确认了好几遍才在旁边的一个不起眼的地方找到入口，进去后四处都是书架，摆放算不上有序但也不缺美感，顺着同样在旁边的一个小角落里发现的入口拐了几个弯才发现文学区，“别有洞天”可能是最好的形容，很有趣的地方，也让我联想到了香港的很多旧书店。</p>
<p>一下就看到村上的书所在的书架，随意选了这本『<a href="https://book.douban.com/subject/25733470/">没有色彩的多崎作和他的巡礼之年</a>』，还顺便拿了一本『<a href="https://book.douban.com/subject/26889236/">我的职业是小说家</a>』。犹豫了一下还是决定先看前者，不知所云的名字让人多了一丝好奇，下午的时光也是小说更容易打发，初读了几页，嗯，还是熟悉的味道。</p>
<p>尽管读得匆匆，看小说也没有太多记笔记的习惯，但还是记住了几个很有趣的点。首先就是对名字的释义与探究，父母为他取名时纠结于“多崎作”与“多崎创”，后来选了前者，仅需做到“制作”便好，不希望施以“创造”的压力，本已经有了不错的寓意，但因为他所在的小群体中其他四人以及后续结交的挚友的名字都巧合地包含了颜色词：“赤”、“青”、“黑”、“白”、“灰”，让他感觉自己就像是一个没有个性的存在，连带着没有色彩的人生。</p>
<p>其实关于自己名字的埋怨常常有，『<a href="https://movie.douban.com/subject/26302614/">请回答 1988</a>』里德善也有向父母埋怨自己的名字毫无特色，不如姐姐宝拉。我也曾有过这样的想法，似乎自己的名字简短而没有特色，再加上也是几个大姓之一，常常在一个学校遇到不少同名的人，与之相伴的就是自己常常也需要额外努力才能留下更多记忆点。</p>
<p>虽然后续也和自己和解了，但似乎还总是感觉自己的生活与有趣已经无缘了。总是羡慕别人的有趣个性和经历，也常常在即使自己做得不错时也只是觉得在履行自己平凡人生的职责或是这些都并不属于自己，心理学有个症状定义叫“冒名顶替综合症”似乎很贴切地描述了这一点。之前看过一篇关于工程师素养的文章中提到过这一点：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/imposter_syndrone.jpeg" alt="imposter_syndrone"></p>
<p>而随着年岁和经历的增长这种倾向似乎愈演愈烈，追寻有趣也成为了一个虚无缥缈的执念，但即使是他人评论是个经历丰富或是有意思的人也总是将信将疑。书中描述的多崎作似乎也处在这样的状态中，其实又在做自己一直很感兴趣的车站建造工作，却依然觉得自己缺失了什么，就会将其归咎于自己的缺乏色彩。</p>
<p>人在各个阶段似乎总是会有抱团的倾向，而一旦依赖于一个群体又不免遭受来自关系的压力与挫折。大学时我曾有这样一个四人小团体，两男两女，总是形影不离，到辅导员或是同学发现缺人都会很自然地询问其余的人。</p>
<p>但我在一段时间后感受到了明显的压力，剩下三位似乎是更风云一点的人物，总是在人群中耀眼的那一个，而我却似乎总是缺乏存在感，而内心又不想成为这样出于习惯而依附其中的多余之人。于是我开始刻意回避和逃离，当然，表现拙劣的我并不懂如何隐藏，很快就被察觉。</p>
<p>可以说比起多崎作我是幸运的，没有被抛弃，也没有什么误会，另外三位在一个夜晚把我堵在男生宿舍楼下让我讲出心结，并逐一进行排解，关于个性和存在感的回应我可能依旧觉得是安慰，但有感受到自己有被这段关系和模式所需要，自己的情绪有被他们所认真看待，我们的关系有被珍惜。即使后续因为城市和很多原因已经少有共同行动的机会了，但是依然有着不错的联系，以及到了任一成员所在的城市所首先会想到的人。</p>
<p>目前也处于另一段三人的关系中，两位初中挚友，可能就定义上来说算不上发小但亲近更甚。因为分开于三地，常常也会思考这段关系的立足点、走向以及平衡，尽管慢慢会有一些变化，也有不少未来需要面对的部分，但也逐渐愿意为之努力和探索更多。</p>
<p>『<a href="https://book.douban.com/subject/26425831/">斯通纳</a>』其实也描述了许多关于生活的平凡与人格的完善这一块，不过话题比较庞大，可能以后会结合着『<a href="https://movie.douban.com/subject/33477335/">Normal People</a>』一起讲讲。</p>
<h2 id="善意与慈善">善意与慈善</h2>
<p>上周看到 <a href="https://twitter.com/Manjusaka_Lee">Manjusaka</a> 发的一条推文：</p>
<blockquote>
<p>一个好消息和大家分享一下</p>
</blockquote>
<blockquote>
<p>我妹子和我一起资助的一个大凉山的学生，比较顺利的考上了东部沿海一个还不错的公立大专。算是迈出了走出来的第一步，虽然对于很多人来说大专不值得一提，但是对于大凉山的孩子来说，这一步已经需要付出太多的努力</p>
</blockquote>
<blockquote>
<p>欢迎大家一起来资助学生，毕竟</p>
</blockquote>
<blockquote>
<p>#教育是最好的公益</p>
</blockquote>
<p>后来也了解了一下『<a href="http://www.one-school.org">壹个村小</a>』这个组织，打算后续关注一下通过一对一的方式援助一位。</p>
<p>其实我很难将自己这些举动赋予“慈善”这样高尚含义，自己也曾有过以之为炫耀或是谈资的时候。</p>
<p>高考结束那年和挚友去了湖南的一个山村支教，参加了一些活动、教了一些课、结识了一群可爱的小朋友，然后匆匆离去。后来大学开始的时候一次在班群讨论过关于支教的事，当时我讲了这段经历（或许带着一些隐隐的自豪，“看！我还做过这样的事”），有一位同学回复让我印象深刻，具体的言辞记不清了，大意是质问我是否想过这样一波一波的支教老师似乎带着自己的目的去让那些孩子看到了外面的世界、给予了他们更多的想象和温暖，然而却匆匆离开，可能再也不会回到这个地方，生活也不会再与之交轨，比起这短暂传递的所谓“知识”，究竟是益处更多还是伤害更大。</p>
<p>后面大家的议论我记不清了，我想我无非是还带着对那些孩子们的不舍之情说了“我之后有机会会再去看他们的”这样的话。那时是 2015 年，7 年过去了，我再也没有回去过，她是对的。</p>
<p>后面自己很小心翼翼地对待这样的事，也不再敢称什么慈善，生怕自己出于虚荣做出这样自我满足的事。记忆里也就是在系里支教团号召捐钱买冬衣的时候略多出一些以尽绵薄。</p>
<p>这次看到了 Manjusaka 的这条推，感受到了由衷的开心，也希望自己也能以这样的方式多做一些什么吧。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>工作、消费主义与新穷人</strong>，不论是在工作伦理时代还是后来的消费主义，即使加上了伦理、道德这样冠冕堂皇的措辞，穷人终究仅仅是一个符号而从未被当作一个群体来正视，不断变化的规则秩序或是不同的态度也只是每个社会选择了它在那个阶段偏爱或允许的方式，即使赋予了穷人“价值”也不过是居高临下的施舍。</li>
<li><strong>九宫格写作法</strong>，一本小书，精简且文风很有吸引力，之前自己其实一直不爱看这类“如何阅读/写作”这样的书，但随着自己开始博客更新后也常常感受到表达方式的局限，很有启发，尤其是在信息收集与整理这一块，在自己的实践上结合 Logseq 的每日记录各种想法，能为写作增加很多思路。</li>
<li><strong>斯通纳</strong>，高中时草草读过一遍，最近重读又有很多新的感受。不知道是不是因为设定都是文学专业，读的时候联想到了 Normal People 普通人，前两年很火的剧。大概一个普通人的一生总是这样琐碎且真实，学业、爱情、婚姻无不充满着破碎感，无力改变却又认真地生活着。最近越来越喜欢这样朴素笔触下的平淡人生和它传达出来的生活态度，大概慢慢也老了（虽然这么讲有些矫情</li>
<li><strong>没有色彩的多崎作和他的巡礼之年</strong>，最近难得的一口气读完的实体书，村上的文字常常有这样的魔力，似乎只是在描述一些琐事和心里的杂念，却又吸引着人去探究各个元素之间的关联。这本书主要关于友谊的破碎以及失去。不禁联想到我所在的一个三人小群体，寄托了过多依赖的自己也许已经无法承受失去的代价了，只是随着生活与时间流逝我们所需要面对的也更多了。</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>医院五日</strong>，看了一半多，讲美国卡特里娜飓风时候的一些事，难免不让人联想到武汉疫情当时的一些事</li>
<li><strong>龙之家族</strong>，权游前传，目前看了一集观感一般</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>隐入尘烟</strong>，第一感觉想到了无依之地，紧接着是活着。雨中那一段既感动又心疼，默默祈祷着苦难不要降临，却也于事无补。但静静看完的两个小时里观感上并没有太多渲染苦难的痕迹，大概这就是中国人真实的苦难本身的样子，一代又一代人地重蹈覆辙。</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，甚至有些舍不得结束了，很难得到了 20 集还在期待后续发展的番，千万别烂尾</li>
</ul>
<h4 id="游戏">游戏</h4>
<ul>
<li><strong>八方旅人</strong>，工作日晚上闲暇的时候打了一会儿，高清马赛克的体验还是挺不错的</li>
<li><strong>极乐迪斯科</strong>，这周生病了，停滞了没玩</li>
</ul>
]]></content:encoded></item><item><title>周报 #08 - 职业杂谈、404 Not Found 与猫</title><link>https://www.pseudoyu.com/en/2022/08/22/weekly_review_20220822/</link><pubDate>Mon, 22 Aug 2022 10:22:14 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/08/22/weekly_review_20220822/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-08-16 到 2022-08-21 这周生活的记录与思考。这周工作上依然没那么紧，周中也有了更多时间跟同事交流和聚餐，回家后的时间并不多</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/weekly_review_0822_photo.png" alt="weekly_review_0822_photo"></p>
<p>本篇是对 <code>2022-08-16</code> 到 <code>2022-08-21</code> 这周生活的记录与思考。这周工作上依然没那么紧，周中也有了更多时间跟同事交流和聚餐，回家后的时间并不多，所以整体也算休闲。感觉七八月就像是之前放暑假一样，心态上也没有什么负罪感。不过还是读了一些书，并且把阅读时间、频率和方式都更规律化了一点。</p>
<p>周中在感情上（可能也有些难再冠之以感情，记忆吧）发生了一些令人低落的事，经过了几天的调整略缓过来一些。对自己的状态有些担心，可能也有在认真地考虑是不是要（再）养一只猫。</p>
<h2 id="职业杂谈">职业杂谈</h2>
<p>上周听了这期『<a href="https://pan.icu/65">65. 内核恐慌 × 枫言枫语：如果不做程序员我们会做什么？</a>』，还挺有感触的。和各位嘉宾不同，其实自己走上程序员这条路才算是阴差阳错，之前并不算长的人生里也经历过数次转折，就像一条条不同的世界线，也常常会想另一个平行世界的自己是过得更开心还是同样迷茫。</p>
<p>其实自己一直也算不上什么大理想，自小就没有成为“xx 学家”的梦，更真实的倒是有过一段时间想做老师，但在与一个并不友善的小学班主任共度几年之后早已失去了大半兴致，不是说老师这个职业不好，只是害怕自己成为这样的大人。</p>
<p>在高中时随着读书写作变多了，也萌生过成为独立作家或者记者的梦，或许有带着稚气的一些正义感和英雄主义，但总的来说当时没有多宏大或是高尚的想法，如想要“振兴中华文坛”或是“揭露社会丑恶”，而只是单纯地觉得，能把读书和写作兼为自己的爱好和职业该是一件多幸福的事呀。</p>
<p>高考后参加的一个国际支教团中也见到了真正的国际记者，填充了自己对于未来职业的想象。只是随着年龄见长，才慢慢觉得对于成为作家而已自己少了一些想象力，而作为记者似乎又缺了一些勇气。这大概也是成长的代价吧，已经不再能大声说出自己的所谓“理想”了，也不得不承认并面对自己力有不逮之处。</p>
<p>调剂到了英语专业算是万幸，或多或少在我迷茫未来的时候没有觉得自己是在虚度时光。大一大二时并没有思考那么多未来的事，只是在闲暇之时不断学 ps、pr 等各种软件，活跃在各个社团组织里，做文科学院里所谓的“技术宅”。</p>
<p>大多软件的使用逻辑并不复杂，“我亦无他, 唯手熟尔”。慢慢地萌生了一个想法，比起“使用”，是不是“创造”可能更有趣一些？于是从 Python 开始学代码，走了很多弯路，也经历过学了几个月依然只会课后习题，做不出什么完整项目的阶段，慢慢摸索至今才勉强摸到了一些门槛。</p>
<p>那时也并没有把其作为自己的职业目标，可能仅仅觉得自己在做一件挺有趣也很酷的事。到了大三时候一时兴起开始学摄影，买了一台 Sony A7M3 微单（陪伴我至今），一边实习出差一边记录一些风景人文。</p>
<p>当时教我摄影的师父是一位深度记者兼纪录片导演，其实并不会教我构图原理或是参数怎么调这样的基础，而是潜移默化地向我传达即使是一张简单的照片，在拍摄的时候也一定要在心里构思一个主题，就像是含蓄地讲一个故事一样，所有构图、色调或是效果都需要为这个故事服务，这一点持续影响着我。</p>
<p>实习结束后回到学校开办了自己的视频工作室，承接一些宣传视频与在线课程的录制剪辑，从打光、布景、绿幕等开始，以一个最小工作流体验了这个行业的各个方面，其实也萌生过是否要将其作为职业的念头，只是最终还是觉得乐趣不足，遂放弃了。</p>
<p>临近毕业时一直有考虑从事产品经理一职，也了解和体验了一些相关工作，后来依然觉得自己的兴趣是在“创造”与自己真正完成一件事的满足感，而不是在设计与勾画蓝图（同时依然觉得自己缺乏足够的创意），依然没走下去。</p>
<p>最后跨专业出去留学，回来成为了一名还算合格的程序员。这就是我目前的职业之路，尽管有很多轻描淡写的部分，但各个阶段也真切地体会到了迷茫、挣扎、沮丧等各种感受，能走到现在有幸运有付出的回馈，也让我倍感珍惜。并不能确信自己以后会一直会做程序员，但应该或多或少都会与 Coding 有关，毕竟这是我迄今做过的最有意思的事，还有着无尽的探索空间。故事还在继续，谁又不想体验更多元有趣的生活模式呢？</p>
<h2 id="404-not-found">404 Not Found</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dino.gif" alt="dino"></p>
<p>这可能是一个有些不知所云的标题。</p>
<p>在网页中，如果内容已经不存在了，一般会显示一个“404 Not Found”页面以起到告知作用。我一直觉得这还挺酷的，之前有把自己随身带的用来装充电宝的包选了 404 的图标样式，也有一段时间把自己的介绍页面加上了 Google 的小恐龙动画（Google Chrome 浏览器在访问网站出问题时会有一个离线的跳跃类小游戏，让访问者等待之时有一些乐趣）。</p>
<p>大概一直觉得自己在某种意义上是一个容错率很高的人，能够坦然甚至玩笑的方式看待一些小错误插曲，有常常自豪这样的心态。直到，我的感情 404 Not Found 了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/misty_blog_404_not_found.png" alt="misty_blog_404_not_found"></p>
<p>其实自己也并不是没有发现一些被清理或是解除关联的痕迹，也在一天天逝去的时间里在逐渐接受了一些现实，只是当 404 的提示出现在眼前时才发现刺痛感比自己想象得强得多，也撕开了我那么多天伪装的坚强。</p>
<p>我一向来看待感情比起其他事物要乐观得多的，至此也不得不承认感情自带的悲剧属性，曾经的甜成为了如今束缚自己的布满荆棘的牢笼，不去触碰就不会受伤，也失去了迈出去的勇气。</p>
<h2 id="猫">猫</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_cat_xiao_shu.jpeg" alt="my_cat_xiao_shu"></p>
<p>实话说和她一起之前自己并没有想过养猫，大概是觉得连自己都照顾不好的人又怎么有资格对另一个生灵负责，但当真正家里多了一个成员时也才渐渐发现自己享受于这种依赖与被依赖，似乎生活也多了很多目标。</p>
<p>她离开后，小薯一并被带走了，虽然常常也跟朋友无奈地玩笑说自己“人猫两空”了，但也心知自己之前的照顾确实不如她，这样的选择也无可厚非，只是每次忆及从前又多了一倍的难过。</p>
<p>昨晚看了『<a href="http://movie.douban.com/subject/36033619/">喵星人的奇思妙想</a>』纪录片后也更多了解了之前忽略的很多猫的想法和相处细节，也隐隐萌生出是不是要自己再养一只猫的念头。只是这就像是对小薯的一种背叛，自己也依然没能做好这个心理准备去再次去好好对待一个新的成员，而在自己需要的时候迎接一个新的成员于人于己都很难说是一个负责任的选择。</p>
<p>也许未来某一天吧。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="学习">学习</h3>
<p>这周也还是陆续在按计划看一些学习课程资料，也终于把智能合约这块的课程追完了（32 小时，好长！），不过后面因为已经熟悉了合约，而且很多重复性的代码，就比较少之间上手跟着写了，打算这周看项目源码作一些分析，所以这两周的代码量也少得可怜，都快成为一个 Markdown 工程师了。</p>
<h3 id="博客相关">博客相关</h3>
<p>之前写的那篇 Stablecoin 相关的还是有一些要修改的，但后半期因为自己状态的影响还没修改，这几天需要调整完善一下了，剩下这周继续完成以下几篇博文（拖了好久了还没动笔）：</p>
<ol>
<li>Cosmos 原理与架构</li>
<li>Docker 基础与实践</li>
<li>k8s 基础与实践</li>
</ol>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<p>这周把之前遥远的 Kindle Oasis 2 翻出来了，清理了一下帐号和书籍分类，只留了”To Read“、“Reading”、“Read”三个分类，基本与豆瓣同步，这样每天通勤能看 50 分钟左右，有时候在家也能看一点，也比手机看电子书更有沉浸感和护眼一些。</p>
<ul>
<li><strong>蒂姆库克传</strong>，看完了，书是一般，感觉更多就是信息的堆砌，但是确实让我更多了解到了乔布斯之后的苹果与它践行的价值观</li>
<li><strong>工作、消费主义与新穷人</strong>，一本很有意思的书，读了两个章节了，对自己最近工作状态的一些思考还挺有启发的</li>
<li><strong>九宫格写作法</strong>，<a href="https://lutaonan.com/blog/read-grid-writing-method/">Randy 推荐的一本小书</a>，这周读一下</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>非常律师禹英禑</strong>，原先只是看了一个剪辑觉得女主很可爱所以追的剧，竟然完整等周更看完了，自闭症律师是一个挺新的切入点，难能可贵的也并没有仅仅是渲染女主的幸运，也包含到了其他自闭症相关的案子，主线剧情不多但男女主的感情线挺清新自然</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>稍微想起一点</strong>，虽然自己还没有到可以很平静地看爱情片的程度，但也算沉浸其中了。能看到一些类似花束中描述的场景与模样，但是少了几分刻意渲染的缘分和矫情，多了一些融在言语举止里的过去与现在的牵绊。另外，深夜的日式街景真的完全满足了我对美好缘分的一切幻想，想去</li>
<li><strong>喵星人的奇思妙想</strong>，有点了解到了猫的一些想法，也能感受到拥有过又抽离出生活后的痛苦，有点考虑等略调整之后再养猫了（总有一些莫名的背叛感）</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>英雄联盟：双城之战</strong>，刚出的时候就想看，结果到现在才补，算是近几年看过的动画里在画面、剧情、节奏和配乐的巅峰了，虽然我不玩英雄联盟，可能少了些对人物剧情的触动，但也能看到一个很好的故事和与之匹配的宏大的世界观，期待下一季了</li>
<li><strong>夏日重现</strong>，越来越精彩了</li>
</ul>
<h4 id="游戏">游戏</h4>
<p>突然发现豆瓣还有记录游戏的功能，修改了一下自己 n8n 的自动化脚本，添加了游戏记录同步的功能，之后也想在自己的日常生活里添加一些能够放松的部分。</p>
<ul>
<li><strong>极乐迪斯科</strong>，算是前两年很有名的文学游戏了，制作人是几个作家。之前在 Steam 上玩了一点但是记录没留存了，最近买了 Switch 卡带版好好玩一下，顺便作为收藏，大概玩了两三个小时了，被画风和背后的一些思考吸引了，慢慢玩，也想写点东西</li>
</ul>
]]></content:encoded></item><item><title>周报 #07 - 学习、考证与工作追求</title><link>https://www.pseudoyu.com/en/2022/08/15/weekly_review_20220815/</link><pubDate>Mon, 15 Aug 2022 12:36:14 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/08/15/weekly_review_20220815/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-08-08 到 2022-08-15 这周生活的记录与思考。这周的工作还是筹备项目需要参加的一个测评，主要是方案讲解，下班时间都还算正常，</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>本篇是对 <code>2022-08-08</code> 到 <code>2022-08-15</code> 这周生活的记录与思考。这周的工作还是筹备项目需要参加的一个测评，主要是方案讲解，下班时间都还算正常，也渐渐恢复了不错的生活节奏。</p>
<p>但是感觉下班回家宅习惯了后就很缺乏出门的动力，原定的练习滑板和夜跑也都暂搁了，不过比起之前也还是出门了几次，工作日几个晚上有聚餐，周末去了趟南锣鼓巷，晚上还去了什刹海散步，一直觉得这个地名很美，终于得以一见。</p>
<p>经过了上周的调整，这周也安排进了不少学习计划，并且决定通过考一个证书来检验自己的学习，也算是一种外部激励吧。其他就是与几个朋友聊了一下关于工作调整、远程工作与工作追求相关的事。</p>
<h2 id="学习与考证">学习与考证</h2>
<p>之前的两个工作项目里就经常有用到 docker 与 k8s，对他们的基本命令与配置文件编写都比较熟悉，但一直没有对它们的架构与技术细节有系统性学习，上周看了 YouTube 上『<a href="https://www.techworld-with-nana.com">TechWorld with Nana</a>』频道的一些讲解，补齐了很多知识盲点。</p>
<p>但是因为 k8s 涉及到的组件和操作太多，稍一阵子不用就会忘记，而且不上手练习也不利于记忆，然后自己也对 Devops 这一块很感兴趣，经常折腾一些自动化工具和 Serverless 应用。于是打算更系统地学习一下，考一个 Certified Kubernetes Application Developer （CKAD）认证，一个由 CNCF 与 Linux 基金会共同开发的认证项目。这个项目主要面向开发者，涉及了很多知识点：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ckad_topics.png" alt="ckad_topics"></p>
<p>比较特殊的是这个认证考试最后是 19 道上机实操题，也可以查看 k8s 官方文档，没有什么需要死记硬背的部分，很适合作为学习成果的检验。买了 Udemy 平台的『<a href="https://www.udemy.com/course/certified-kubernetes-application-developer/">Kubernetes Certified Application Developer (CKAD) with Tests</a>』，最近就一直沉浸在刷它附带的 Lab，因为是一个在线环境就很方便，找回了当时读书的时候写作业赶 due 的心境。</p>
<p>其实我大学时候好像莫名地考过不少证，印象比较深的是一个软考中级（软件设计师）证书，因为上午考理论综合，下午考实务，通过率也只有 30%不到，刚报考时很紧张，早早地买了书和各种资料，但是一直拖延，直到只剩半个月了才开始紧急预习和刷题，最后压分通过了。因为大学时候是非科班 CS，那次考试最深的体验就是在备考过程对软件工程、操作系统、计算机组成原理以及各个编程语言都有了比较系统的认识，也给后面跨专业学习提供了很多帮助。</p>
<p>后来因为本科主修的是英语专业，也考了英语专业四级、英语专业八级、雅思等，越来越感知到学习目标与计划对于了解一个新领域或掌握一个新知识的重要性，跟之前提到的面向周报或面向博客学习的模式也类似，有一个产出标准会会让自己在学习的过程中能更体系化，思路也会更清晰。最近的应该就是 CKAD 和日语 N2 了吧，其他的可以再探索一下（不过有的认证真的好贵）。</p>
<h2 id="工作与状态调整">工作与状态调整</h2>
<p>这周和两个朋友聊了一下工作相关的事宜，一位正在换工作，来了解一些 web3 相关的资讯，另一位近几个月刚进入 web3 团队工作，采访了他们的一些对于工作的想法，很羡慕，也觉得很有意思：</p>
<blockquote>
<p>“可以认识更多有热情/有趣的人”</p>
</blockquote>
<blockquote>
<p>“我现在也不午睡了，更愿意去把工作的事情做好，甚至感觉这不是工作”</p>
</blockquote>
<blockquote>
<p>“讲究主动性，同时也有挑战”</p>
</blockquote>
<blockquote>
<p>“开会也少，自由度也够，写代码有时不知不觉写到凌晨一两点，久违的感觉”</p>
</blockquote>
<p>可以从字里行间感受到他们的热爱与期待，除了作为谋生赚钱的工具外，他们对工作氛围、模式与内容也有自己的追求与想法，这也很大程度影响到了我对日后工作的一些定义与标准。</p>
<p>这几天的学习和工作状态有所缓解，但睡眠依旧有些糟糕，常常有断断续续的梦境，夹杂着不少过去的记忆，真实到醒来后依然很难缓过来。体检要开始预约了，想在八月完成。</p>
<h2 id="其他">其他</h2>
<p>这个部分会记录一下自己的输入输出以及其他觉得有意思的东西。</p>
<h3 id="学习">学习</h3>
<p>如上文所述，这周主要是在学习 Devops 这一块以及备考 CKAD，同时对 GitLab CI/CD、GitHub Action、Ansible 等自动部署、运维工具做了一些学习记录，还在整理。</p>
<p>另外把修图（Adobe Photoshop + Affinity Photo）和剪辑（Final Cut Pro X + Davince Resolve）这一些技能点重新捡起来，开始慢慢重新计划自己的一些生活记录了。</p>
<h3 id="博客相关">博客相关</h3>
<p>在拖了我的少数派编辑一个多月的稿（并且还已读不回）后，我终于良心发现，把之前约稿的那篇 Stablecoin（稳定币）相关的文章写好初稿发过去了，再根据反馈进行一些修改补充就可以了，感觉心里一块大石头放下了。</p>
<p>之前写的那篇『<a href="https://www.pseudoyu.com/en/2022/07/05/access_your_local_devices_using_reverse_proxy_tool_frp/">基于 frp 内网穿透的瘦客户端开发工作流</a>』终于在这周发布了，被收录在<a href="https://sspai.com/prime/story/thin-client-solution-with-frp">会员专享</a>内容中，也是一个小小成就了。</p>
<p>剩下这周继续完成以下几篇博文（可能更多是对实践的笔记吧）：</p>
<ol>
<li>Cosmos 原理与架构</li>
<li>Docker 基础与实践</li>
<li>k8s 基础与实践</li>
</ol>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>蒂姆库克传</strong>，快看完了，感觉也更深入了解到了苹果产品背后的一些理念和哲学</li>
</ul>
<h4 id="剧集">剧集</h4>
<ul>
<li><strong>非常律师禹英禑</strong>，开始虐了，也有了一些剧情冲突点，小鲸鱼也是真的可爱</li>
<li><strong>石子和羽男-这种事情也好告么？</strong>，一个新日剧，也是律政题材的，其实对男主人设比较无感，但因为女主是有村架纯，有想看的理由</li>
</ul>
<h4 id="电影">电影</h4>
<ul>
<li><strong>分手的决心</strong>，镜头语言和整体节奏感很舒服，对犯罪和心理的描述占据了绝大部分，但剧情发展和心态变化上缺少了一些呈现，乐趣就是在其中找苹果设备的各种用法了</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，继续蹲后面的剧情发展</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，我是还挺喜欢这种恋爱番的</li>
</ul>
]]></content:encoded></item><item><title>周报 #06 - 真诚、游戏与自我调整</title><link>https://www.pseudoyu.com/en/2022/08/07/weekly_review_20220807/</link><pubDate>Sun, 07 Aug 2022 18:28:24 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/08/07/weekly_review_20220807/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-08-01 到 2022-08-07 这周生活的记录与思考。就工作节奏而言远远算不上忙碌，甚至有几天久违地 7 点多就到了家，空出来的闲暇时间</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_switch_games.jpg" alt="yu_switch_games"></p>
<p>本篇是对 <code>2022-08-01</code> 到 <code>2022-08-07</code> 这周生活的记录与思考。就工作节奏而言远远算不上忙碌，甚至有几天久违地 7 点多就到了家，空出来的闲暇时间让我有了更多时间思考自己的人格与生活状态，也能够将之前很多细碎的思绪好好梳理一下。</p>
<h2 id="真诚">真诚</h2>
<p>周末得知一位挚友遭遇了人际关系的困境，也共同回顾分析了其中涉及人格、个人气质、沟通、思维方式等各个方面的缘由，而『真诚』这一特质则是贯穿其中的核心因素，加上前几周对与人际和沟通方面的梳理，浅谈一下自己的思考。</p>
<h3 id="人际关系的困境">人际关系的困境</h3>
<p>随着年岁的增长和自己内化在性格中的特质影响，我挺乐于为他人、尤其是亲近的人付出，也自认为自己在过去的经历中践行了这一点。但后来发生的一些事让自己渐渐意识到，我似乎一直以来把人际关系的界限划分得很明白，家人、爱人、挚友、其他朋友、不会深交的人、陌生人等等，尽管可能并没有那么多主观意识或功利考虑，但总是有潜藏其中的优先级存在。在绝大多数与他人的沟通中我可能也仅仅是做到了真实或是不虚伪逢迎，而真诚这一步常常难以迈出。</p>
<p>从所谓的社交标准或是从他人身上获取的正反馈来看，似乎已经很足够，让我常常质疑是不是人与人相识之初可能就是有这样固有的一条线，想达到并不难，友善似乎就已经符合了几乎所有关系建立的基础，而想要跨过则需要成倍的付出，而自己则往往止步于此，似乎到了某个临界之时，就会有个声音告诉自己，需要为这段关系所做的也就只此而已，够了。</p>
<h3 id="自我">自我</h3>
<p>后来一次与挚友的争吵让自己意识到了这种思维方式背后隐藏的自以为是与自我满足的部分，甚至会很潜移默化地影响了自己的行为方式与思考优先级。意识到这一点后，自己也经历了一些调整与变化，逐渐不那么在意互相付出的比重，开始更多在与他人的相处中对于他人所需要的与自己所能做到的部分作下意识地思考，不管是在沟通还是相处上，都在之前的习惯之余上多走一步，也收到了一些真诚的反馈，但是依然觉得在自己内心真诚的部分还是很难做到很好。</p>
<h3 id="对真诚的思考">对真诚的思考</h3>
<p>可能是出于不安全感与内心的防备，我常常觉得自己别人对于自己友好的部分很大程度是对自己友好姿态的一种等价回馈。而我自己内心其实也是有很多冷漠的因素存在的，并不是能一直充满热情地全心全意付出，有时候会觉得自己像是一个置身事外的观察家，看着自己的所作所为与其得到的对应反馈，并且在过程中实现自己在与他人相处过程中的“优化”。</p>
<p>要说有什么恶意或是功利性的目的倒也不至于，只是在审视自己时总有一些奇奇怪怪的想法，但时间久了有些难以感受到对方言谈或是反馈中的真诚的部分，也先入为主地很难区分究竟是出去感谢还是纯粹的情绪。</p>
<p>慢慢地，自己变得只会对这些对象才能放下心防：</p>
<ul>
<li>一直陪伴着自己的以家人相待的挚友</li>
<li>感情中自己毫无防备付出的对象</li>
<li>共同度过艰难时刻的朋友（可能是糟糕的状态、崩溃的情绪等）</li>
</ul>
<p>其实共性就是自己都曾主动在他们面前展现过极度脆弱敏感或是糟糕的一面，却被信任与接纳，并让自己在某个阶段意识到了自己依赖于这样的真诚陪伴。也许是对于这一点太过苛刻，抑或是自己已经并不那么习惯于在一段新的关系中倾注太多真诚，总觉得自己在情感上变得越来越消极和迟钝，也常常不再有更多期待，这也是我目前面临的最大困境。关于真诚与相处的思考与探讨仍在继续，希望能有所缓和。</p>
<h2 id="游戏">游戏</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_game_gallery.png" alt="yu_game_gallery"></p>
<p>这周其实并没有玩游戏，但想谈谈“游戏”。</p>
<p>游戏于我而言是既熟悉又陌生的一个事物。小时候的我是任天堂的死忠粉，一个 GameBoy，几盘宝可梦（当时还叫口袋妖怪）卡带几乎陪我度过了整个童年，各个版本都通关过无数次，对各种游戏内的收藏如数家珍；即使到了初高中依然常常通过模拟器重温那些经典，玩了古早版本的塞尔达与火焰纹章系列。</p>
<p>到了大学之后反而完全对游戏提不起兴趣，经久不衰的英雄联盟似乎只打了一局人机后再也没登录过，没去赶守望先锋的热潮，后来的炉石、王者也仅仅是浅试了几局后再也没开过，聚会时邀请王者开黑时我的一句“不太会”总是让对面一愣。</p>
<p>大概自己总是觉得有更重要的事去做，或是害怕自己沉浸游戏之后的愧疚感，我一直有些可以避免接触，久而久之也就丧失了兴趣，直到 17 年 Nintendo Switch 的出现。我似乎重拾了对于游戏世界的热情，<a href="https://pseudoyu.notion.site/f5f9e6e31b4744a7a1284eaf55451462?v=6e3be0ced2f44305b9ff3a8298e72de5">囤了很多游戏</a>，沉浸在海拉鲁大陆里完全不记得<del>塞尔达</del>林克的使命，为了培育自己的战队没日没夜地在宝可梦剑盾里孵蛋，为火焰纹章风花雪月里的一个限定道具思考一晚上战略&hellip;</p>
<p>其实游戏带给了很多，因为一次猜测她在剑三里究竟是长歌还是万花输了一杯星巴克，也算是就此结缘；每天一起在 Pokémon Go 抓伊布，刷日常任务和道馆，收获了很多快乐；后来的日常也是她玩剑三，我打宝可梦，也都一起玩成了养成与换装游戏。渐渐地，游戏的乐趣也不仅仅囿于游戏设计本身，而是寄托在其中的日常。</p>
<p>现在自己常常有想重新拿起手柄玩点什么，一直在切换游戏，却再难有勇气打开，也失去了那份心境。</p>
<h2 id="状态调整">状态调整</h2>
<p>这周的工作还是在做前一个项目的筹备，因为之前也已经很熟悉这部分架构和代码了，工作量很可控，所以都能比较早地完成。</p>
<p>但即便时间有了一些自由，依然觉得内耗有些严重。其实最近也开始慢慢思考关于工作的性质与收获，也跟一个刚认识的很有缘的本科学弟聊到这一点，虽然工作初期得到了很多提升，也是必要的阶段，但因为并不是自己真正想做和感兴趣的东西，而是一个接着一个的外部需求，缺少了成就感所带来的正反馈，反而只能从自己的博文或是其他的学习输出中去弥补这一部分。</p>
<p>这几天基本 7 点多就能到家，多了很多自己可以支配的时间，但是前几天到家后有些无所适从，也没能好好利用或是休闲。Humura 在我上篇周报后提了很多建议，尤其是运动与睡眠上，但这周的调整空间很有限，甚至在脱离了褪黑素（已经吃完两罐），睡眠状况更加恶化了。</p>
<p>后面几天的时间安排上好了许多，但睡眠依然没有改善。感觉自己需要更多的自律来进行状态调整。这里所提到的自律倒不是专注于工作或是学习，而且更严格地划分自己的时间，以规律化的方式来保障自己工作学习中的劳逸结合、娱乐、运动，而不是一段时间的积极 + 一段时间的颓败，甚至会需要自己为自己每天找一些细微的动力或是期待，比如拍一些日常的视频或是培养一些简单的习惯。</p>
<h2 id="学习与输入">学习与输入</h2>
<p>这个部分会记录一下自己觉得有意思的东西以及工作学习的一些进展。</p>
<h3 id="技术学习">技术学习</h3>
<p>这一周看了不少的工作之外的书与教程。之前在工作中用到了很多 Docker 与 k8s 的操作，对基本的操作有了一些了解，但是并没有很系统了解它们的原理和进阶用法，发现了一个很棒的『<a href="https://www.techworld-with-nana.com">TechWorld with Nana</a>』频道，讲得很清晰实用。</p>
<p>对于 Cosmos 的架构与核心机制部分已经完整学了一遍，正在画一些图做一些整理。工作后的第一个项目就基于 Cosmos 开发了接近半年，却一直对其底层有些一知半解，终于填了自己当时的一些坑，好好学习了一下。</p>
<h3 id="博客相关">博客相关</h3>
<p>之前看到一种基于博客或是教学的学习观念，即学习一个新的知识点时以能够教会他人或是让读者更好理解为标准，以此为前提能够更明确自己的学习目标。出于这一点，我规划了几篇博文：</p>
<ol>
<li>Cosmos 原理与架构</li>
<li>Docker 基础与实践</li>
<li>k8s 基础与实践</li>
</ol>
<p>下周需要更多时间放在写作上了。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>蒂姆库克传</strong>，对 Tim 的童年和一些观念还挺意外的</li>
<li><strong>区块链架构与实现：Cosmos 详解</strong>，工作用到所以看了下，前四章挺不错的，对整个架构尤其是共识算法这一块讲得很细，后面详细的章节打算看看源码当作参考资料用到的时候看了</li>
</ul>
<h4 id="剧集">剧集</h4>
<ol>
<li><strong>天才基本法</strong>，雷佳音的演技很好，张子枫也有些惊喜，看到后面发现平行世界的设定和《想见你》类似，但是逻辑和世界观差远了，剧情和人设变化有点无语</li>
<li><strong>非常律师禹英禑</strong>，每周期待更新</li>
</ol>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，越来越精彩了</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，连续看了几集，挺休闲的</li>
</ul>
]]></content:encoded></item><item><title>周报 #05 - 工作、时间的掌控感与新朋友</title><link>https://www.pseudoyu.com/en/2022/07/31/weekly_review_20220731/</link><pubDate>Sun, 31 Jul 2022 23:55:54 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/31/weekly_review_20220731/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-07-25 到 2022-07-31 这周生活的记录与思考，也是休假回来后恢复工作的第一周。 经历了一个久违的“小暑假”后还未来得及作状态调</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/bg_computer_room_hellowork.jpg" alt="bg_computer_room_hellowork"></p>
<p>本篇是对 <code>2022-07-25</code> 到 <code>2022-07-31</code> 这周生活的记录与思考，也是休假回来后恢复工作的第一周。</p>
<p>经历了一个久违的“小暑假”后还未来得及作状态调整就马上投入了紧张的新项目筹备中，也推动着自己更多思考工作与生活的平衡。</p>
<h2 id="工作与时间的掌控感">工作与时间的掌控感</h2>
<p>之前的一篇也有讲到过自己结束学生生涯踏入职场已经一年了，得益于第一个项目极端压力下的锻炼，我工作职责上的事务大多已经上手，即使遇到很临时的会议或是技术方案讲解也能比较从容应对。</p>
<p>工作中被信任的最大好处是有了不错的自由度，只要自己能够协调安排好整个任务的进度，获得一个不错的结果，就不需要屈从于无意义的卷；上下班时间还算正常，大部分项目的工作压力也并不会长期很大（因为是 to B 业务为主，所以大多赶一些交付节点），也可以在省下来的时间里学习一些其他东西。</p>
<p>原先一直觉得这种模式还不错，但最近的状态慢慢出了一些问题，感觉就像是自己的生活慢慢被吞噬了。</p>
<p>我对原先预想的下班后闲暇时间并没有办法做到那么好的掌控，随着日子一点点过去，下班时间有时候会更多做一些比较无脑的休闲活动，比如追剧或是刷刷 B 站上的一些微电影（偶尔刷到跟感情相关的又开始 emo）。</p>
<p>有时候莫名地几个小时过去了，因为第二天还需要上班，不得不吃点褪黑素睡了；更有几天回来就已经快 10 点了，想着躺下歇一会儿，再次睁眼就已经 1 点多了，起来打开电脑，却也没干什么事。</p>
<p>下班时间的生产力因此也就很难保证，甚至有时候是在强迫自己做一些事，对一位群友的描述很有同感：</p>
<blockquote>
<p>“我现在有点面向周报学习的意思，每次想彻底躺了的时候，就想着，彻底躺了周报没写的咋办，然后就垂死病中惊坐起了。”</p>
</blockquote>
<p>我反思了一下产生这种状态的原因，觉得还是自己还是很难从工作中得到自己的想要的提升，反而常常是在消耗自己的精神，下班后的时间也不足够恢复，致使自己的生产力完全被破坏了。虽然确实是没有什么任务量规定或是来自外部的 Deadline，但还是常常有些自我谴责，这与自己所追求的理想生活状态相去甚远。</p>
<p>好像是从某个播客中听到这样一个概念，我们都需要找到隐藏在 A 面之后的 B 面。如果把工作项目当作一个 A 面，B 面就是隐藏在其中找到一些点，不论是创新还是一些新的技术尝试都能够让自己有更多的主观意愿去完成；而如果把工作本身当作一个 A 面，那就需要去思考如何去填补这占据了我们绝大多数时间的工作另一面，可以是学习提升，也可以是一个简单的爱好培养。</p>
<p>当然，这种状态的改变并没有一个标准的解决方案，也从来不是一件可以轻易解决的事，但总归是需要去慢慢梳理。但目前是想着自己的下一份工作会更多考虑远程工作的模式，能够更好地平衡自己的节奏，最近也在了解一些相关资讯。</p>
<h2 id="新朋友">新朋友</h2>
<p>这周的惊喜就是认识了几个 Twitter 上一直有在关注的朋友们，起因只是和 <a href="https://twitter.com/strrlthedev">STRRL</a> 讨论了一下 cloudflare pages 并且互加了友链，后来又进了小群认识了 <a href="https://twitter.com/RealAkemiHomura">Homura</a>、<a href="https://twitter.com/Manjusaka_Lee">Manjusaka</a>、<a href="https://twitter.com/_a_wing">新一</a> 和 <a href="https://twitter.com/OnlyXuanwo">Xuanwo</a> 等大佬们，偶尔也会对于生活和技术有一些日常的交流。</p>
<p>自己在毕业之后好像就很少去主动社交了，现实生活中也不愿意参加有陌生人的聚会，再加上朋友圈入口已经关闭了四五年，也并不了解曾经的同学们现状，更加难以有什么交流的契机，一直处于封闭的状态。反倒是在 Twitter 上倒是从 5 月开始碎碎念很多，也常常惊叹于很多推友的有趣生活与思考深度，但一直也都是默默看着，极少有什么直接的互动。这一次认识了那么多新朋友，还是很开心和惊喜的，也希望之后能够多多交流，人都很 nice。</p>
<h2 id="学习与输入">学习与输入</h2>
<p>这个部分会记录一下自己觉得有意思的东西以及工作学习的一些进展。</p>
<h3 id="技术学习">技术学习</h3>
<p>这一周先加入了一个新的项目，进行了一些环境搭建，牵扯到了不少和 docker 相关的一些操作，不过因为之前做过类似的，整体还比较顺利。然后因为涉及了 Cosmos 区块链，所以开始看 《区块链架构与实现：Cosmos 详解》，并且做了一些笔记，慢慢看。</p>
<p>但是没几天后就去指派到另一个项目的前期筹备，有很多繁琐的工作，连续加班了几天，但是开发进展不多，希望项目顺利。</p>
<p>这一周没进行太多其他的技术学习，CSAPP、合约开发和新到的 Go 语言相关的书都需要按照进度推进了。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<ul>
<li><strong>蒂姆库克传</strong>，虽然听说大多是一些报道和信息汇总，不过对苹果这家公司很感兴趣但是却一直对 Tim 很陌生，大概乔布斯的光环太重，所以也想了解一下</li>
</ul>
<h4 id="剧集">剧集</h4>
<ol>
<li><strong>The Most Hated Man on the Internet</strong>，Netflix 新出的纪录片，事件中的妈妈强大、自信且有趣，比起之前关于 N 号房的纪录片少了些沉重，多了一些悬疑节奏感。但是深夜看完依然觉得无奈（或者说是无力），只希望这个世界能多点善意和人性吧，哪怕只是变好一点点</li>
<li><strong>非常律师禹英禑</strong>，女主还是很可爱，男女主也挺好磕</li>
</ol>
<h4 id="电影">电影</h4>
<ul>
<li><strong>独行月球</strong>，中规中矩的院线喜剧片，配乐和气氛渲染还是挺到位的，剧情的话有些低配版火星救援的感觉，并且结局有些过于核心价值观</li>
</ul>
<h4 id="动漫">动漫</h4>
<ul>
<li><strong>夏日重现</strong>，每周都会期待更新的番剧</li>
</ul>
<h2 id="折腾小记">折腾小记</h2>
<h3 id="软件折腾">软件折腾</h3>
<ol>
<li><strong>Arc</strong>，一个新晋网红浏览器，尝试了一下，体验很不一样，目前还没发现什么硬伤，但还是更多只会作为一个辅助浏览器，毕竟 Safari 用得太习惯了</li>
<li><strong>Arctype</strong>，从某个推荐文章里看到的数据库管理工具，界面很好看，可以分多个工作区，也有一个内置可视化面板功能，还没详细玩，目前主力还是 TablePlus</li>
</ol>
<p>看了 <a href="https://twitter.com/strrlthedev">STRRL</a> 上周的周报，也把自己的博客彻底迁移到了 Cloudflare Pages，迁移体验很无缝，后续使用感觉也很棒，至此我的 Serverless 博客系统为：</p>
<ul>
<li>Github 作为 Hugo 博客源文件和运行一些 Github Actions 来自动更新 About 页面</li>
<li>Cloudflare Pages 托管博客，并且用在 Cloudflare 托管的域名进行解析</li>
<li>在 Railway 和 Vercel 托管了 Cusdis 评论系统和 Umami 数据统计系统</li>
</ul>
<h3 id="博客相关">博客相关</h3>
<p>这周没写什么文章，不过数据上有了一些小小的里程碑，首先是 Google 搜索达到了 1000 次点击。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/blog_google_search_1k.jpeg" alt="blog_google_search_1k"></p>
<p>然后也第一次月浏览量达到了 1 万左右，访客 3 千多。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/blog_umami_10k.png" alt="blog_umami_10k"></p>
<p>需要继续加油多写一些了。</p>
]]></content:encoded></item><item><title>周报 #04 - 休假、亲情与城市的归属感</title><link>https://www.pseudoyu.com/en/2022/07/24/weekly_review_20220724/</link><pubDate>Sun, 24 Jul 2022 23:31:27 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/24/weekly_review_20220724/</guid><description>《后来的我们 - 五月天》 前言 本篇是对 2022-07-11 到 2022-07-24 这两周生活的记录与思考。至于延迟的理由 —— 我休假了！！！ 休假 算上实习工作已经一年有余了，但因为项目一</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/one_way_street_books.jpeg" alt="one_way_street_books"></p>
<p>本篇是对 <code>2022-07-11</code> 到 <code>2022-07-24</code> 这两周生活的记录与思考。至于延迟的理由 —— <strong>我休假了！！！</strong></p>
<h2 id="休假">休假</h2>
<p>算上实习工作已经一年有余了，但因为项目一直在持续进行中，除了春节几乎没有完整的假期，也攒了不少调休。恰逢第二个项目圆满收尾，我向 leader 申请了休假，7 个工作日 + 2 个周末，有一种久违的放暑假的感觉。</p>
<h3 id="我与家人">我与家人</h3>
<p>虽然疫情时而有反复，最后还是决定回杭州，回家。感觉自 20 年中离家之后，每次回来总是匆匆的，上一次还是国庆了，大约也就待了 3 天，除去亲戚之间的聚会，真正陪伴在家人身边的时间折下来大概也就凑不满完整的一天，只够将自己的近况和想法简单聊聊，似乎就踏上了归途。这次大概也是因为这大半年自己身上发生了不少事，有些疲倦了，只想好好地待在家里休息调整下，同时想多陪陪家人（主要是带我妹妹出去玩）。</p>
<p>其实自己没有那么显著地意识到自己的长大，但在家庭聚餐的饭桌上似乎已经成为带头向各个长辈敬酒的主力，小辈们出去聚会玩耍时也已经是自己在安排了，就连印象里一直都很小的妹妹过了暑假也要步入初中学堂了。就好像从某个时间起，时间就在加速流逝了，在匆忙的学业和工作中并没有什么感知，而只有当自己回到家体会慢下来的时光或是偶尔想起深藏在记忆里的零星小事时，才会感慨两句。</p>
<h3 id="我与妹妹">我与妹妹</h3>
<p>我有一个小我 13 岁的妹妹，每每提及都会让同学朋友羡慕。这个年龄差不至于会有什么争吵冲突，而随着自己长大也能多照顾一些。高中时因为住校和备战高考，也算不上有很多陪伴，而大学之后更是四处奔波，大概只有寒暑假会稍完整一些。而工作后更是聚少离多，只有每天微信群里的闲谈和偶尔的电话，不知道她对我这个哥哥的角色如何评价，希望能合格吧。</p>
<p>所以这次回家带妹妹去拍了一些照、逛了步行街、做了手工、去了海洋馆以及一起去单向空间书店看书。有很多事似乎很稀松平常，但大概因为之前自己也还是太宅了而缺席，所以都还是挺新奇的体验，每次出游或是玩耍结束后手牵着手回家时能从中感受到一种静谧的美好。</p>
<p>这次还带了相机回来，又琢磨了下新买的大疆 RS3 稳定器（真的很好用！！！），拍了很多照片和视频，也算是为她接近尾声的童年留下了一些记忆碎片。</p>
<h3 id="我与老师">我与老师</h3>
<p>初中毕业虽然也已经近十年了，但每次寒暑假或是这样休假的时候都会约初中班主任春哥出来吃饭、聊天，只是以往都有倪和占一起，而如今都已经四散在海外，之后的时间恐怕也比较难聚齐。大概是因为见面得很频繁，这么多年过去的竟也没感觉彼此有太多变化，也都像是朋友一样从学业、工作聊到感情、想法，常常不知不觉就四五个小时，也常常感慨竟然相识已经 13 年之久。</p>
<h2 id="城市的归属感">城市的归属感</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dayuecheng.jpeg" alt="dayuecheng"></p>
<p>说来有趣，因为高中毕业后前往武汉读了大学，后续又在上海、厦门等城市进行过为期不短的实习，没多久就赴香港读研，结束后又很快去北京实习工作了，也算是待了不少城市，但不论就环境还是对城市中人的感情来说，都很难承认自己属于哪里。</p>
<p>待得最长的杭州因为大学时期的缺席，有联系的初高中同学已经少之又少，最亲近的几个朋友也都纷纷离开杭州，大多在海外，这次回来后发现竟然连可以出来吃个饭喝点东西的人都一时难以想到，只好作罢；毕业后因为自己当时的学生创业还回去过几次武汉，毕业后尚有联系的也就几个导师、舍友和原本经常一起玩的四人组，然而也都分布在各地，只有出差才能见上一两面，而后续因为疫情爆发，也有两年多没有再回去；香港这一年则充满了紧迫感，除了感情外自己似乎也没有结识太多人，相处时间短暂，毕业后也渐渐没了联系；反倒是在北京因为本来就有几个好友，也因为工作项目与同事和一些工作伙伴结下了不错的友谊。</p>
<p>我一直比较宅，对城市气候或是风貌其实感知并不明显，对环境的适应力也还算不错，所以从来没有把城市作为自己考虑各种事情的重要因素，但这次回去后的很多想法也有所变化了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/xinfeng_food.jpeg" alt="xinfeng_food"></p>
<p>只身一人在北京时虽然不至于会感觉有多苦，但总感觉一草一木都少了一些牵挂，似乎这些都与自己无关。而回到杭州哪怕只是河边走走，也能感觉到一些亲切；也会去自己常去的店看看，或是坐上 30 分钟的公交去吃心心念了很久的新丰小吃，抑或是在单向空间的书店里坐上几个小时重温以前在书店一坐一下午的惬意时光。</p>
<p>这可能就是一个城市所给人带来的温度与归属感吧，年纪越大对这些也更为在意。</p>
<h2 id="学习输入与输出">学习、输入与输出</h2>
<p>这个部分会记录一下自己觉得有意思东西以及工作学习的一些进展。</p>
<h3 id="技术学习">技术学习</h3>
<p>第一周主要是在进行项目的一些收尾工作以及新项目的筹备，没有太多需要开发的部分，不过买了一些技术的书，准备休假回来好好沉淀一下。</p>
<p>技术类的主要是《<strong>用 Go 语言自制编译器</strong>》、《<strong>用 Go 语言自制解释器</strong>》、《<strong>Go 语言精进之路</strong>》这几本新书和一个自己计划很久但一直没读的《<strong>重构：改善既有代码的设计</strong>》，有了一些项目经验之后再读这些书感觉会更加深刻。</p>
<p>非技术的则买了一套思维相关的《<strong>金字塔原理</strong>》，作为一些思维方式的培养，后续都会做一些笔记。</p>
<p>休假前两天参加了之前所说的技术分享，主要讲了自己区块链学习的一些经历和经验，整体感觉还可以，后续也会将讲稿重新编排成博文发布。本来讲完就想整理了，但是马上休假了，虽然带了电脑，但基本没有工作或是学习，纯粹的放松了。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<p>书籍方面，继续在看『房思琪的初恋乐园』，应该这周能看完。然后也同时打算看几本偏向于信息的书：</p>
<ul>
<li><strong>Working in Public</strong>，讲开源软件相关的</li>
<li><strong>蒂姆库克传</strong>，虽然听说大多是一些报道和信息汇总，不过对苹果这家公司很感兴趣但是却一直对 Tim 很陌生，大概乔布斯的光环太重，所以也想了解一下</li>
</ul>
<p>除了这些外，在单向空间看到一本自己好几年前看过的《斯通纳》，翻了一下，突然很想重温一下，感觉在自我寻找这一块会有新的感触。</p>
<h4 id="剧集">剧集</h4>
<ol>
<li><strong>Normal People</strong>，普通人，之前看了一半多，后来莫名搁置了，Normal People，讲述了来自同一个小镇男女主及他们周边的一些故事，不知道是不是因为男主是英语专业或者是有同样的脆弱敏感的特质，感觉看到了很多自己的影子</li>
<li><strong>非常律师禹英禑</strong>，一个律政题材的韩剧，主要是看了一点简介觉得女主人设比较可爱所以看了下</li>
<li><strong>The Bear</strong>，熊家餐厅，讲一个大厨回来经验家庭餐厅的故事，不长，节奏很不错，回程的高铁上看的</li>
</ol>
<h4 id="电影">电影</h4>
<ol>
<li><strong>新奇</strong>，对现在社会的感情、社交相关进行了一些思考，主要讲约炮文化的，但是感觉表达和转折都很奇怪，不推荐</li>
<li><strong>灰影人</strong>，动作片，最近挺火的，据说是奈飞投入最高的电影，看下来有点 john Wick 的感觉</li>
</ol>
<h4 id="动漫">动漫</h4>
<ol>
<li><strong>鬼灭之刃</strong>，第一季很喜欢，后来一直没追了，这次把无限列车篇和游郭篇都补了，很喜欢</li>
<li><strong>天气之子</strong>，之前一直想看，剪辑和翻拍都看了好多版本了，正片一直没看，补上了，很新海诚</li>
<li><strong>夏日重现</strong>，还在追，剧情越来越紧凑和想象不到后续发展，很惊喜了</li>
</ol>
<h2 id="其他">其他</h2>
<p>最后发色选择了灰绿色，漂了两次染了一次，自己感觉还挺不错的，虽然略有点点浮夸，但是很动漫，大概自己迟到的叛逆期终于来了，后面也可以多试试其他风格了。</p>
]]></content:encoded></item><item><title>周报 #03 - 健康、目标与生活的节奏感</title><link>https://www.pseudoyu.com/en/2022/07/11/weekly_review_20220711/</link><pubDate>Mon, 11 Jul 2022 08:30:20 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/11/weekly_review_20220711/</guid><description>《后来的我们 - 五月天》 前言 感觉每次从标题开始似乎就要给过去的这一周定一个主题，有时候也并不那么好概括，但还是坚持那么做了，似乎这样生活就会像</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>感觉每次从标题开始似乎就要给过去的这一周定一个主题，有时候也并不那么好概括，但还是坚持那么做了，似乎这样生活就会像是一个个篇章拼凑而成，在很久之后回顾也会像是构成一本书那样的充盈感。</p>
<p>本篇是对 <code>2022-07-04</code> 到 <code>2022-07-10</code> 这一周生活的记录与思考。</p>
<h2 id="健康">健康</h2>
<p>不知道是工作疲累还是精神上的一些残留的影响，最近其实感觉到自己的健康状况有下滑的征兆，也算不上很严重，但就是常常能感受到一些虚弱感，有时候甚至感觉身体不是自己的。</p>
<p>似乎这么多年以来一直没有怎么关注过自己的健康，体检虽算不上定期但有在做，都没什么大碍，因此也就没有过多关注，有时还有些小得意自己熬了那么多年的夜，视力和身体都没受到什么影响，但最近的征兆也让自己不得不开始警惕一些身体的变化了。</p>
<p>首先需要注意的就是饮食了，因为有坚持断食（16+8），也就是保持 16 小时不进食，然后将主要的两餐集中在剩下的 8 小时内，所以很久没吃早餐了。由于工作日需要规律地去公司，基本能保障午饭在 12 点左右准点吃，偶尔在下班后和同事一起吃个便餐或回家后随便吃点。然而到了周末就很难控制，有时一天仅仅一餐或是水果，这部分也是需要调整的，也要注意一下营养均衡。</p>
<p>睡眠则是一直以来知道却很难调整的问题，过去的两个月像是被剥夺了睡眠，每天大约都是 4、5 点才入睡，8 点多起来，紧接着通勤，然后进入一天的工作。其实精神状态神奇地没有太多影响，甚至连午睡都不需要，但也已经有了一些隐形的消耗。这周有刻意调整至从凌晨 2 点多至早上 8 点，感觉稍微缓过来一点。</p>
<p>7 月会去进行一次全身体检，说实话还是挺担心结果的，就像大学时创业熬得最狠的那两年也没敢去医院检查，似乎没有一个确定的指数就可以心安理得地继续透支，所幸当时一切都好，希望这次也一样。</p>
<h2 id="目标">目标</h2>
<p>两年多之前，在我重构自己博客的时候就在『<a href="https://www.pseudoyu.com/en/about/">关于</a>』页写过这样几段话：</p>
<blockquote>
<p><strong>生活方面</strong>，希望能够和现在的挚友一直相互支持走下去，和家人保持现在这样亦亲亦友的关系，和在意的人一起面对人生的挑战，同时也能认识更多有趣的人。<br>
<strong>专业方面</strong>，希望一直有所进步，能够在开源世界留下一些痕迹。<br>
<strong>经济方面</strong>，希望能自主无虞，足够支撑做自己想做的事，探索更多元的未来生活。<br>
<strong>社会方面</strong>，希望有机会多参与一些公益活动或其他形式的善举，为世界带来一些微小的改变。</p>
</blockquote>
<p>很有趣的是，大概是当时自己定的也并不具体，或者是自己这方面一直也没有什么进展，在现在这个节点回顾，也没有什么可以补充的，只是会更加具象化地思考自己想成为一个怎么样的人。</p>
<p>总的来说，我想成为一个有趣的人，想过一些不一样的生活，而自己所追求的不一样也希望不仅仅是依赖于工作内容或是环境的改变，而是想或多或少找到或者在尝试和探索自己想做并且或许也恰巧擅长做的事，哪怕没有能力全职或是全身心投入做，也希望能够找到并且坚持下去吧。</p>
<p>当然，还是想更具体一点，这部分之后也会在周报中作记录了，作为一直探索的记录，至少要多看看一些自己向往的生活方式，并且拆解自己想要做到所需要改变和付出的。</p>
<h2 id="生活的节奏感">生活的节奏感</h2>
<p>本周分别和两个朋友出去吃饭了，这大概是自己这几个月以来除了同事以外在现实中面对面交流最多的时候了，也是我在北京极少的可以交谈的朋友了。</p>
<p>其中一位是我本科学校大我一届的学姐，一直以来都有保持比较亲近的联系，定期会聊聊近况，之前去广州旅游的时候也受了很多照顾，但见面或者聊天也远远算不上频繁。不知道是不是以前因为有大学时『会长-&gt;部长』或者是『学姐-&gt;学弟』这样的身份加持，似乎一直没有很深入内心的交流，反倒是都工作之后对各自的生活状态有了更深的了解，也能更感同身受一些，给予互相的关心和支持。</p>
<p>另一位也是本科学校的学姐，不过是毕业后我的导师亮亮介绍认识的。当时我正要前往香港，亮亮说她之前也在香港读研并且后续也在香港工作，可以交流一下，也互相有个照应。不过我刚到香港一个月，学姐就因为个人规划离开了，这是当时的一些心绪：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/some_thoughts_about_boyi.png" alt="some_thoughts_about_boyi"></p>
<p>不知不觉也接近两年了，没想到后续自己来了北京工作，也是很巧合。一直以来她的生活状态和态度都是我向往的那种，不论是之前的香港还是现在在北京，即使工作环境和节奏截然不同，她依然能在周末或是平时闲暇的时候去学小提琴、画画，去冲浪、拳击、攀岩、跳舞等。</p>
<p>她有说希望之后的每个周末都能做一些至少自己觉得有意义的事，感觉她一直以来都比较能够践行自己的一些想法。我觉得也不仅仅是执行力的问题，这方面自己可能也算不上差，但能够很明显地感受到她会能够清晰地定义自己的工作、生活与个人想法之间的边界，我将之称为生活的节奏感，也希望自己之后能够做得更好。</p>
<p>很有趣的插曲是在日料店和老板及一众朋友聊了很多，可能有北京人口音的加持和离奇的经历，整个聊天像是脱口秀一样，也第一次觉得自己也挺能接梗的，也是近几个以来很难得的纯粹放松的一次体验了。</p>
<h2 id="学习输入与输出">学习、输入与输出</h2>
<p>这个部分会记录一下自己这边所看的各类影音书籍、折腾的好玩的东西以及工作学习的一些进展。</p>
<h3 id="技术学习">技术学习</h3>
<p>需要承认的是这周不管是工作产出还是闲暇之余自己的学习进度都有些落后。主要是因为项目已经到了尾声，工作任务大多是配合完成一些测试和文档更改，以及讨论一些技术方案，并没有什么实质开发工作；剩下的就是给公司新项目客户讲解我们的产品与实现方案。</p>
<p>即使如此，琐碎的事还是不少，回家常常也 9 点之后了，没有拿出很完整的时间来看课程或是看书，下一周需要有所调整，主要也还是侧重在合约开发和 CSAPP 这两个部分。</p>
<p>受邀作为嘉宾参加一个 7 月 14 日的技术分享，面向还挺有名的一个社区，半小时左右，主题是『web2 工程师如何进入 web3』，我也是第一次参加那么大型的技术分享，而且自己也就是刚入行不算很久，有些紧张，需要好好准备一下。</p>
<h3 id="输入">输入</h3>
<h4 id="书籍">书籍</h4>
<p>书籍方面，这周看完了之前通勤时候一直在看的『洛丽塔』，开始看『房思琪的初恋乐园』，慢慢习惯于在拥挤的地铁上看书了，这样慢慢积累也能看很多。</p>
<p>看了 <a href="https://twitter.com/yihong0618">@yihong0618</a> 的这个 <a href="https://twitter.com/yihong0618/status/1507000968478871559?s=21&amp;t=TfLr28X_8uLPyPPJCrzYeA">thread</a>，也想重温村上的很多书籍了，记得高中的时候和同学一起看『1Q84』，对其表现形式印象深刻；大学有段时间阅读像是『当我谈跑步时，我谈些什么』也给了我很多生活的思考，也许这个阶段重读一些也会有不一样的体验吧。</p>
<h4 id="剧集">剧集</h4>
<ol>
<li><strong>黑袍纠察队</strong>，很新颖的反超级英雄题材，三季的质量也一直很高，很值得推荐</li>
<li><strong>黑客军团</strong>，这个几年前看过前几季，不过就重温了以及追了最新的一季，很精彩，许多地方也发人深省</li>
<li><strong>High Score</strong>，在每天吃饭的空档看的一部讲电子游戏发展史的纪录片，算不上出彩但是是个还不错的科普</li>
</ol>
<h4 id="电影">电影</h4>
<ol>
<li><strong>银翼杀手 2049</strong>，有些末日题材的加上爱情的元素，可能在科技发展到了现在再看这类题材少了一些惊喜感却有了一些对于未来的担忧甚至是绝望</li>
<li><strong>她</strong>，同样是科技+爱情的元素，讲的是与人工智能恋爱的故事，说实话倒是有不少感同身受，大概自己也过于以来和沉迷科技，甚至忽略了很多人的情感生活的真实感</li>
<li><strong>无依之地</strong>，描述了美国一批无家可归的底层人民的生活状态，可以作为另一种视角，但刻意渲染的感觉太重以至于无法真正打动</li>
<li><strong>罗马假日</strong>，经典就是经典，奥黛丽赫本真的美</li>
<li><strong>土拨鼠之日</strong>，之前看过一个日本 up 主拍的一个土拨鼠之日风格的微电影，一直想看，补上了</li>
<li><strong>波斯语课</strong>，记得之前重映过错过了没去看，也是补一下，但没有很惊喜，同类型的战争题材里我可能还是更喜欢『美丽人生』</li>
<li><strong>起风了</strong>，也是一个战争题材，高中时就有被推荐发现自己一直没看，补上了，挺喜欢的</li>
</ol>
<h4 id="动漫">动漫</h4>
<ol>
<li><strong>辉夜大小姐想让我告白 第三季</strong>，恋爱喜剧，很喜欢，每一季都挺惊艳的，结局真的甜到了</li>
<li><strong>间谍过家家</strong>，也是偏喜剧，前几集比较惊喜，后面就有些过于夸张，有些人设也不太一致，不过总体来说很欢乐</li>
<li><strong>夏日重现</strong>，最惊喜的一部新番了，世界观和节奏感都很惊艳，还是个半年番，继续追</li>
<li><strong>继母的拖油瓶是我的前女友</strong>，感觉好像自己的二次元属性突然就觉醒了，开始继续追一些番，名字奇奇怪怪但是看了一集还不错的新番</li>
</ol>
<h3 id="输出">输出</h3>
<p>这周还是写了有两篇挺满意的文章：</p>
<ol>
<li><a href="https://www.pseudoyu.com/en/2022/07/05/access_your_local_devices_using_reverse_proxy_tool_frp/">基于 frp 内网穿透的瘦客户端开发工作流</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/07/05/access_your_local_devices_using_reverse_proxy_tool_frp/">Warp，iTerm2 还是 Alacritty？我的终端折腾小记</a></li>
</ol>
<p>惊喜的是第一篇入选了少数派的会员精选，也是解锁了新成就；后一篇刚完成发给了编辑，等待反馈意见；倒是很早之前的那篇区块链相关的约稿自己还没开始动，可能也要提上日程了。</p>
<p>慢慢也有了自己写这类文章的风格、行文逻辑，也能有一些自己的写作节奏和固定频率了，之后继续积累一些想写的选题。</p>
<h2 id="习惯兴趣与改变">习惯、兴趣与改变</h2>
<p>这周在习惯和兴趣培养上也没什么进展。后面至少健身环大冒险要有一个固定频率开始了，以及想学的一些东西也要开始了，需要克服对于生活的倦怠感了。</p>
<p>然后有想染一下头发，目前有考虑奶奶灰或是亚麻绿，还没选好。</p>
<h2 id="其他">其他</h2>
<p>最值得一提的就是我现在 6 年级的妹妹开始写网络连载小说了，是仙侠相关题材的。每天晚睡一小时用 iPad 码字一个小时，大概坚持了一周日更了，发布在网络小说平台上，得到了挺多阅读和曝光的，还有很多人催更，我们现在还经常互相卷，经常问问对方是不是在写文章。</p>
<p>下周打算开始调休假，陪陪父母家人，上次回去也已经是去年国庆了，然后也想找机会出去旅游，但是疫情实在是带来了很多变数。</p>
]]></content:encoded></item><item><title>Warp，iTerm2 还是 Alacritty？我的终端折腾小记</title><link>https://www.pseudoyu.com/en/2022/07/10/my_config_and_beautify_solution_of_macos_terminal/</link><pubDate>Sun, 10 Jul 2022 11:18:29 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/10/my_config_and_beautify_solution_of_macos_terminal/</guid><description>《后来的我们 - 五月天》 前言 作为一个开发者，不论是本地代码运行调试还是在远程服务器上进行项目的部署运维，都离不开下图所示的终端，也就是科技电影</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>作为一个开发者，不论是本地代码运行调试还是在远程服务器上进行项目的部署运维，都离不开下图所示的终端，也就是科技电影中常出现的黑窗口。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_terminal_tools.png" alt="my_terminal_tools"></p>
<p>各个操作系统一般都有自己默认的 Shell，如 Windows 操作系统下的“Powershell”、macOS 与 Linux 系统的 bash、zsh 等；带图形版界面的系统也都会预置终端仿真器（Terminal Emulator），如 macOS 平台下的“终端.app”以及 Linux 各发行版自带的终端程序等。</p>
<p>作为一个生产力工具爱好者与颜控，我对终端配置美化的折腾从未停止过，也几经迭代。可能与大多数开发者不同的是，我并不是某种特定方案的拥趸，而是会去尝试各种工具，依照自己的习惯进行配置降低各个方案之间的操作差异，在日常开发过程中根据用途无缝切换使用，有时甚至是随机选一个使用以切换心情。</p>
<p>本文主要讲述了我的终端方案选择及配置细节。</p>
<h2 id="终端配置方案需求">终端配置方案需求</h2>
<p>终端配置分为几个方面：</p>
<ol>
<li><strong>工具配置</strong>。在使用 macOS 或 Window 系统进行开发时，我们往往需要一个终端仿真器（Terminal Emulator）连接到本机开发环境或远程服务器。这通常是我们开发过程中的常驻应用，其颜值、响应速度与快捷键等也会很大程度影响我们的开发体验，因此是我们配置与美化的重点。</li>
<li><strong>功能配置</strong>。我们在使用命令行对系统服务/文件进行一些操作时，需要使用 Shell，如 bash、zsh 等，对其进行一些命令提示、自动补全等配置能有效提升我们的使用体验。</li>
<li><strong>集成配置</strong>。除了运行 git 等常用命令行工具外，终端往往还需要满足文本编辑、多任务管理等进阶需求。因此，通过终端配置实现 vim、tmux 等工具的深度集成也是我们开发体验优化的重要一环。</li>
</ol>
<p>我梳理了自己的终端使用需求，列出了以下几个核心要点：</p>
<ol>
<li><strong>风格简约</strong>。作为一个每天都需要长时间面对的软件，再 fancy 的主题也会看腻，甚至影响自己的注意力。因此，我对终端工具外观与操作逻辑配置的基本思路为 Minimal Distraction，简约而不单调。</li>
<li><strong>响应速度快</strong>。最开始我对终端的配置侧重在美观与功能，安装了很多插件配置，但也出现了每次软件开启会有几秒延迟的不良体验。因此，使用过程的响应速度也是我方案选择与优化的重点。</li>
<li><strong>可定制性</strong>。因为我的代码编辑器与窗口管理使用的都是 Vim 『HJKL』 特殊键位，因此我也希望能够进行比较灵活的快捷键配置，降低自己在各个软件直接切换的成本。</li>
<li><strong>可移植性</strong>。我时常需要在不同的设备上进行操作，偶尔也会有设备的迭代，会希望自己的配置能比较方便地移植到新设备/服务器等，最好是可以复用同一个配置文件。</li>
<li><strong>可拓展性</strong>。我希望能够根据自己的需求拓展一些功能与插件，如使用 fzf 对文件或命令历史记录进行检索，通过命令跳转至指定目录，使用 waka-time 记录自己的编程时间等。</li>
</ol>
<h2 id="我的终端配置说明">我的终端配置说明</h2>
<p>即使需求已经比较明确，找到合适的工具与配置方案依旧是一件困难但充满乐趣的事。接下来我将逐个对我仍在使用并且比较满意的方案进行描述，并提供我的配置文件供大家参考。</p>
<p>此外，因为我大多数时间都在 macOS 系统上进行开发，所以我的终端工具配置主要是基于 macOS 平台的，但有些工具或插件（如 Alacritty、ohmyzsh、Neovim 等）是跨平台的，配置方式大同小异，可以根据实际情况进行参照与配置。</p>
<h3 id="warp">Warp</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/warp_interface.png" alt="warp_interface"></p>
<p>我本身是一个折腾流，会希望能自己能够对各类配置有足够的定制化空间。然而，如果要我只推荐一款工具给刚使用终端不久的新手，我会毫不犹豫地选择『<a href="https://www.warp.dev">Warp</a>』。</p>
<p>Warp 是一个基于 Rust 开发的速度极快、功能强大且开箱即用的现代化终端工具。不需要额外配置就支持智能提示、AI 命令智能搜索、命令历史查询、自定义 workflow 等功能。</p>
<p>我是很早参与 Warp 内测的那一批用户，即使是在功能还很不完善的早期，我也被它精致的外观和顺滑的使用体验所惊艳到了。因为基于 Rust 语言开发，Warp 的命令执行与响应速度很快，并且它还内置了很多常用功能，我们无需在 Shell 层配置使用历史记录搜索、命令提示等各类插件就能获得强大的功能支持。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/warp_code_block.png" alt="warp_code_block"></p>
<p>它还有很多传统终端不具备的特色功能，如“block”的概念，每一条命令的执行都以一种“命令块”的形式呈现，可以通过上下左右键在各个 block 之间移动，避免了有些命令输出结果太长导致需要一直拉动滚动条阅览；并且我们可以通过右上角对特定 block 进行书签收藏、命令复制、内容检索甚至在线分享等。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/edit_command_in_warp.png" alt="edit_command_in_warp"></p>
<p>与常规终端工具体验不同的是，Warp 的命令输入窗口长期固定在底部（更接近于 IDE），将我们命令输入与结果反馈进行了视觉上的分离；并且它的输入模式接近于文本编辑器，我们可以通过鼠标或是键盘任意移动光标编辑、修改命令或是输入多行命令依序执行，这也是我所认为的 Warp 的 killer feature。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/warp_other_feature.png" alt="warp_other_feature"></p>
<p>我们仅需在输入框使用对应的快捷键即可唤出历史记录检索、自定义 workflow 等功能，并且可以使用鼠标滚轮或是方向键进行选择，十分灵活。更强大的是，当我们使用 Warp 通过 SSH 连接到远程终端时，这些快捷键依然有效，如历史记录搜索等，而无需在目标服务器进行配置。</p>
<p>另外值得一提的是我们可以通过内置快捷键 <code>Command+D</code> 与 <code>Command+Shift+D</code> 来水平或垂直拆分终端，无需集成其他工具或进行额外配置。</p>
<p>随着技术的发展，文本编辑器不断迭代更新，增加了丰富的功能并提供了更好的使用体验，然而与我们开发人员朝夕相处的终端却一直发展迟缓，Warp 正是在这个阶段应运而生，也正如它官网所描述的那样：</p>
<blockquote>
<p>The terminal for the 21st century.</p>
</blockquote>
<h3 id="iterm2">iTerm2</h3>
<p>在使用 Warp 之前，我的主力终端工具为 <a href="https://iterm2.com">iTerm2</a>，相信这也是很多开发者刚入手 Mac 时的必装软件（毕竟默认终端的颜值和可玩性都不太行）。iTerm2 是一个集美观与功能性为一体的老牌终端工具，即使是默认配置也已经很好的满足了我们的需求。</p>
<h4 id="外观与配色">外观与配色</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_interface.png" alt="iterm2_interface"></p>
<p>我对一位 YouTuber 『<a href="https://www.craftz.dog">Takuya Matsuyama</a>』的配置加以改造，定制了一个性冷淡风外观方案。</p>
<p>首先在 <strong>偏好设置</strong> - <strong>Appearance</strong> 部分对主题、Tab 栏与状态栏进行如下配置，保持较为简洁的布局。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_theme_config.png" alt="iterm2_theme_config"></p>
<p>完成主题配置后，右键底部状态栏可进行详细配置。我选取了部分状态栏组件实时显示设备状态，这部分可根据自己的偏好进行选择。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_status_components.png" alt="iterm2_status_components"></p>
<p>在 <strong>Profile</strong> - <strong>Colors</strong> 面板选取自己的主题配色或导入其他配色方案。可以点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/iterm2">这里</a>下载我的配置文件，导入并根据自己的需求进行调整。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_window_blur_setting.png" alt="iterm2_window_blur_setting"></p>
<p>完成配色方案选择后，我通过调整 Transparency 和 Blur 来实现背景透明与毛玻璃效果（即窗口模糊），此处可以根据具体设备的视觉效果进行调整。</p>
<p>完成了终端工具的配置后，我们还需要对 Shell 进行配置，以集成一些定制主题、智能提示、搜索历史记录等拓展模块，我使用的是 zsh + ohmyzsh + starship 方案，因这些配置各个方案通用，详见下述 Alacritty 配置说明部分。</p>
<h4 id="多服务器管理">多服务器管理</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_profile_settings.png" alt="iterm2_profile_settings"></p>
<p>目前我主要使用 iTerm2 来连接我的各个远程主机/服务器，它提供了方便的多配置管理功能，可以通过设置不同的 Profiles 实现不同服务器或配置环境的快速切换，并且可以用醒目的 Badge 来作为标识。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/iterm2_multiple_servers_management.png" alt="iterm2_multiple_servers_management"></p>
<p>当我们在工作或个人使用中需要连接到多台开发机时，可以通过 <code>Command+O</code> 或通过右键 Dock 栏 iTerm2 图标选择对应 Profile 打开服务器，同时也可以通过内置快捷键 <code>Command+D</code> 与 <code>Command+Shift+D</code> 来水平或垂直拆分终端，便于多服务器同时操作，无需不断切换窗口。</p>
<h3 id="alacritty">Alacritty</h3>
<p>iTerm2 已经是 macOS 平台上颜值与功能都非常平衡的终端工具了，但综合使用下来它的响应速度与配置的自由度还是不那么完美，因此我现在主要将其用于连接远程服务器，本地常用终端后续更换为了 <a href="https://alacritty.org">Alacritty</a>。</p>
<p>Alacritty 也是一款使用 Rust 编写的跨平台终端工具，提供了一些基础默认配置，并通过 <code>~/.config/alacritty/alacritty.yml</code> 文件进行各项自定义配置，可以点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/alacritty">这里</a>访问我的完整配置。</p>
<h4 id="外观配置">外观配置</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/alacritty_interface.png" alt="alacritty_interface"></p>
<p>外观部分我主要通过如下配置进行窗口与字体配置，实现了一种半透明的极简配置，甚至都没有任何边框与按钮，其他配置可自行查看，如选中即复制等在 iTerm2 上惯用的功能均可通过几个简单的配置项实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">window</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">opacity</span><span class="p">:</span><span class="w"> </span><span class="m">0.85</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">padding</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">x</span><span class="p">:</span><span class="w"> </span><span class="m">18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">y</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dynamic_padding</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">decorations</span><span class="p">:</span><span class="w"> </span><span class="l">buttonless</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">font</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">normal</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">family</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;MesloLGSDZ Nerd Font Mono&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">style</span><span class="p">:</span><span class="w"> </span><span class="l">Regular</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="m">13.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">use_thin_strokes</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><h4 id="ohmyzsh--starship">ohmyzsh + starship</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/alacritty_starship_config.png" alt="alacritty_starship_config"></p>
<p>我使用 zsh 作为默认终端，通过 ohmyzsh 来拓展插件功能。zsh + ohmyzsh 是目前非常流行的 Shell 配置方案，其具备了丰富的插件系统，可以通过几行配置轻松实现各项拓展功能。首先，我们按照其<a href="https://ohmyz.sh/#install">官方说明</a>进行安装。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>安装完成后，通过在 <code>~/.zshrc</code> 中添加如下配置来启用 ohmyzsh：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">export ZSH=&#34;$HOME/.oh-my-zsh&#34;
</span></span><span class="line"><span class="cl">source $ZSH/oh-my-zsh.sh
</span></span></code></pre></div><p>我配置了 starship 来美化 Shell 提示。同样，我们根据<a href="https://starship.rs/guide/#%F0%9F%9A%80-installation">官方说明</a>进行安装配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sS https://starship.rs/install.sh <span class="p">|</span> sh
</span></span></code></pre></div><p>完成后在 <code>~/.zshrc</code> 中添加如下配置即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">eval &#34;$(starship init zsh)&#34;
</span></span></code></pre></div><p>此外，我们还可以通过在 <code>~/.zshrc</code> 的 plugin 部分添加插件配置，例如我配置了如下插件支持，实现了智能提示、语法高亮、<code>Ctrl + R</code> 搜索命令历史记录以及 <code>j + &lt;path&gt;</code> 实现快捷跳转等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">plugins=(
</span></span><span class="line"><span class="cl">  git
</span></span><span class="line"><span class="cl">  zsh-autosuggestions
</span></span><span class="line"><span class="cl">  zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">  zsh-history-substring-search
</span></span><span class="line"><span class="cl">  autojump
</span></span><span class="line"><span class="cl">  zsh-wakatime
</span></span><span class="line"><span class="cl">  fzf-zsh-plugin
</span></span><span class="line"><span class="cl">)
</span></span></code></pre></div><p>我的完整配置可点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/zsh">这里</a>进行查看，各插件安装说明详见官方文档。</p>
<h4 id="tmux">tmux</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/acacritty_tmux_demo.png" alt="acacritty_tmux_demo"></p>
<p>因为 Alacritty 本身不提供窗口拆分、Session 管理等功能，所以我们需要集成 <a href="https://github.com/tmux/tmux/wiki">tmux</a> 这一强大的跨平台窗口管理工具。</p>
<p>macOS 平台用户用过 <code>brew install tmux</code> 安装即可，其他平台可根据<a href="https://github.com/tmux/tmux/wiki/Installing">官方说明</a>进行安装。</p>
<p>其通过 <code>~/.tmux.conf</code> 进行配置，点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/tmux">这里</a>查看我的配置，因其配置使用需要一定学习与记忆成本，本文不做详述，建议通过官方文档或其他完整教程进行学习。</p>
<h4 id="neovim">Neovim</h4>
<p>我们的日常开发的代码编写一般在 VS Code 或 Jetbrains 家的 IDE 中进行，而调试则需要使用终端，如果不想频繁切换于各个软件之间，我们可以选择 vim 这一可用于命令行的编辑工具。</p>
<p>然而，原生 vim 就是一个简单的窗口，与我们的配置好的终端显得格格不入，因此，我们也将对 vim 进行美化配置。限于篇幅，本文不会涵盖 vim 的具体配置使用相关内容，仅对我的配置方案进行描述。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vi_homepage.png" alt="vi_homepage"></p>
<p>我使用的是 neovim 这一 vim 的衍生版本，其高版本采用 lua 进行配置与插件管理。我使用的我的一个朋友 <a href="https://github.com/Cluas">Cluas</a> 定制的方案，并在其基础上进行了一些修改调整，可点击<a href="https://github.com/pseudoyu/nvim/tree/pseudoyu">这里</a>查看，仅需将 <code>nvim/</code> 目录 clone 或下载后复制到 <code>~/.config</code> 即可。</p>
<p>其显示效果如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/neovim_file_preview.png" alt="neovim_file_preview"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/neovim_edit_file.png" alt="neovim_edit_file"></p>
<h4 id="快捷键配置">快捷键配置</h4>
<p>tmux 是一个强大的窗口管理工具，然而每次都需要使用 <code>&lt;Ctrl+b&gt; + %</code> 或 <code>&lt;Ctrl+b&gt; + :</code> 来进行水平或垂直分屏，或是使用 <code>&lt;Ctrl+b&gt; + c</code> 来新建窗口等操作十分繁琐。</p>
<p>那么，有没有能够通过 macOS 自带的例如其他终端编辑器使用的 <code>Command+D</code>、<code>Command+Shift+D</code> 或 <code>Command+T</code> 来实现分屏或新建窗口等配置呢？</p>
<p>经过了一番调研与折腾，我参照着 <a href="https://www.joshmedeski.com">Josh Medeski</a> 的这篇『<a href="https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux">macOS Keyboard Shortcuts for tmux</a>』完美实现了这一需求。</p>
<p>其基本实现方式为，在终端输入 <code>xxd -psd</code> 命令后，键入所需要映射的 tmux 快捷键，如 <code>&lt;Ctrl+b&gt; + c</code>，其会显示该输入的 hex codes 为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">^Bc
</span></span><span class="line"><span class="cl">02630a
</span></span></code></pre></div><p>其中，<code>02</code> 代表 <code>&lt;Ctrl+b&gt;</code>，<code>63</code> 代表 <code>c</code>，而 <code>0a</code> 代表回车键，因此，在 tmux 中新建窗口的快捷键对应 hex code 为 <code>\x02\x63</code>。我们在 <code>~/.config/alacritty/alacritty.yml</code> 中的 key_bindings 部分配置如下选项即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">key_bindings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- {<span class="w"> </span><span class="nt">key: T, mods: Command, chars</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;\x02\x63&#34;</span><span class="w"> </span>}<span class="w">
</span></span></span></code></pre></div><p>其他快捷键配置实现原理一致，可点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/alacritty">这里</a>查看我的所有快捷键配置并自行修改调整。</p>
<h2 id="总结">总结</h2>
<p>至此，我对我目前所使用的三种终端工具进行了介绍与配置说明，开箱即用的 Warp 有其强大之处，iTerm2 在易用性与定制化上实现了不错的平衡，而 Alacritty 也自有折腾的乐趣。</p>
<p>如我前文所述，有时候换一个终端就是一种全新的心情，闲暇时不断优化折腾也不失为一种放松。当然，每个人的终端配置都各有自己的偏好与特点，本文只是对我的方案进行了介绍，更多满足了自己的审美追求与功能需求，希望能够为你的终端配置提供一个参考，如你在配置中遇到问题或有了更好的优化建议，也欢迎交流。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://github.com/pseudoyu/dotfiles">GitHub - pseudoyu/dotfiles</a></li>
<li><a href="https://github.com/Cluas/nvim">GitHub - Cluas/nvim</a></li>
<li><a href="https://www.warp.dev">Warp 官网</a></li>
<li><a href="https://www.iterm2.com">iTerm2 官网</a></li>
<li><a href="https://alacritty.org">Alacritty 官网</a></li>
<li><a href="https://ohmyz.sh">ohmyzsh 官网</a></li>
<li><a href="https://starship.rs">starship 官网</a></li>
<li><a href="https://neovim.io">Neovim 官网</a></li>
<li><a href="https://github.com/tmux/tmux">GitHub - tmux/tmux</a></li>
<li><a href="https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux">macOS Keyboard Shortcuts for tmux</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>基于 frp 内网穿透的瘦客户端开发工作流</title><link>https://www.pseudoyu.com/en/2022/07/05/access_your_local_devices_using_reverse_proxy_tool_frp/</link><pubDate>Tue, 05 Jul 2022 10:00:16 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/05/access_your_local_devices_using_reverse_proxy_tool_frp/</guid><description>《后来的我们 - 五月天》 前言 在之前的『GitHub - 个人工具箱』项目中，我提到家里放置了一台长期开机的 Mac Studio 和一个装了 Ubuntu 系统的 Raspberry Pi 3b+ 微型树莓派设</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/leopold_fc660c.jpeg" alt="leopold_fc660c"></p>
<p>在之前的『<a href="https://github.com/pseudoyu/yu-tools">GitHub - 个人工具箱</a>』项目中，我提到家里放置了一台长期开机的 Mac Studio 和一个装了 Ubuntu 系统的 Raspberry Pi 3b+ 微型树莓派设备，在家时我通常是将 Mac Studio 连接显示器进行操作或通过 Chromebook 终端 SSH 连接访问。</p>
<p>结束居家办公后，需要每天往返于公司与家里。因为不想每天背着电脑通勤，我将之前的 16 寸 MacBook Pro 主力开发机（真的很重）留在了公司用于工作项目开发使用。虽然可以通过 GitHub 与 GitLab 同步代码，以及通过 OneDrive 与 iCloud 同步文件，每天总还是觉得是在维护两套桌面开发环境，有些配置环境的变更需要双倍的工作量，带来了很大的心智负担。</p>
<p>此外，家里的 M1 Max 芯片机器性能远好于老 Intel MacBook Pro 笔记本，于是，我开始琢磨公网远程访问家庭设备的方案，并实践一种瘦客户端工作流，本文是对这套工作流的一个记录与总结。</p>
<h2 id="瘦客户端thin-client工作流">瘦客户端（thin client）工作流</h2>
<p>被『<a href="https://teahour.fm">Teahour</a>』Podcast 的这期『<a href="https://teahour.fm/95">#95 - 用 Chromebook 做开发是什么样的体验？</a>』种草，第一次了解到了瘦客户端（thin client）开发这种模式。</p>
<h3 id="基本概念">基本概念</h3>
<p>瘦客户端开发是一种日渐流行的开发模式，它的主要理念是自己所使用的开发输入设备（如笔记本、平板电脑等）上并不安装各种开发环境，而是通过终端、VS Code Remote 或 Jetbrains Client 等客户端程序作为入口来连接自己的远程主机或服务器。这种方式有如下好处：</p>
<ol>
<li>可以最大程度简化自己的开发环境，只需要一个终端和一个浏览器即可完成大部分开发工作，可以降低设备成本，甚至使用 Chromebook 或 iPad 即可完成日常开发工作</li>
<li>减少办公场所的限制，可以携带便携设备在咖啡厅或其他场合自由使用，比起本机运行各种开发环境，这种方式也拥有更久的续航</li>
<li>不论从哪个设备上进行开发访问，都能确保自己的开发环境与进度保持一致，降低环境同步与维护成本</li>
<li>往往我们的开发环境为 macOS 或 Window 操作系统，有时本地开发环境会与实际项目运行环境存在一定差异，而在 Linux 系统进行远程开发可以有效降低这种差异，提高开发效率</li>
<li>我们可以将大多数的成本集中在一台性能较为强劲的设备，满足长期开发需求</li>
<li>在有临时的开发需求时，我们可以随开随停一些云服务器，节约成本并提升开发效率</li>
<li>像 Deep Learning 等领域需要使用 GPU 等特定设备进行运算，无法在本地机器进行开发</li>
</ol>
<h3 id="我的瘦客户端工作流">我的瘦客户端工作流</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/thin_client_structure.png" alt="thin_client_structure"></p>
<p>为了降低成本，我的瘦客户端工作流主要基于我自己所搭建的一套内网穿透方案（下文会详细讲述方案原理及搭建方法），在公网中从各个 Client 访问家里性能较强的主机与 Server，完成主要开发工作。</p>
<p>我目前 Client 端的主要设备为：</p>
<ol>
<li>16 寸 MacBook Pro，长期放在公司，作为工作机使用，主要用于浏览网页、文档以及通过 iTerm2 终端工具连接到各个远程主机或 Server 进行开发工作，并通过 Git 管理代码与项目</li>
<li>Google Pixelbook Go，主要是在咖啡店、家中沙发或其他地方进行一些技术学习、博客撰写或个人项目开发</li>
</ol>
<p>而我的 Server 端分以下几类：</p>
<ol>
<li>Mac Studio 主机，连接电源长期开机，是我的主力 Server，通过内网穿透供客户端从公网连接访问，在家办公或学习时连接显示器与键鼠也可以作为客户端连接其他服务器主机</li>
<li>Raspberry Pi，装了 Ubuntu 系统作为主要服务运行与调试环境，主要运行一些服务，通过内网穿透供客户端从公网连接访问</li>
<li>个人阿里云 ECS、腾讯云轻量级服务器或其他公司提供的项目开发环境，主要用于一些项目服务的运行与调试，如链环境等</li>
<li>GitHub Codespaces，参加了内测，GitHub 为个人项目提供多达 10 个项目的运行环境，我主要用于 Solidity、Rust 或前端学习项目的开发，这样可以保障在不同机器甚至浏览器连接时保持一致的环境，不需要自己重新配置搭建，不过出于安全性考虑我不会运行工作项目或一些涉及个人敏感信息的项目</li>
</ol>
<h3 id="我的瘦客户端开发工作体验">我的瘦客户端开发工作体验</h3>
<p>瘦客户端并不仅仅是一种工具技巧上的优化，其初衷本就是一种工作模式的“极简主义”。践行了几个月这样的开发模式，能明显感觉到自己用于开发环境调试与维护的时间减少了，而将更多的注意力放在代码与服务本身，“即开即用”与“随开随停”两种模式的无缝切换也让自己可以时刻切换工作状态与项目，极大减少了环境冷启动、配置等时间成本。</p>
<p>虽然我对软硬件有着自己的使用体验追求，但并不是一个方方面面都追求极致的人，而是遵循着一种“Just Enough”的理念，满足我的当下使用需求即可。例如网络环境方面，我家中就是普通的 100M 宽带网络环境，也并未在带宽与路由器上有刻意折腾。整体体验下来，不管是打字输入还是获取实时显示，操作过程中的网络延迟几乎可以忽略不计（我的主要使用场景为使用 macOS 系统下的 VS Code Remote 或 iTerm2 终端工具，通过 SSH 连接至远程主机或服务器进行开发，以及偶尔使用 Termius 的 SFTP 功能进行文件传输，可供参考），也几乎没有因网络环境而断连的情况。</p>
<p>我仅在配置树莓派时使用过 VNC 进行远程桌面控制，并未进行其他高度依赖于图形界面的操作，网络延迟尚可接受但并不是很建议。</p>
<h2 id="网络远程访问需求分析">网络远程访问需求分析</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/raspberry_pi.jpeg" alt="raspberry_pi"></p>
<p>关于异地网络访问的方案与原理，少数派的这篇『<a href="https://sspai.com/prime/story/remote-lan-access-guide-01">异地网络远程访问指北</a>』中已经对各个方案进行了详细的叙述与评估，我仅仅按照个人需求从方案易用性、费用等维度进行考虑，大家可自行阅读选取适合的方案。</p>
<p>首先，我整理了一下网络条件与需求。</p>
<p>网络条件：</p>
<ol>
<li>租房随便办的短期宽带，没有提供公网 ip，申请估计也很麻烦</li>
<li>家庭无线路由器好像也是小米一个普通的，没有怎么折腾</li>
<li>因为工作和个人开发需要，在阿里云和腾讯云都有服务器长期续费，有公网 ip</li>
</ol>
<p>远程连接需求：</p>
<ol>
<li>通过公网 SSH 访问 Mac Studio 主机，并能够在有需求的时候开放特定端口</li>
<li>通过公网 SSH 访问树莓派，并能够在有需求的时候开放特定端口</li>
<li>要求连接稳定快速，且尽量复用已有软件与服务，避免额外开支</li>
<li>易于拓展新设备（如购入新的树莓派）与配置新端口映射（开放新的服务）</li>
<li>因为家里的网络完全由 Surge 作为软路由托管，已经进行了关闭 DHCP 等配置，因此尽量不要在光猫与路由器层作配置</li>
<li>能够对家庭网络环境连接情况与树莓派 Server 资源情况进行实时监控</li>
</ol>
<h2 id="frp-内网穿透方案">frp 内网穿透方案</h2>
<p>经过一番调研，我选择了开源项目『<a href="https://github.com/fatedier/frp">GitHub - fatedier/frp</a>』，根据其官方文档描述：</p>
<blockquote>
<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性。</p>
</blockquote>
<p>这完美满足了我的需求，我仅仅需要复用自己购置的具有公网 ip 的阿里云服务器作为中转服务器，部署 frp 服务端，暴露对应端口，在需要从公网访问的家庭设备中部署 frp 客户端并进行端口映射，即可实现内网穿透。</p>
<h3 id="方案架构">方案架构</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/frp_structure.png" alt="frp_structure"></p>
<p>首先，我在自己有公网 ip 的服务器上部署了 frp 服务端并暴露了对应的端口。</p>
<p>我家中的内网环境下主要有两台长期连接电源开机的设备，一台 Mac Studio 主机，一台装了 Ubuntu 操作系统的树莓派 Server，主要通过网线/Wifi 连接至无线路由器。我在两台机器分别按照官方说明安装了运行了 frp 客户端，通过配置连接至 frp 服务端，并对 SSH 等需要开启的服务端口映射（如将树莓派的 SSH 服务端口 22 映射到阿里云服务器的 6002）。值得一提的是，因为 frp 客户端会主动发送请求服务端，因此即使更换了网络环境也无需重新配置，仅需要保证其网络环境能访问到安装了 frp 服务端的中转服务器即可。</p>
<p>此时，我的阿里云中转服务器已经可以将我们的内网环境与服务暴露在公网环境中了。当我在公司时，就可以使用笔记本、平板或手机通过阿里云服务器的公网+对应服务的端口进行访问了，如通过终端远程 SSH 连接至 Mac Studio 进行开发工作。</p>
<p>同时，我们会想对家里的网络环境以及两台主机的状态进行实时监控，以便于维护。我使用了 Surge macOS 端作为软路由托管了家中所有设备的网络，并使用了 Surge iOS 端的云通知功能，对家庭的网络状态进行实时监控。此外，我使用了 ServerCat 软件对家中的树莓派 Server 进行资源监控，甚至可以精确到温度等，与云服务器体验无异。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/servercat_monitor_raspberry_pi.png" alt="servercat_monitor_raspberry_pi"></p>
<p>frp 的配置比较简单，按照官方文档进行配置即可，我的配置流程如下。</p>
<h3 id="frp-服务端配置">frp 服务端配置</h3>
<p>我的阿里云装了 CentOS 操作系统，其他 Linux 发行版也大同小异。</p>
<h4 id="服务安装与配置">服务安装与配置</h4>
<p>首先登录阿里云服务器的终端，通过以下命令安装下载 frp 程序（注意，需要根据自己的操作系统从『<a href="https://github.com/fatedier/frp">GitHub - fatedier/frp</a>』项目的 <a href="https://github.com/fatedier/frp/releases">releases</a> 页面下载自己操作系统对应的版本、解压并进入目录。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/fatedier/frp/releases/download/v0.43.0/frp_0.43.0_linux_amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -zxvf frp_0.43.0_linux_amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> frp_0.43.0_linux_amd64/
</span></span></code></pre></div><p>其中的 <code>frps</code> 与 <code>frps.ini</code> 是我们需要关注的文件。<code>frps</code> 即服务端程序，而 <code>frps.ini</code> 则为对应的配置文件。我们使用 <code>vi frps.ini</code> 编辑配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">[common]
</span></span><span class="line"><span class="cl">bind_port = 7000
</span></span><span class="line"><span class="cl">dashboard_port = 7002
</span></span><span class="line"><span class="cl">token = password
</span></span><span class="line"><span class="cl">dashboard_user = admin
</span></span><span class="line"><span class="cl">dashboard_pwd = 123456
</span></span><span class="line"><span class="cl">vhost_http_port = 8080
</span></span></code></pre></div><p>因为我想通过控制台可视化我们的 frp 服务的运行状况，因此同时还配置了 dashboard 相关参数，可以根据自己的需要进行选择，保存或记住本配置，后续使用 frp 客户端连接服务端时需要与之对应。保存配置后即可通过 <code>./frps -c frps.ini</code> 启动服务端。</p>
<p>当然，我们需要配置其开启自启与后台运行，以免每次重启服务器都需要重新配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vi /lib/systemd/system/frps.service
</span></span></code></pre></div><p>添加如下内容并保存，注意需要将 <code>frps</code> 与 <code>frps.ini</code> 的路径改为自己的实际路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">[Unit]
</span></span><span class="line"><span class="cl">Description=frps service
</span></span><span class="line"><span class="cl">After=network.target syslog.target
</span></span><span class="line"><span class="cl">Wants=network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Service]
</span></span><span class="line"><span class="cl">Type=simple
</span></span><span class="line"><span class="cl">ExecStart=/path/to/frps -c /path/to/frps.ini
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Install]
</span></span><span class="line"><span class="cl">WantedBy=multi-user.target
</span></span></code></pre></div><h4 id="服务启动与开机自启配置">服务启动与开机自启配置</h4>
<p>完成配置后，即可通过 <code>systemctl start frps</code> 启动服务端。</p>
<p>我们在命令行键入以下命令配置服务开机自启：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl <span class="nb">enable</span> frps
</span></span></code></pre></div><p>至此，我们的服务端配置完毕。</p>
<h3 id="frp-客户端配置">frp 客户端配置</h3>
<h4 id="服务安装与配置-1">服务安装与配置</h4>
<p>frp 客户端配置和服务端配置类似，通过 <code>wget</code> 命令下载对应版本的 frp 程序，解压并进入目录。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/fatedier/frp/releases/download/v0.43.0/frp_0.43.0_linux_amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -zxvf frp_0.43.0_linux_amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> frp_0.43.0_linux_amd64/
</span></span></code></pre></div><p>其中的 <code>frpc</code> 与 <code>frpc.ini</code> 是我们需要关注的文件。<code>frpc</code> 即客户端程序，而 <code>frpc.ini</code> 则为对应的配置文件。我们使用 <code>vi frpc.ini</code> 编辑配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">[common]
</span></span><span class="line"><span class="cl">server_addr = 114.114.114.114
</span></span><span class="line"><span class="cl">server_port = 7000
</span></span><span class="line"><span class="cl">token = password
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[pi]
</span></span><span class="line"><span class="cl">type = tcp
</span></span><span class="line"><span class="cl">local_ip = 127.0.0.1
</span></span><span class="line"><span class="cl">local_port = 22
</span></span><span class="line"><span class="cl">remote_port = 6001
</span></span></code></pre></div><p>此处的 <code>server_addr</code> 和 <code>server_port</code> 需填写实际的中转服务器的公网 ip 与端口，<code>token</code> 需填写之前配置的 token；下面为自己的需要连接的服务配置端口映射，<code>local_ip</code> 与 <code>local_port</code> 需填写客户端的本地 ip 与端口，如需要开启 SSH 服务则为 <code>127.0.0.1</code> 与 <code>22</code>，而最后的 <code>remote_port</code> 则为该端口在中转服务器中的端口映射。</p>
<h4 id="服务启动与开机自启配置-1">服务启动与开机自启配置</h4>
<h5 id="ubuntu">Ubuntu</h5>
<p>在树莓派的 Ubuntu 系统中，我们通过 <code>vi /etc/systemd/system/frpc.service</code> 新建或编辑 fprc 服务配置文件，添加如下内容并保存，同样，需要将 <code>fprc</code> 与 <code>fprc.ini</code> 修改为自己的实际路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">[Unit]
</span></span><span class="line"><span class="cl">Description=frpc daemon
</span></span><span class="line"><span class="cl">After=syslog.target  network.target
</span></span><span class="line"><span class="cl">Wants=network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Service]
</span></span><span class="line"><span class="cl">Type=simple
</span></span><span class="line"><span class="cl">ExecStart=/path/to/frpc -c /path/to/frpc.ini
</span></span><span class="line"><span class="cl">Restart= always
</span></span><span class="line"><span class="cl">RestartSec=1min
</span></span><span class="line"><span class="cl">ExecStop=/usr/bin/killall frpc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Install]
</span></span><span class="line"><span class="cl">WantedBy=multi-user.target
</span></span></code></pre></div><p>完成配置后，通过 <code>sudo systemctl enable frpc.service</code> 开启服务自启，通过 <code>sudo systemctl start frpc.service</code> 启动客户端服务。</p>
<h5 id="macos">macOS</h5>
<p>而在 macOS 系统中，我们则通过 <code>vi ~/Library/LaunchAgents/frpc.plist</code> 编辑 plist 来添加服务自启，同样需要将 <code>fprc</code> 与 <code>fprc.ini</code> 修改为自己的实际路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
</span></span><span class="line"><span class="cl">&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN
</span></span><span class="line"><span class="cl">http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;
</span></span><span class="line"><span class="cl">&lt;plist version=&#34;1.0&#34;&gt;
</span></span><span class="line"><span class="cl">&lt;dict&gt;
</span></span><span class="line"><span class="cl">&lt;key&gt;Label&lt;/key&gt;
</span></span><span class="line"><span class="cl">&lt;string&gt;frpc&lt;/string&gt;
</span></span><span class="line"><span class="cl">&lt;key&gt;ProgramArguments&lt;/key&gt;
</span></span><span class="line"><span class="cl">&lt;array&gt;
</span></span><span class="line"><span class="cl">&lt;string&gt;/path/to/frpc&lt;/string&gt;
</span></span><span class="line"><span class="cl">&lt;string&gt;-c&lt;/string&gt;
</span></span><span class="line"><span class="cl">&lt;string&gt;/path/to/frpc.ini&lt;/string&gt;
</span></span><span class="line"><span class="cl">&lt;/array&gt;
</span></span><span class="line"><span class="cl">&lt;key&gt;KeepAlive&lt;/key&gt;
</span></span><span class="line"><span class="cl">&lt;true/&gt;
</span></span><span class="line"><span class="cl">&lt;key&gt;RunAtLoad&lt;/key&gt;
</span></span><span class="line"><span class="cl">&lt;true/&gt;
</span></span><span class="line"><span class="cl">&lt;/dict&gt;
</span></span><span class="line"><span class="cl">&lt;/plist&gt;
</span></span></code></pre></div><p>至此，我们就可以在公网环境下通过中转服务器的对应端口了解到我们的内网服务了，且不论是服务端还是客户端，服务都会开机自启。我们可以通过 <code>&lt;公网 ip&gt;</code> + 刚在服务端配置的 <code>dashboard_port</code> 端口访问 frp 控制台，查看各服务流量情况。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/frp_dashboard.png" alt="frp_dashboard"></p>
<h2 id="总结">总结</h2>
<p>以上就是我对公网远程访问家庭设备与瘦客户端工作流的实践与总结，这带来了一种很有趣的、有别于传统模式的开发体验，有兴趣的同学可以自行尝试。希望本文对你有所帮助。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://github.com/fatedier/frp">GitHub - fatedier/frp</a></li>
<li><a href="https://teahour.fm/95">Teahour #95 - 用 Chromebook 做开发是什么样的体验？</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>周报 #02 - 工作、焦虑与成长</title><link>https://www.pseudoyu.com/en/2022/07/03/weekly_review_20220703/</link><pubDate>Sun, 03 Jul 2022 12:54:39 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/03/weekly_review_20220703/</guid><description>《后来的我们 - 五月天》 前言 从实习开始，来到北京开始工作已经满一周年了。 自己一直是一个有着莫名仪式感的人，在这个节点也会频繁回顾这一年的所思所</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/raspberry_pi.jpeg" alt="raspberry_pi"></p>
<p>从实习开始，来到北京开始工作已经满一周年了。</p>
<p>自己一直是一个有着莫名仪式感的人，在这个节点也会频繁回顾这一年的所思所想与所得，当然，也包括那些焦虑与遗憾。我常常想，一年前的今天，那个带着紧张与期待的自己，会想从未来这一年得到些什么？</p>
<p>于是，本篇就来聊聊工作、焦虑与成长。</p>
<h2 id="关于工作">关于工作</h2>
<h3 id="入职">入职</h3>
<p>自己其实并不是一个很认真对待求职这件事的人，大概也因为即使是北京，可选的区块链公司也并不多，从香港回深圳隔离的酒店里一共也只参加了大概五六场面试，不过有些印象还比较深。</p>
<p>其中一家没有什么常规流程，第一轮就与一位美国的面试官共享屏幕，两个小时完成一个 ERC20 Token 智能合约的编写、测试与发布，而第二轮则也是通过 Shell 脚本完成一个系统级定时任务的编写；另一家则是问了许多关于 EVM 底层优化及如何避免合约中的无限循环相关的问题。</p>
<p>而最终选择的这家则是由两个技术 leader 共同参与的，一位问了一些 Go 语言相关问题，而另一位则问了许多 Hyperledger Fabric 与 Ethereum 相关的问题（后来知道他是之前 IBM Fabric 团队的开发者），后来还聊了许多和之后发展方向有关的事，一共大概持续了近一个半小时外加一场半小时的算法笔试。</p>
<p>我其实挺享受并珍惜这种能够从面试中获得一些从未接触过的工程相关知识，或是能与面试官相对平等沟通的机会的，也会让自己在其中快速学习，或至少能稍明确一些方向。</p>
<p>到了北京后又参加了一场 HR 面后就正式作为实习生入职了，就这样开始了自己的第一份正式技术实习。</p>
<h3 id="实习">实习</h3>
<p>初接触技术岗，前期的忐忑多于新奇，对于从学校的理论走向企业工程实践这一部分自己并没有太多信心，Go 语言也只是应对面试学了几个月的大概，甚至也没有参与编写过一个用于生产的应用。</p>
<p>作为一个刚入行的 CRUD Boy，最开始也是 leader 成哥带着我从写业务接口开始熟悉的。主要是一个 BaaS 平台的研发，七个接口写了两周，有的复杂 sql 反复测试优化；也完整体验了 git 提交规范、Code Review 和代码合并流程。其实还是一个挺有乐趣的过程，自己写的代码运行在生产项目中，自己所学的各种知识能够很快应用在工作中获取一些实时的反馈，以及一个团队共同为了一个目标和节点向前推进。</p>
<p>这个项目的主要开发工作完成后，我想去做一些链相关的开发，于是申请了参与另一个组的自研链智能合约执行引擎性能优化项目，不过因为并不熟悉 java，只能边对理论做一些学习研究边尝试写一些测试，这是当时做的博文记录，『<a href="https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/">Ethereum MPT（Merkle Patricia Tries）详解</a>』，也是这段时间经历才意识到原来刷 LeetCode 时那些枯燥的算法原理真的会那么快用上。</p>
<p>可能因为是实习，工作节奏并不是很快，还有很多时间可以自己对感兴趣的领域或技术进行了解，写了如下博文进行记录：</p>
<ol>
<li><a href="https://www.pseudoyu.com/en/2021/09/07/blockchain_baas_platform/">区块链服务平台（BaaS）简介及架构</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/08/blockchain_consensus/">分布式系统与区块链共识机制</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/06/blockchain_crosschain/">跨链技术原理与实战</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/09/blockchain_crosschain_bitxhub/">BitXHub 跨链插件（Fabric）源码解读</a></li>
</ol>
<p>很有意思的是，因为公司内部并没有一个内容发布平台，我这段时间常常给我们友商的区块链技术博客平台投稿并且获取他们技术核心人员的一些学习反馈，在跨链这一块受益良多，也让我感觉到技术的开放性。</p>
<p>其实这个时候还没决定是否要留下来，也与其他心仪的一些公司有一些联系。不过紧接着，跟着另一个 leader 涛哥参与了另一个跨链项目，随着和他接触越来越多，我看到了一个技术人的热忱与无限可能性。我们同样爱折腾各种新奇的工具和技术，时常互相分享；他知道我时常焦虑于缺乏足够的工程经验和能力，于是让我参与到各个项目实战，有时在周末还会带着我 Pair Programming。</p>
<p>他是 <a href="https://github.com/hyperledger/cello">Hyperledger Cello</a> 的核心开发者，会鼓励我参与开源，当时说过的一句话我依然记忆犹新，大意是，作为一个技术人，除了完成自己一项项工作任务外，总需要在自己的技术生涯中有几个标签，比如“某某开源项目核心贡献者”等等，我也需要不断努力去找到自己的标签。这一点对我影响很深，在后续的工作学习中，我也开始持续关注开源社区并且慢慢参与其中。</p>
<p>一个可遇不可求的 leader 在影响我选择的因素中占据了更大的比重，所以其实没有太多犹豫，我留下了。</p>
<h3 id="工作">工作</h3>
<p>紧接着就参与了我严格意义上的第一个完整的、也几乎贯穿了我工作第一年大部分时光的项目，是一个底层跨链项目。</p>
<p>大概是得益之前工作之余对跨链的学习了解，我在刚实习转试用之际就莫名地担任了项目负责人，参与技术方案探讨、前期系统设计、底层链部分的开发改造、开发流程的规范化、Devops 环境的使用、讲解演示以及项目交付相关的文档与沟通相关工作。这带来了工作之初我未曾设想的压力和焦虑，同时，也带来了我的快速成长。</p>
<p>白天的各种会议一开就是大半天，几乎只有晚上才能沉下心写几行代码；为了赶一个个项目节点，熬夜甚至通宵都已经成为了常态；遇到许多技术难点可能一卡就是几天，却也不得不同时兼顾其他部分的开发任务进度；与之相伴的还有很多很多情绪的压抑与生活节奏的失控。</p>
<p>但当自己真正和团队一起完成了这个项目的最终交付时，那种喜悦感与成就感也是从未体验到的，可能这对于我的意义尤其特别，从本科的英语专业、到去留学转至计算机，在很多课程学习中常常有受挫的时候，期间也不止一次质疑过自己能否在这条路走下去。而这个项目虽然过程磕磕绊绊，我们终究还是做到了，这也给了我莫大的信心。</p>
<h3 id="相处">相处</h3>
<p>值得一提的是工作之后人与人的相处模式，我似乎一直没有褪去身上那一份学生气，不论是面对 leader、同事还是项目合作伙伴，似乎都是以一种比较直接与坦诚的方式进行交流的。在五月自己的生活经历了一些变故时，团队的小伙伴承担了更多工作职责让我可以自己有所调整；刚结束的项目的一个客户负责人会打电话给我聊三四个小时安慰我；而另一个在建项目的负责人也在帮我申请能否去出差以稍缓一下心情。工作其实也并没有那些贩卖焦虑的推文描述的那般沉闷，我也始终觉得不论处于什么环境或是场合，关系与相处都是互相的，真诚相待其实也能够同样收获一些信任与真心。</p>
<h3 id="收获困境与改变">收获、困境与改变</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dev_guide.png" alt="dev_guide"></p>
<p>一年过去了，第二个项目也即将结束了，我从这一年里学到了很多，也想以自己的方式为部门留下些什么，于是决定写了一份技术指南。除了开发规范外，还包括了这几年我对区块链的一些学习记录，以及一些从工作中学到的实战记录，这些都是我刚步入这份工作时希望能学到的，也希望能够告诉新加入的成员。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dev_guide_content.png" alt="dev_guide_content"></p>
<p>尽管工作才过去了一年，技术与经验上还有很多想提升与成长的，但对于方向却多少有了一些迷茫。想钻研一下区块链底层技术，打磨公司或个人的产品，以及更多参与到开源建设中，但工作之中也常常疲于一个个项目交付时间节点，很难有完整的时间学习研究，这也是后续的工作生涯中我需要克服与调整的难题。</p>
<p>所幸另一个 leader 楷哥很关注开源和技术底层这一部分，偶尔的交流也都为我指明了一些方向，还有很多需要去学习提升的，技术之路漫漫，任重而道远。</p>
<h2 id="总结">总结</h2>
<p>以上就是我在现在这个时间节点对于工作的一些总结，现在也渐渐享受于以这样的方式梳理、记录自己的生活、工作与心境，也希望在下一年回望正在经历的这一年时，能够看到自己更多改变与成长，共勉。</p>
]]></content:encoded></item><item><title>通过状态锁在 Solidity 智能合约中实现两阶段提交</title><link>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</link><pubDate>Fri, 01 Jul 2022 10:54:57 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</guid><description>《后来的我们 - 五月天》 前言 在一些牵扯到多个系统或合约交互的智能合约应用场景中，尤其是一些资产/数据准确性较为敏感的业务中，我们需要保证在整个</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>在一些牵扯到多个系统或合约交互的智能合约应用场景中，尤其是一些资产/数据准确性较为敏感的业务中，我们需要保证在整个业务流程中数据的原子性。因此，我们需要在合约层面实现类似多阶段提交的机制，即将合约中的状态更改过程分解为预提交和正式提交两个阶段。</p>
<p>本文通过状态锁的机制实现了一个最小化的两阶段提交模型，完整合约代码参见 <a href="https://github.com/pseudoyu/learn-solidity/blob/master/practice/two_phase_commit/TwoPhaseCommit.sol">TwoPhaseCommit.sol</a>，下文将对本合约核心逻辑进行讲解，并尽量遵循风格指南与最佳实践。</p>
<blockquote>
<p>注：本合约因初始场景主要考虑的是联盟链中的业务用途，未对 Gas fee 等进行特定优化，仅供学习参考。</p>
</blockquote>
<h2 id="合约逻辑">合约逻辑</h2>
<h3 id="合约结构">合约结构</h3>
<p>两阶段提交场景包含以下方法：</p>
<ol>
<li>set: 两阶段 - 预提交</li>
<li>commit: 两阶段 - 正式提交</li>
<li>rollback: 两阶段 - 回滚</li>
</ol>
<p>因 Solidity 语言对于字符串长度判断/比较等有一些限制，为了提升合约代码的可读性，本合约提供了部分辅助方法，主要包含以下方法：</p>
<ol>
<li>isValidKey: 检查 key 是否合法</li>
<li>isValidValue: 检查 value 是否合法</li>
<li>isEqualString: 比较两个字符串是否相等</li>
</ol>
<h3 id="两阶段提交核心逻辑">两阶段提交核心逻辑</h3>
<p>在两阶段提交场景中，本合约提供了一套简易的 <code>set</code>, <code>commit</code>, <code>rollback</code> 方法实现，实现了将合约调用传入的 key-value 键值对存储到链上。我们通过状态锁的机制来实现跨链交易的原子性。我们定义了如下数据结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="nc">State</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">UNLOCKED</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOCKED</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">Payload</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">State</span> <span class="n">state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">string</span> <span class="nb">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">string</span> <span class="n">lockValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中，<code>State</code> 为枚举类型，记录了链上 key 值的锁定状态，而 <code>Payload</code> 结构则会对锁定状态、当前值与正在锁定的值进行存储，并通过如下 <code>mapping</code> 结构与 key 进行绑定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">mapping</span> <span class="p">(</span><span class="kt">string</span> <span class="o">=&gt;</span> <span class="n">Payload</span><span class="p">)</span> <span class="n">keyToPayload</span><span class="p">;</span>
</span></span></code></pre></div><p>因此，我们可以根据 <code>keyToPaylaod</code> 对合约调用中的每一个 key 进行状态跟踪，并在下述 <code>set</code>, <code>commit</code>, <code>rollback</code> 方法中对 key 的状态进行检查，进行一些异常处理。</p>
<h4 id="set">set()</h4>
<p>在 <code>set()</code> 方法中，我们会检查 key 的状态，如为 <code>State.LOCKED</code>，则不会进行存储并抛出异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">==</span> <span class="n">State</span><span class="p">.</span><span class="n">LOCKED</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如为 <code>State.UNLOCKED</code>，则会将合约调用传入的值存储至 lockValue 中，并将其状态设置为 <code>LOCKED</code>，等待后续 <code>commit</code> 或 <code>rollback</code> 进行解锁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">=</span> <span class="n">State</span><span class="p">.</span><span class="n">LOCKED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span> <span class="o">=</span> <span class="n">_value</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="commit">commit()</h4>
<p>在 <code>commit()</code> 方法中，我们会检查 key 的状态，如为 <code>State.UNLOCKED</code>，则不会对该 key 进行操作，并抛出异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">==</span> <span class="n">State</span><span class="p">.</span><span class="n">UNLOCKED</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsNotLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如为 <code>State.LOCKED</code>，我们检查合约调用传入的值是否与 lockValue 相等，如不相等，则抛出异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isEqualString</span><span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span><span class="p">,</span> <span class="n">_value</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsInconsistent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如值相等，则会将该 key 所对应的 value 存储上链，将 key 的状态设置为 <code>UNLOCKED</code>，更新当前值 <code>value</code>，同时将 <code>lockValue</code> 置空：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">store</span><span class="p">[</span><span class="n">_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">=</span> <span class="n">State</span><span class="p">.</span><span class="n">UNLOCKED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="nb">value</span> <span class="o">=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="rollback">rollback()</h4>
<p>在 <code>rollback()</code> 方法中，我们会检查 key 的状态，如为 <code>State.UNLOCKED</code>，则不会对该 key 进行操作，并抛出异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">==</span> <span class="n">State</span><span class="p">.</span><span class="n">UNLOCKED</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsNotLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如为 <code>State.LOCKED</code>，我们检查合约调用传入的值是否与 lockValue 相等，如不相等，则抛出异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isEqualString</span><span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span><span class="p">,</span> <span class="n">_value</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsInconsistent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如值相等，则会将该 key 所对应的 value 存储上链，将 key 的状态设置为 <code>UNLOCKED</code>，并将 <code>lockValue</code> 置空：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">=</span> <span class="n">State</span><span class="p">.</span><span class="n">UNLOCKED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="错误处理逻辑">错误处理逻辑</h3>
<p>在合约执行异常场景中，我们会抛出错误并进行回滚。为了更好地提升错误消息的可读性并方便上层应用人员进行错误捕获与处理，我们采用了错误类型定义的方式，定义了各类异常场景，因为我在错误命名中已经包含了大部分信息，所以未定义错误类型额外参数值，可以根据需求自行定制。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataKeyIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataValueIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataIsNotExist</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataIsLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataIsNotLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">error</span> <span class="n">TwoPhaseCommit__DataIsInconsistent</span><span class="p">();</span>
</span></span></code></pre></div><p>在具体合约逻辑中，我们通过 <code>revert</code> 方法抛出异常，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isValidKey</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">_key</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataKeyIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isValidValue</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">_value</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataValueIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">state</span> <span class="o">==</span> <span class="n">State</span><span class="p">.</span><span class="n">UNLOCKED</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsNotLocked</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isEqualString</span><span class="p">(</span><span class="n">keyToPayload</span><span class="p">[</span><span class="n">_key</span><span class="p">].</span><span class="n">lockValue</span><span class="p">,</span> <span class="n">_value</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsInconsistent</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="通用参数校验">通用参数校验</h3>
<p>我们会对传入参数进行一些合法性校验，为了提供拓展性，我们通过 <code>isValidKey()</code> 与 <code>isValidValue()</code> 方法对 key 与 value 进行独立校验：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @notice 数据键格式校验
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param _key 数据 - 键
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">isValidKey</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span> <span class="n">_key</span><span class="p">)</span> <span class="k">private</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bytes</span> <span class="k">memory</span> <span class="n">key</span> <span class="o">=</span> <span class="n">_key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">key</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @notice 数据值格式校验
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param _value 数据 - 值
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">isValidValue</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span> <span class="n">_value</span><span class="p">)</span> <span class="k">private</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bytes</span> <span class="k">memory</span> <span class="nb">value</span> <span class="o">=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nb">value</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>本合约只进行了非空校验，可根据业务需要自行定制业务逻辑，在需要校验的地方调用即可，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isValidKey</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">_key</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataKeyIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isValidValue</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">_value</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataValueIsNull</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isValidValue</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">store</span><span class="p">[</span><span class="n">_key</span><span class="p">])))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">revert</span> <span class="n">TwoPhaseCommit__DataIsNotExist</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="事件机制">事件机制</h3>
<p>此外，我们定义了核心方法对应的 event，并为事件设置了 indexed 以方便上层应用进行监听和处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">setEvent</span><span class="p">(</span><span class="kt">string</span> <span class="k">indexed</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">indexed</span> <span class="nb">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">getEvent</span><span class="p">(</span><span class="kt">string</span> <span class="k">indexed</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">indexed</span> <span class="nb">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">commitEvent</span><span class="p">(</span><span class="kt">string</span> <span class="k">indexed</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">indexed</span> <span class="nb">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">rollbackEvent</span><span class="p">(</span><span class="kt">string</span> <span class="k">indexed</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">indexed</span> <span class="nb">value</span><span class="p">);</span>
</span></span></code></pre></div><p>在合约方法中通过 <code>emit()</code> 方法抛出 event，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">setEvent</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">getEvent</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">commitEvent</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">rollbackEvent</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_value</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我两阶段提交合约的一个最佳实践，关于 Solidity 基础语法可参看『<a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a>』，后续我还会对更多合约场景进行实践与讲解，敬请关注。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://github.com/pseudoyu/learn-solidity/blob/master/practice/two_phase_commit/TwoPhaseCommit.sol">TwoPhaseCommit.sol 合约源码</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a></li>
<li><a href="https://docs.soliditylang.org/en/v0.8.15/">Solidity 官方文档</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>周报 #01 - 情感、安全感与认真生活</title><link>https://www.pseudoyu.com/en/2022/06/28/weekly_review_20220626/</link><pubDate>Tue, 28 Jun 2022 22:54:39 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/28/weekly_review_20220626/</guid><description>《后来的我们 - 五月天》 前言 写周报的心思从生日前就有了，最早吸引我的是 Xuanwo 大佬的开源周报，一方面是憧憬这样能每周有所产出有所贡献的状态，而另一方</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/leopold_fc660c.jpeg" alt="leopold_fc660c"></p>
<p>写周报的心思从生日前就有了，最早吸引我的是 <a href="https://twitter.com/OnlyXuanwo">Xuanwo</a> 大佬的开源周报，一方面是憧憬这样能每周有所产出有所贡献的状态，而另一方面也是对以周为一个尺度观察与衡量自己的生活、工作与学习这样的形式很感兴趣。</p>
<p>放弃思考总是一件再容易不过又最心安理得的事，生活早已充斥着无数的琐事、噪音以及各种“高优先级”的事，有时候即使难得空出一片完整的时间，似乎也会选择发呆放空，这大概就是生活的惯性吧。即使是作为本系列的开始，新鲜感和尚有余温的 flag 也没能抵挡过惰性，在预定之期的两天后才缓缓动笔。</p>
<p>虽然这定位是一个周报，我依然想采用每篇涵盖特定主题的完整文章这种形式，而不仅仅是条目的堆砌。也许在目前这样的生活阶段我会更多专注在感情与生活的思考，在之后的一些阶段可能也会在意生活方式与对个人发展的观察，可能不必每篇都需要站在一个高度来为自己指明方向或口号式激励，我更愿意将其视为一种对话。</p>
<p>本篇我们就来聊聊情感、安全感与认真生活。</p>
<h2 id="从零开始的生活">从零开始的生活</h2>
<p>五月虽然称不上是浑浑噩噩，但也远远算不上积极，以各种理由逃避着面对生活的种种变动。从某个痛苦的深夜下定决心要以生日为期，做一些生活环境与习惯的调整，重新开始一个人认真生活。</p>
<p>其实这个短句于我而言有着多重意义，『重新』、『一个人』、『认真』以及『生活』。</p>
<p>似乎已经很久很久没有以个人的角度来经营自己的生活了，久到自己已经丧失了这种“技能”或是“习惯”。自大学起的六七年可以自由支配的时光里，自己似乎就是一个倾向于从自己所在做的事中获取“注意力”的人，再加上还算温和的性格，身边也不并不缺乏社交。所以很长很长的时间里我只需要专注在自己身上，而并没有将过多的目光投向以我的生活为轴辐射出来的我们称之为“生活”的元素集合。</p>
<p>而经过了从学生到步入职场的生活转变，当自由的时间与可支配的注意力被来自工作与似乎到了这个年纪自然而然会去在意的一些相处与社交所侵占，我似乎更难从中找到属于自己的那部分了。</p>
<p>被生活裹挟着前进像是一种随着年龄增长而培养起来的被动技能。大多数人会称赞于“前进”这一部分，似乎在这样的阶段能够依然保留前行的动力就已经难能可贵，但这也是一种思维陷阱，一种由满足感构成的舒适区，也许我们需要克服的并不是被挤压的时间精力，而是在这样的状态下我们如何与焦虑感进行对抗，以维持初衷。</p>
<p>也许是人类天性，即使没有刻意与身边的人进行比较，也总还是在担心或是恐惧一种我称之为『Left Behind』的感觉。自己在学习上似乎总是倾向于不断获取新的资讯或了解新的技术，总是害怕自己的关注点偏移带来的机会成本，投资圈中有个缩写很贴合这一点，『FOMO（Fear of Missing Out）』，总是害怕自己是错过机会的那个，甚至不计成本不加筛选。值得庆幸的是我有不错的自由度能争取到避免工作上无意义的卷，当工作职责完成后自己会将更多的时间精力投入一些自己的事之中。</p>
<p>自己其实是一个不那么依赖社交的人，将自己为数不多愿意外显的情感都倾注于身边最亲近的人，但不知是由于到了一个新的环境还是到了年纪，自己现在似乎会慢慢开始担心自己会不会太过于特立独行而少了新认识朋友的机会，也会害怕自己在同事圈里是那个插不上话的人，虽然算不上功利，但也开始慢慢会以一种更积极更经雕琢的姿态去面对他人。</p>
<p>没有方向与初衷的前进会减轻自己的焦虑感，却可能会带来长期以来的停滞甚至是轨道的偏离，这部分的界限很难去把握，自己似乎也一直是不那么擅长处理这些的人，但想要重新掌握自己的生活就需要与这些不断进行对抗，而人的天性也总是会倾向于选择轻松的方式。所以，最大的敌人依旧是自我。</p>
<h2 id="感情中的illustion与reality">感情中的『Illustion』与『Reality』</h2>
<p>其实现在提起感情还是难以避免痛苦与失落，但也渐渐到了可以 Look back 的时候了，之前看到过这样一句话：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/love_is_illusion.png" alt="love_is_illusion"></p>
<p>之前谈论感情的『<a href="https://www.pseudoyu.com/en/2022/06/06/yearly_review_25/">25 岁的自白：花束般的恋爱</a>』中有提到：</p>
<blockquote>
<p>有的时候生活只有拼了命的去改变、去适应，才能勉强的，维持现状。</p>
</blockquote>
<p>其实后来想想这也是一件很奢望且不可能维持的事，感情会衰退是一件像是“人会变老”这样一件虽然是常识但终究要切身体会了才能真正理解的概念。像是很多生活中在发生的事，家里洗手间的下水道堵了，每次洗完澡会漫出一点，可能一周前就这样了，也许更久。因为也不会漫太多影响房间，只是稍微湿一下脚，没多久也就退了，所以一直没太在意，也没去修；或是自己每次关门是还总是很小心翼翼地虚掩和回头看一下，生怕猫乱跑出去，过了好一会儿才意识到已经离开这个家很久了，只是习惯了。可能很多事就是这样，在怔怔地看着一个既定结果时候恍然，原来它一直在发生，只是自己没注意到。</p>
<p>可能关于感情目前越来越认识到的是记忆并没有那么坚固，习惯与过去那些最美好的瞬间也会因为时间流逝而一点点变得陌生，而现实也很多时候在加速这个过程。而自己有些太过于依赖这些美好的感受了，觉得这些重过一切。其实自己也不知道怎么去形容感情中幻想与现实重叠后的种种，只是各种记忆碎片似乎也以各种方式提醒着我这些事和情绪真真切切地发生过。就像很多曾经说过的记住的话或是因为相处久了共同养成的习惯总会在某些瞬间像是恶作剧般出现，甚至有的部分像是已经成为了一种症状。</p>
<p>比如，每到傍晚大概六点多时，我总是会想起当时她说的当她小憩到日暮看着窗外时，会感到尤其孤独与难受，似乎这个世界上只有自己一个人。可能我一直自诩是一个坚强的人，当时也并没有完全做到感同身受，只是希望每次这样的时候醒来的时候能陪着她。而现在似乎自己也陷入了这样的状态，甚至连周遭太安静或是太吵闹都会感受到这种孤独感，当然，这是另外的话题了。</p>
<h2 id="孤独感与安全感">孤独感与安全感</h2>
<p>如前文所述，自己似乎曾经并不是一个那么害怕孤独的人，或者至少没有很敏感。而随着生活状态的改变，我对孤独的感知也愈加显著。现在不论做什么，似乎都需要放着 Podcast 或是白噪音才能略平复一些，而音乐又似乎有些太过吵闹，以至于没办法集中注意力去享受旋律，而只是带来烦躁感。也许自己把太多对于安全感的追求寄托于情感，当这一部分缺失时，被过度保护的安全感也就消散了，而与其相生相伴的孤独感却迅速侵袭了我的生活。也许在之后很久的时光里，孤独感都会像是一个朋友一样如影随形，我尚未学会如何与它相处，但也逐渐在习惯它的存在。</p>
<p>也许渐渐地，我会将这些寄托放置在亲近的朋友、家人或是其他的关系上，这样稀松平常的事其实对于过去的我来说并不是一件容易的事。不知是出于害怕麻烦他人还是所谓的自我坚持，似乎自己即使在面对亲人或是最信任的挚友身上也有一种自我保护，也有一些“报喜不报忧”的倾向，总是不愿意主动承认自己的弱点或是分担自己的情绪。这无关熟悉程度，只是我似乎只习惯于在一段亲密关系中表现自己的一切，而可悲的是，爱情的很多阶段依赖与幻想与感受，往往无法承受彻底的真实感所带来的副作用。这也并非是说感情需要隐瞒或是扮演，而是感情并不是一个适合寄托安全感的完美载体，其所依赖的感性与氛围感的部分是需要一定的距离与想象才能构筑的，同样是需要把握其界限与平衡。</p>
<h2 id="学习输入与输出">学习、输入与输出</h2>
<p>这个部分会记录一下自己这边所看的各类影音书籍、折腾的好玩的东西以及工作学习的一些进展，所幸根据『<a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出</a>』这一篇搭建了自己的『<a href="https://t.me/pseudoyulife">Yu&rsquo;s Life 频道</a>』，会自动化采集自己的一些主动输出与输入，如 Twitter、Blog、书签以及 GitHub 动态等，很方便自己进行每周复盘。</p>
<h3 id="技术学习">技术学习</h3>
<p>这周开始恢复去公司上班了，居家快两个月还有些不太习惯，不过能出门对情绪状态也是一种好事。因为项目快要结束了，本身工作量不是很大，不过本周要把 fabric 环境以及一些操作部分熟悉一下，即使不算感兴趣但毕竟也是工作很重要的一环。</p>
<p>最近主要在学 Soldiity 和 Rust 开发，不过这周因为去公司上班了，完整的时间很少，进度一般，需要重新计划一下了。然后打算把 CSAPP 开始重新学习记录一下了，是时候好好沉淀下来补自己的一些技术和底层知识了。</p>
<p>这周和一个 Leader 有了对于区块链和技术的一些有趣的讨论，也对我之后的学习方向提供了一些参照，技术路还很遥远呀，继续加油了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/discuss_about_blockchain_in_twitter.png" alt="discuss_about_blockchain_in_twitter"></p>
<h3 id="输入">输入</h3>
<p>整理了一下自己的 GitHub Star 列表与项目，把一些部分做了分类，以及用 tag 的形式记录到了 Pinboard 中进行管理，把一些稍后读转移到了 Instapaper，目前是一个比较闭环的输入流了。实践下来，这种还是看了不少有价值和营养的内容的，后续需要更专精一些领域深入学习。</p>
<p>影音这一块这周主要在补『黑客军团』，很久之前看过的一部美剧，觉得挺有意思的所以重温了一下前几季并且把最新的一季看了一下；书的话之前的『洛丽塔』还没看完，通勤的时候缓慢在看，因为居家反而搁置了很久。</p>
<h3 id="输出">输出</h3>
<p>写作也是目前坚持了最久也最有成效的一个兴趣了，还赚到了一些意料之外的稿费。这周工作之余在少数派发了一篇『<a href="https://sspai.com/post/73934">2022 年了，聊聊我为什么还在写博客</a>』，反响不错，结识了很多同样在写博客的人，一起交流了下，顺便把博客数据统计系统也再完善了一下。另外又接到了一篇关于区块链的约稿，不过是自己不太熟悉的 stablecoin 相关内容，可以先做一些调研学习。</p>
<h3 id="软硬件优化">软硬件优化</h3>
<p>这周主要是把 n8n 服务通过 docker 转移部署到了 Railway 上，这样就不用担心服务异常问题了，会是一个更加稳定的系统。</p>
<p>使用 frp 实现了家里的内网穿透，可以从公司或者外出的时候只带一台 Chromebook 直接 ssh 远程连接到家里长期开机的 Mac Studio 上进行开发了，之后也打算把树莓派也搭建一下，可以省不少云服务器的成本，也想配合一些温度湿度传感器这些折腾一些好玩的东西。</p>
<p>DJI RS3 相机稳定器到了，折腾了一下学习了基础操作，不过关于调平这一块不太熟悉，之后慢慢学习使用，可以多拍一些。</p>
<p>新键盘 Leoplod FC660C 到了，外观和手感都很喜欢，换为家里的主力键盘了，把 HHKB 带去公司。</p>
<h2 id="习惯兴趣与改变">习惯、兴趣与改变</h2>
<p>我很难界定自己是不是一个喜欢改变的人，我很乐于接受新事物，也能比较快地适应一个新环境，但对于很多熟悉的日常或是尚有眷恋与情感倾注的部分，我又很努力地将其保持原状。家里的布局、穿衣的风格甚至是衣柜里时色系的顺序我都像是强迫症似的保留了原样。甚至是自己一些生活的上的行为模式与习惯，似乎也都不愿意去改变。我很难去界定自己的这些行为，或许是对于过去的眷恋或是自己不愿意接受的改变的偏执吧。</p>
<p>但其实有时候做一些改变与尝试也是一件很有趣的事，也很适合作为新的生活方式或兴趣的探索。这部分也会记录一下自己所做的一些尝试与兴趣培养的进展。</p>
<ol>
<li><strong>输入法</strong>。尝转换到了很久之前就感兴趣却一直没耐下心练习的小鹤双拼，其实也不是为了打字速度有多少提升，只是感觉将自己（被动）坚持了十几年的习惯做一个转换是一种很有趣的体验，大概也有三周了，速度还没有回到全拼时，但打字节奏感好了很多，不过更重要的是似乎从打字这件事也体会到了乐趣与提升所带来的喜悦，这很难想象是能从一件自己做了十几年的事上所能获得的感受。</li>
<li><strong>视频剪辑</strong>。一直很想做一些拍摄和剪辑，虽然因为之前的工作和日常的一些兴趣，不过一直没能完整做些什么创作，可能更多都是技能的培养，打算开始进行一些拍摄与剪辑，顺便好好学习一下稳定器的使用。</li>
<li><strong>运动</strong>。感觉自己宅家太久了，很久没做运动，打算开始用健身环开始做一些日常运动，以及天气好一些可以去滑滑板，至少保持一个相对稳定的频率。</li>
<li><strong>语言</strong>。英语的阅读和写作在日常工作学习用到了很多，但我想更多在口语上多一些提升，也需要有一个稳定的练习频率；而日语也是学完新标日初级后就没再继续，同样的要开始做一些复习和筹备。</li>
<li><strong>音乐</strong>。把家里的吉他寄过来了，自大一学过一阵子后就搁置了许久，之后打算做一些练习，至少音乐是一种能让人放松与平静的艺术，但需要练习与坚持，也会以视频的方式记录一些练习的流程与小作品。</li>
</ol>
]]></content:encoded></item><item><title>2022 年了，聊聊我为什么还在写博客</title><link>https://www.pseudoyu.com/en/2022/06/12/why_i_still_write_blog_in_2022/</link><pubDate>Sun, 12 Jun 2022 13:48:58 +0000</pubDate><guid>https://www.pseudoyu.com/en/2022/06/12/why_i_still_write_blog_in_2022/</guid><description>《后来的我们 - 五月天》 前言 前段时间发了几篇文章介绍了一下自己的博客搭建流程及组件，有很多朋友跟着我的教程也搭建了自己的博客。同时，也有一些朋</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>前段时间发了几篇文章介绍了一下自己的博客搭建流程及组件，有很多朋友跟着我的教程也搭建了自己的博客。同时，也有一些朋友提出了疑问，在 2022 年这个时间节点，已经有那么多成熟的写作与发布平台，为什么我们还要那么大费周章，搭建与更新自己的博客呢？</p>
<p>我从大一（2015 年）开始写公众号，分享一些关于书、电影与个人生活的文章；2018 年开始使用 <a href="https://wordpress.com/">Wordpress</a> 搭建了一个自己的个人博客，并于 2019 年迁移到了 <a href="https://gohugo.io/">Hugo</a> + <a href="https://pages.github.com/">Github Pages</a> 并维护至今
。</p>
<p>在这两年时间里，我共计更新了 70 篇文章，主要包含课程笔记、技术与效率相关主题，自搭建了网站数据统计系统以来有近万名访客。本文想从我个人经历的角度跟大家讲讲我在写博客过程中的所思所想，也许能够为正在犹豫的你提供一些参考。</p>
<h2 id="写博客的初衷与价值">写博客的初衷与价值</h2>
<h3 id="学习笔记发布">学习笔记发布</h3>
<p>可能是因为初高中对语文学科的热忱以及大学时英语专业的耳濡目染，我一直很享受于阅读与分享，很早之前也和故友一起维护过个人公众号，写了一些有关书籍、电影、音乐与个人生活相关的文章。这是我第一次通过文字传达自己的情绪，也体会到了外界反馈带来的欣喜与感动。</p>
<p>后来因为一些原因公众号停止更新了，我也很久没再公开发布文章。不过因为当时有转专业的想法，一直在自己学一些新的知识，会定期把笔记与学习心得记在自己的笔记软件中，逐渐也养成了记录的习惯。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hku_course.jpg" alt="hku_course"></p>
<p>尤其是在香港留学期间，因为是全英授课，课后需要花很多时间来整理回顾，也会分享给很多同学，于是捡起了断更很久的博客，陆续发布了很多学习笔记，收到了很多同学的积极反馈与感谢。后来还加上了网站访问统计、评论等组件，偶尔查看会很惊喜地发现有很多来自搜索引擎的访问者，也给我继续更新提供了很多动力。</p>
<p>博客文章与零散记录的知识点不同，需要有着特定的主题、一定的行文结构与完整的内容。这促使着我在构思与写作时对自己的知识体系进行梳理总结，有时还需要用一些思维导图与流程图来辅助理解，这个过程让我不断巩固所学知识点，帮助我度过了很多作业与考试。</p>
<p>尽管前期阅读的人并不多，但我视其为自己的一个表达渠道，也是自己获取认同感与价值的窗口。因此，一篇文章需要花很多心血来写，让我更自律地放弃了很多无意义的消遣，投入更多时间打磨自己的文章。此外，时间上的紧迫也促进了我对学习方式与效率的思考，在听课或阅读资料时就会自然地从整个知识结构的维度来进行理解与思考。</p>
<h3 id="工作心得记录">工作心得记录</h3>
<p>工作后，因为我从事的区块链行业是一个新兴的领域，有时候一个小小的知识点需要查阅很多零散的资料才能理解，而且大多是来自于同行业大佬的博文，有时候会追着一位博主的文章时间线从头开始看，获益良多。这时，我便也萌生了自己将这些工作学习中踩过的坑记录并分享出来的想法。</p>
<p>我发现网上区块链相关的资料大多都比较简略、偏底层，没有很详细的步骤讲解，对于入门学习者来说可复现性不强。于是，我开始定期把自己的学习心得与工作经验分主题组织成文在<a href="https://www.pseudoyu.com">自己的博客</a>上发布，并将区块链相关的单独抽出来为一个<a href="https://www.pseudoyu.com/blockchain-guide/">入门指南</a>，以便大家学习交流。</p>
<p>发布后得到了很多反馈，也因此结识了不少志同道合的人，建立了自己的关系网络，对自己的学习与工作发展有了更深的认识，甚至也能获得一些有趣的机会。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/work_notes.jpg" alt="work_notes"></p>
<p>工作一段时间后，做了一些项目的技术负责人，需要带团队快速接入项目。这时，我的这些博文就可以作为与团队成员共享的培训资料，极大减少了重复工作量，也推动着自己保持稳定的输出节奏。此外，因为这种乐于分享的态度，我还被指派与团队 leader 一起搭建技术团队的文档库，这推动了部门乃至公司内的信息传播与业务发展，对自己的职业发展也有一些帮助。</p>
<h3 id="效率技巧分享">效率技巧分享</h3>
<p>工作之余，我还是一个效率控，很喜欢折腾各类工具应用，还维护了一个『<a href="https://github.com/pseudoyu/yu-tools">pseudoyu/yu-tool 个人工具箱</a>』项目。久而久之，很多朋友遇到软硬件相关的问题都会来问我，例如“我想实现这个功能有什么好的软件可以做到？”、“这个要怎么下载安装？”等等，我也会一一给他们解答，但因为有些软件自己使用已经不那么频繁，对细节记忆会有偏差。因此，我会将自己软件系统的搭建、使用过程作详细的记录，组织为博文并发布，以便之后自己查阅或直接分享给需要的朋友。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_desktop_setup_in_2022_may.jpeg" alt="my_desktop_setup_in_2022_may"></p>
<p>我一直觉得记录软硬件与这些折腾的过程并不是一些冷冰冰的条目与截图的堆砌，而是我个人价值观、生活方式以及思维方式的传导，正如我在另一篇文章中的有感而发：</p>
<blockquote>
<p>但当我在日常工作学习中使用自己当初花了很多心思调研和优化的系统后，或当一个突发的需求使用到了我之前的一个折腾过的软件/配置时，会莫名地很开心、很有成就感，这大概就是折腾的意义吧。</p>
</blockquote>
<h3 id="个人思考与成长">个人思考与成长</h3>
<p>经过了学业与工作的各个时期，我发现自己在不同阶段与角色可能会有着截然不同的思考与成长，有时回顾起来也会很有感触。因此，我设立了一个『<a href="https://www.pseudoyu.com/en/category/ideas/">思考</a>』板块，之前会以每年生日为期记录一下自己的成长，也会在一些特定的时间节点记录自己的所思所想，后续也将以周报/月报的形式记录自己的一些阶段性感悟。</p>
<p>相信几个月甚至几年后的自己也能从这点点滴滴的记录中找到自己当时的心境。当自己逐渐培养起记录生活的习惯，也会让自己能关注与感受到生活的美好，也能更积极地面对来自未来的挑战。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/warm_comments.png" alt="warm_comments"></p>
<p>个人博客就像自己的一个树洞，在记录与表达自己情绪的同时，也许也会收获一些来自陌生人的温暖。</p>
<h2 id="如何坚持写作">如何坚持写作</h2>
<h3 id="克服心理障碍">克服心理障碍</h3>
<p>写作并不是一件很容易的事，当我很长时间没动笔之后，常常也会觉得“没有手感”，之前没有写作习惯的朋友们可能会更容易感觉“不知道写什么”、“自己写的东西没有意义”或“会不会没人看”。</p>
<p>这其实是一个误区，有句话叫“达人须悦己”，写作（尤其是个人博客写作）不应该是一个目的性很强的事，而应该是一个自我记录、自我发现、自我探索与自我表达的过程。我们每个人都处于不同的角色，都有着自己的独特角度与看待事物的眼光。只要多多关注自己所在或感兴趣的领域，收集碎片化的想法，积极思考，对一些有意思的想法用导图等方式进行挖掘，将这些想法组织成文后，仔细打磨自己的文章，以真诚的态度表达出来，就能创作出有价值的内容。</p>
<h3 id="积极分享传播">积极分享传播</h3>
<p>文章完成后我们可以选择在各个平台发布与传播，积极获取正反馈，也会促进自己更有动力坚持下去。除了个人博客外，我们可以选择简书、知乎、微博这样的内容社区，少数派、即刻等相对垂类的一些内容平台等。</p>
<p>好的内容也会自然地传播，被更多人看到，我们需要做的就是坚持与持续输出，前期可以给自己制定一个固定频率，如半个月/一个月，给自己一些小小的物质激励，后期再慢慢根据自己的情况与意愿调整。</p>
<h2 id="个人博客">个人博客</h2>
<h3 id="为什么选择个人博客">为什么选择个人博客</h3>
<p>上文着重讲了我们如何写有价值的博客文章，现在，我们回到最开始的问题：</p>
<blockquote>
<p>既然已经有了那么多平台了，为什么我们还要选择搭建个人博客呢？</p>
</blockquote>
<p>移动互联网与智能手机普及之后，“blogger” 一词似乎已经成为了时代的眼泪，前段时间我还被加入了一个“致敬仍然在写博客的朋友”的列表，有些哭笑不得。</p>
<p>随着互联网的迅速发展，我们有了更多的表达渠道，却又似乎丧失了表达的欲望。朋友圈、微博等似乎是适合情绪表达的第一阵地，但字数限制与太多的社交关联又让我们望而却步；而知乎、简书这样的平台又似乎太过“专业”，并不适合所有内容，也容易被网络舆论所左右。</p>
<p>个人博客则是一个更完美的选择。我们可以随心所欲地按自己的喜好定制博客的各个模块，而折腾与优化的过程就像装修自己的一个小屋一样，很有成就感。配合个性域名也能打造自己的个人品牌，不管是在个人社交平台还是求职简历上放上自己的个人网站链接都是一个不错的加分项。</p>
<p>还有很重要的一点是，我们在博客上发布的内容与数据都属于我们自己，不会随着平台的消亡而丧失所有数据或经历大规模迁移的痛苦，经历过『虾米音乐』消亡的惨痛教训，我对这一点尤其关注，也会定期备份我的文章数据。</p>
<p>此外，我们可以对个人博客做一些 SEO 优化而无需被内容平台的算法所左右，读者也许会从一篇文章链接到自己的其他想法与态度的表达，让他们感觉文字背后是一个真实的、有趣的人，而不仅仅是互联网同质化知识的一个分子。</p>
<h3 id="如何搭建个人博客">如何搭建个人博客</h3>
<p>我的个人博客最早使用 WordPress 搭建在自己的 Vultr vps 上，因为网络访问比较慢所以迁移到了腾讯云服务器上并且进行备案，虽然访问速度有提升，但是发布博客的流程很繁琐，服务器的维护长期也是一笔不小的开支。</p>
<p>因此，我也一直在探索能够既能保障国内外访问体验，又能够托管在一些平台上，实现部署和发布流程的最优化体验。后来也一直不断在改善博客系统搭建和发布流程，迄今为止对自己的全流程解决方案还是比较满意的，虽然部署和搭建上需要进行一些配置，但后续更新维护都很方便，我对博客搭建流程写了一系列文章。</p>
<h4 id="博客搭建与自动发布系统">博客搭建与自动发布系统</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_blog_page.png" alt="yu_blog_page"></p>
<p>我通过 Hugo 这个静态网站生成器来搭建我的个人博客。Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。</p>
<p>此外，我还对博客配置及所有文章的源文件进行版本管理，配合 GitHub Action 进行自动化部署，自动生成静态站点推送到 GitHub Pages 博客发布仓库。搭建教程请参看：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统</a></li>
</ul>
<h4 id="博客评论系统">博客评论系统</h4>
<p>一个完整的博客当然需要评论系统，像 WordPress 这种系统自身具备了评论插件，而静态博客则需要自己对接评论系统。我最开始选择的是第三方的 Disqus，简单易用，但是会自带很多广告推广，也不够简约。因此，我选择了 Randy 的 Cusdis，一个注重数据隐私的开源的评论系统，并通过 Railway 进行自部署，搭建教程请参看：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
</ul>
<h4 id="博客数据统计系统">博客数据统计系统</h4>
<p>作为一个持续更新运营的博客平台，我们一定很好奇哪篇文章阅读量最高、哪个关键词检索最频繁等，数据统计能帮助我们专注在更有价值的内容创作与分享上。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/splitbee_data.png" alt="splitbee_data"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/google_console_data.png" alt="google_console_data"></p>
<p>类似的工具也很多，我选择了 <a href="https://splitbee.io/">splitbee</a> 与 <a href="https://search.google.com/search-console">Google Console</a> 来统计分析我的访客信息与搜索权重。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_data.png" alt="cloudflare_data"></p>
<p><a href="https://www.cloudflare.com/">Cloudflare</a> 也能够对网络流量进行分析，不过因为有很多网络无关流量，如爬虫等，所以参考性不强。</p>
<p>此外，我选择了一个可代替 Google Analytics 的开源服务 umami，并通过 Vercel 与 Heroku 进行部署，实现了访客数据的实时监控，搭建教程请参看：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
</ul>
<h2 id="总结">总结</h2>
<p>2022 年了，我依然在写博客，并且会继续坚持写下去。博客就像是我的一个私人空间，一篇篇笔记记录了我的变化与成长，也承载了我人生的几段最重要的时光。希望屏幕前的你们也能体会到博客的魅力，让更多的朋友加入我们仍在坚守的“blogger”阵地。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://bytedance.feishu.cn/docs/doccn4sKBEWyyLPziLVyoaudpXd#">讲讲我为什么写 blog</a></li>
<li><a href="https://www.pseudoyu.com">我的 Pseudoyu 个人博客</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统</a></li>
<li><a href="https://www.pseudoyu.com/blockchain-guide/">区块链入门指南</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Solidity 智能合约开发 - Hardhat 框架使用</title><link>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</link><pubDate>Thu, 09 Jun 2022 14:38:10 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</guid><description>《后来的我们 - 五月天》 前言 经过了前几篇对智能合约基础、Web3.py、ethers.js 的学习，我们已经掌握了通过程序与区块链网络直接交互的</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>经过了前几篇对智能合约基础、Web3.py、ethers.js 的学习，我们已经掌握了通过程序与区块链网络直接交互的基础知识，不熟悉的同学可以回顾一下：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/">Solidity 智能合约开发 - 玩转 Web3.py</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/">Solidity 智能合约开发 - 玩转 ethers.js</a></li>
</ul>
<p>但是在真正的复杂业务场景中，我们往往会使用一些进一步封装的框架，如 HardHat、Brownie、Truffle 等，HardHat 是其中应用最广泛、插件拓展最为强大的。本系列将从这篇开始专注于 Hardhat 框架的使用与最佳实践，而本篇则会通过一个简单的例子完成其安装、配置与使用。</p>
<p>本文是对 <a href="https://twitter.com/PatrickAlphaC">Patrick Collins</a> 的 『<a href="https://www.youtube.com/watch?v=gyMwXuJrbJQ">Learn Blockchain, Solidity, and Full Stack Web3 Development with JavaScript</a>』 教程的学习整理，强烈建议看原教程视频了解更多细节。</p>
<p>可以点击<a href="https://github.com/pseudoyu/learn-solidity/tree/master/hardhat_simple_storage">这里</a>访问本测试 Demo 代码仓库。</p>
<h2 id="hardhat-介绍">Hardhat 介绍</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_homepage.png" alt="hardhat_homepage"></p>
<p>Hardhat 是一个基于 JavaScript 的智能合约开发环境，可以用于灵活地编译、部署、测试和调试基于 EVM 的智能合约，并且提供了一系列工具链来整合代码与外部工具，还提供了丰富的插件生态，提升开发效率。此外，它还提供了模拟以太坊的本地 Hardhat 网络节点，提供强大的本地调试功能。</p>
<p>其 GitHub 地址为 <a href="https://github.com/NomicFoundation/hardhat">NomicFoundation/hardhat</a>，可以访问其<a href="https://hardhat.org/getting-started">官方文档</a>了解更多。</p>
<h2 id="hardhat-使用">Hardhat 使用</h2>
<h3 id="初始化项目">初始化项目</h3>
<p>从零开始搭建一个 Hardhat 项目，我们需要预先安装好 <code>node.js</code> 与 <code>yarn</code> 环境，这部份参照官方说明根据自己的系统环境按照即可。</p>
<p>首先，我们需要初始化项目并安装 <code>hardhat</code> 依赖包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn init
</span></span><span class="line"><span class="cl">yarn add --dev hardhat
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add.png" alt="yarn_add"></p>
<h3 id="初始化-hardhat">初始化 Hardhat</h3>
<p>然后需要运行 <code>yarn hardhat</code>，通过交互式命令来进行初始化，根据项目需要进行配置，我们的测试 Demo 选择默认值。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_project_init.png" alt="hardhat_project_init"></p>
<h3 id="优化代码格式化">优化代码格式化</h3>
<h4 id="vs-code-配置">VS Code 配置</h4>
<p>我本地是通过 VS Code 进行代码开发的，可以通过安装 <code>Solidity + Hardhat</code> 与 <code>Prettier</code> 两个插件来进行代码格式化，可以使用打开 VS Code 设置，在 <code>settings.json</code> 中增加如下格式化配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;[solidity]&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;editor.defaultFormatter&#34;</span><span class="p">:</span> <span class="s2">&#34;NomicFoundation.hardhat-solidity&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;[javascript]&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;editor.defaultFormatter&#34;</span><span class="p">:</span> <span class="s2">&#34;esbenp.prettier-vscode&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="项目配置">项目配置</h4>
<p>为了统一各个使用项目的开发人员的代码格式化样式，我们还可以为项目配置 <code>prettier</code> 与 <code>prettier-plugin-solidity</code> 插件支持：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn add --dev prettier prettier-plugin-solidity
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_prettier_plugin.png" alt="yarn_add_prettier_plugin"></p>
<p>添加依赖后，可以在项目目录增加 <code>.prettierrc</code> 与 <code>.prettierignore</code> 配置文件来进行格式化统一：</p>
<p>我的 <code>.prettierrc</code> 配置为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;tabWidth&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;useTabs&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;semi&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;singleQuote&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我的 <code>.prettierignore</code> 配置为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">node_modules
</span></span><span class="line"><span class="cl">package.json
</span></span><span class="line"><span class="cl">img
</span></span><span class="line"><span class="cl">artifacts
</span></span><span class="line"><span class="cl">cache
</span></span><span class="line"><span class="cl">coverage
</span></span><span class="line"><span class="cl">.env
</span></span><span class="line"><span class="cl">.*
</span></span><span class="line"><span class="cl">README.md
</span></span><span class="line"><span class="cl">coverage.json
</span></span></code></pre></div><h3 id="编译合约">编译合约</h3>
<p>无需像 <code>ethers.js</code> 一样自定义 <code>compile</code> 命令，HardHat 预置了 <code>compile</code> 命令，可以将合约放在 <code>contracts</code> 目录下，然后通过 <code>yarn hardhat compile</code> 命令来编译合约：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_compile_contract.png" alt="hardhat_compile_contract"></p>
<h3 id="添加-dotenv-支持">添加 <code>dotenv</code> 支持</h3>
<p>在开始编写部署脚本之前，我们先配置一下 <code>dotenv</code> 插件，这样我们就可以使用 <code>dotenv</code> 来获取环境变量。我们在开发过程中，会牵扯到很多隐私信息，如私钥等，我们会希望将其存储在 <code>.env</code> 文件或直接设置在终端中，比如我们的 <code>RINKEBY_PRIVATE_TOKEN</code>，这样我们就可以在部署脚本中使用 <code>process.env.RINKEBY_PRIVATE_TOKEN</code> 获取到值，无需在代码中显式写入，减少隐私泄漏风险。</p>
<h4 id="安装-dotenv">安装 <code>dotenv</code></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn add --dev dotenv
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_dotenv.png" alt="yarn_add_dotenv"></p>
<h4 id="设置环境变量">设置环境变量</h4>
<p>在 <code>.env</code> 文件中，我们可以设置环境变量，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">RINKEBY_RPC_URL=url
</span></span><span class="line"><span class="cl">RINKEBY_PRIVATE_KEY=0xkey
</span></span><span class="line"><span class="cl">ETHERSCAN_API_KEY=key
</span></span><span class="line"><span class="cl">COINMARKETCAP_API_KEY=key
</span></span></code></pre></div><p>我们就可以在 <code>hardhat.config.js</code> 中读取环境变量了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;dotenv&#34;</span><span class="p">).</span><span class="nx">config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">RINKEBY_RPC_URL</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RINKEBY_RPC_URL</span> <span class="o">||</span> <span class="s2">&#34;https://eth-rinkeby/example&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">RINKEBY_PRIVATE_KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RINKEBY_PRIVATE_KEY</span> <span class="o">||</span> <span class="s2">&#34;0xkey&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ETHERSCAN_API_KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ETHERSCAN_API_KEY</span> <span class="o">||</span> <span class="s2">&#34;key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">COINMARKETCAP_API_KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">COINMARKETCAP_API_KEY</span> <span class="o">||</span> <span class="s2">&#34;key&#34;</span>
</span></span></code></pre></div><h3 id="配置网络环境">配置网络环境</h3>
<p>往往我们的合约需要运行在不同的区块链网络上，如本地测试、开发、上线环境等等，Hardhat 也提供了便捷的方式来配置网络环境。</p>
<h4 id="启动网络">启动网络</h4>
<p>我们可以直接运行脚本来启动一个 Hardhat 自带的网络，但该网络仅仅存活于脚本运行期间，想要启动一个本地可持续的网络，需要运行 <code>yarn hardhat node</code> 命令：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_localhost_node.png" alt="hardhat_localhost_node"></p>
<p>执行完成后，就生成了测试网络与测试账户，供后续开发调试使用。</p>
<p>我们还可以通过 Alchemy 或 Infura 等平台生成自己的测试网节点，记录其 <code>RPC_URL</code> 供程序连接使用。</p>
<h4 id="定义网络">定义网络</h4>
<p>完成网络环境准备后，我们可以在项目配置 <code>hardhat.config.js</code> 中定义网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">RINKEBY_RPC_URL</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RINKEBY_RPC_URL</span> <span class="o">||</span> <span class="s2">&#34;https://eth-rinkeby/example&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">RINKEBY_PRIVATE_KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RINKEBY_PRIVATE_KEY</span> <span class="o">||</span> <span class="s2">&#34;0xkey&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">defaultNetwork</span><span class="o">:</span> <span class="s2">&#34;hardhat&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">networks</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">locakhost</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;http://localhost:8545&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">chainId</span><span class="o">:</span> <span class="mi">31337</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">rinkeby</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">url</span><span class="o">:</span> <span class="nx">RINKEBY_RPC_URL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">accounts</span><span class="o">:</span> <span class="p">[</span><span class="nx">RINKEBY_PRIVATE_KEY</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nx">chainId</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="脚本">脚本</h3>
<p>在 Hardhat 项目中，我们可以通过在 <code>scripts</code> 目录中编写脚本来实现部署等功能，并且通过便捷的命令执行脚本。</p>
<h4 id="编写部署脚本">编写部署脚本</h4>
<p>接下来我们开始编写 <code>deploy.js</code> 脚本。</p>
<p>首先，我们需要从 <code>hardhat</code> 中导入必要包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">ethers</span><span class="p">,</span> <span class="nx">run</span><span class="p">,</span> <span class="nx">network</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;hardhat&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>接着则编写 <code>main</code> 方法，包含我们的部署核心逻辑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">SimpleStorageFactory</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">getContractFactory</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SimpleStorage&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Deploying SimpleStorage Contract...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">simpleStorage</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">SimpleStorageFactory</span><span class="p">.</span><span class="nx">deploy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">deployed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;SimpleStorage Contract deployed at:&#34;</span><span class="p">,</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">address</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取当前值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">retrieve</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Current value:&#34;</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">transactionResponse</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="nx">transactionResponse</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取更新后的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">updatedValue</span> <span class="o">=</span> <span class="kr">await</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">retrieve</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Updated value:&#34;</span><span class="p">,</span> <span class="nx">updatedValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最后运行我们的 <code>main</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span></code></pre></div><h4 id="运行脚本">运行脚本</h4>
<p>完成脚本编写后，可以通过 Hardhat 提供的 <code>run</code> 命令来运行脚本。</p>
<p>如不加网络参数，则默认使用 <code>hardhat</code> 网络，可以通过 <code>--network</code> 参数指定网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn hardhat run scripts/deploy.js --network rinkeby
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_deploy_rinkeby.png" alt="hardhat_deploy_rinkeby"></p>
<h3 id="增加-etherscan-合约验证支持">增加 etherscan 合约验证支持</h3>
<p>将合约部署至 Rinkeby 测试网络后可在 Etherscan 上查看合约的地址，并且进行验证。我们可以通过网站进行操作，但 Hardhat 提供了插件支持，更方便进行验证操作。</p>
<h4 id="安装-hardhat-etherscan-插件">安装 hardhat-etherscan 插件</h4>
<p>我们通过 <code>yarn add --dev @nomiclabs/hardhat-etherscan</code> 命令安装插件。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_etherscan_verify_support.png" alt="yarn_add_etherscan_verify_support"></p>
<h4 id="启用-etherscan-合约验证支持">启用 etherscan 合约验证支持</h4>
<p>完成安装后，我们需要在 <code>hardhat.config.js</code> 中进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;@nomiclabs/hardhat-etherscan&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">etherscan</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">apiKey</span><span class="o">:</span> <span class="nx">ETHERSCAN_API_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h4 id="定义-verify-方法">定义 verify 方法</h4>
<p>接下来我们需要在部署脚本 <code>deploy.js</code> 中添加 <code>verify</code> 方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">ethers</span><span class="p">,</span> <span class="nx">run</span><span class="p">,</span> <span class="nx">network</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;hardhat&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">verify</span><span class="p">(</span><span class="nx">contractAddress</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Verifying SimpleStorage Contract...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">run</span><span class="p">(</span><span class="s2">&#34;verify:verify&#34;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">address</span><span class="o">:</span> <span class="nx">contractAddress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">constructorArguements</span><span class="o">:</span> <span class="nx">args</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;already verified!&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Already Verified!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这个方法我们调用了 <code>hardhat</code> 包中的 <code>run</code> 方法，并且传递了一个 <code>verify</code> 命令，并且传递了一个参数 <code>{ address: contractAddress, constructorArguements: args }</code>。因为可能我们的合约已经在 Etherscan 上验证过，所以我们做了一个 <code>try...catch...</code> 错误处理，如果验证过，则会抛出一个错误，并且输出一个提示信息，而不影响我们的部署流程。</p>
<h4 id="设置部署后调用">设置部署后调用</h4>
<p>定义好我们的 <code>verify</code> 方法后，我们可以在部署脚本中调用它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">network</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">chainId</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ETHERSCAN_API_KEY</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">deployTransaction</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">verify</span><span class="p">(</span><span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>在这里我们做了两个特殊处理。</p>
<p>首先，我们仅需要在 <code>rinkeby</code> 网络上验证合约，而不需要在本地或其他网络环境验证，因此，我们对 <code>network.config.chainId</code> 进行判断，如果是 <code>4</code>，则执行验证操作；否则，不执行验证操作，此外仅在有 <code>ETHERSCAN_API_KEY</code> 环境变量时执行验证操作。</p>
<p>另外，Etherscan 可能需要在部署后一段时间才能获取到合约地址，因此我们配置了 <code>.wait(6)</code> 等待 6 个区块后再进行验证。</p>
<p>执行效果如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_verify_contract_etherscan.png" alt="hardhat_verify_contract_etherscan"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/verified_contract_on_etherscan.png" alt="verified_contract_on_etherscan"></p>
<p>我们通过 Etherscan 验证后访问后可以直接查看合约源码并进行交互。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/interact_with_contract_on_etherscan.png" alt="interact_with_contract_on_etherscan"></p>
<h3 id="合约测试">合约测试</h3>
<p>对于智能合约来说，其大多数操作都需要部署上链，与资产交互，消耗 gas，且一旦有安全隐患会造成严重的后果。因此，我们需要对智能合约进行详细的测试。</p>
<p>Hardhat 提供了完备的测试调试工具，可以在 <code>tests</code> 目录中编写测试脚本，通过 <code>yarn hardhat test</code> 命令运行测试。</p>
<h4 id="编写测试脚本">编写测试脚本</h4>
<p>为我们的部署脚本编写 <code>test-deploy.js</code> 测试程序，首先需要导入必要包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">assert</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;chai&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">ethers</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;hardhat&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>然后编写测试逻辑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s2">&#34;SimpleStorage&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">simpleStorageFactory</span><span class="p">,</span> <span class="nx">simpleStorage</span>
</span></span><span class="line"><span class="cl">    <span class="nx">beforeEach</span><span class="p">(</span><span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">simpleStorageFactory</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">getContractFactory</span><span class="p">(</span><span class="s2">&#34;SimpleStorage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">simpleStorage</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorageFactory</span><span class="p">.</span><span class="nx">deploy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">(</span><span class="s2">&#34;Should start with a favorite number of 0&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">retrieve</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">expectedValue</span> <span class="o">=</span> <span class="s2">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="nx">expectedValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// expect(currentValue.toString()).to.equal(expectedValue)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">it</span><span class="p">(</span><span class="s2">&#34;Should update when we call store&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">expectedValue</span> <span class="o">=</span> <span class="s2">&#34;7&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">transactionRespense</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="nx">expectedValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">transactionRespense</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">simpleStorage</span><span class="p">.</span><span class="nx">retrieve</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="nx">expectedValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// expect(currentValue.toString()).to.equal(expectedValue)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">})</span>
</span></span></code></pre></div><p>在 Hardhat 的测试脚本中，我们使用 <code>describe</code> 包裹测试类，并且使用 <code>it</code> 包裹测试方法。我们需要保证测试前合约已经部署，因此，我们通过 <code>beforeEach</code> 方法在每个测试方法执行前都会调用 <code>simpleStorageFactory.deploy()</code>，并且将返回的 <code>simpleStorage</code> 对象赋值给 <code>simpleStorage</code> 变量。</p>
<p>我们使用 <code>assert.equal(currentValue.toString(), expectedValue)</code> 来对执行结果与预期结果进行比照，可以用 <code>expect(currentValue.toString()).to.equal(expectedValue)</code> 替代，效果一样。</p>
<p>此外，我们还可以通过 <code>it.only()</code> 来指定仅执行其中一个测试方法。</p>
<h4 id="执行测试脚本">执行测试脚本</h4>
<p>我们通过 <code>yarn hardhat test</code> 运行测试，且可以通过 <code>yarn hardhat test --grep store</code> 来指定测试方法。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_run_tests.png" alt="hardhat_run_tests"></p>
<h3 id="添加-gas-reporter-支持">添加 <code>gas-reporter</code> 支持</h3>
<p>如上文所述，gas 是我们在开发过程中需要特别关注的资源，尤其在 Ethereum 主网上尤其昂贵。因此，我们需要在测试过程中查看 gas 消耗情况。HardHat 也有一个 <code>gas-reporter</code> 插件，可以很方便地输出 gas 消耗情况。</p>
<h4 id="安装-gas-reporter-插件">安装 <code>gas-reporter</code> 插件</h4>
<p>我们通过 <code>yarn add --dev hardhat-gas-reporter</code> 命令来安装插件：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_gas_reporter.png" alt="yarn_add_gas_reporter"></p>
<h4 id="启用-gas-reporter-支持">启用 <code>gas-reporter</code> 支持</h4>
<p>我们通过在 <code>hardhat.config.js</code> 中添加 <code>gasReporter: true</code> 及额外配置项来启用插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;hardhat-gas-reporter&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">COINMARKETCAP_API_KEY</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">COINMARKETCAP_API_KEY</span> <span class="o">||</span> <span class="s2">&#34;key&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">gasReporter</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">outputFile</span><span class="o">:</span> <span class="s2">&#34;gas-reporter.txt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">noColors</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">currency</span><span class="o">:</span> <span class="s2">&#34;USD&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">coinmarketcap</span><span class="o">:</span> <span class="nx">COINMARKETCAP_API_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">token</span><span class="o">:</span> <span class="s2">&#34;MATIC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以指定输出文件、是否开启颜色、指定币种、指定代币名称，以及指定代币的 CoinMarketCap API 密钥来根据项目进一步控制输出。</p>
<p>按照以上配置，运行 <code>yarn hardhat test</code> 输出效果如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_add_gas_reporter_support_and_export.png" alt="hardhat_add_gas_reporter_support_and_export"></p>
<h3 id="添加-solidity-coverage-支持">添加 <code>solidity-coverage</code> 支持</h3>
<p>合约测试对于保障业务逻辑正确性与安全防范至关重要，因此，我们需要对合约进行覆盖率测试。HardHat 也有一个 <code>solidity-coverage</code> 插件，可以很方便地输出覆盖率情况。</p>
<h4 id="安装-solidity-coverage-插件">安装 <code>solidity-coverage</code> 插件</h4>
<p>我们通过 <code>yarn add --dev solidity-coverage</code> 命令来安装插件：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_coverage_support.png" alt="yarn_add_coverage_support"></p>
<h4 id="启用-solidity-coverage-支持">启用 <code>solidity-coverage</code> 支持</h4>
<p>我们仅需在 <code>hardhat.config.js</code> 中导入包即可添加覆盖率测试支持：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;solidity-coverage&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="运行覆盖率测试">运行覆盖率测试</h4>
<p>通过 <code>yarn hardhat coverage</code> 即可运行覆盖率测试：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_coverage.png" alt="hardhat_coverage"></p>
<h3 id="task">Task</h3>
<p>上文我们对 <code>hardhat</code> 库的基础功能与脚本进行了一些使用。除此之外，我们还可以自定义一些任务供开发调试使用。</p>
<h4 id="编写-task">编写 Task</h4>
<p>Hardhat 中，我们将任务定义在 <code>tasks</code> 目录下，我们将编写一个 <code>block-number.js</code> 的 Task 来获取区块高度：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">task</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;hardhat/config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;block-number&#34;</span><span class="p">,</span> <span class="s2">&#34;Prints the current block number&#34;</span><span class="p">).</span><span class="nx">setAction</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="kr">async</span> <span class="p">(</span><span class="nx">taskArgs</span><span class="p">,</span> <span class="nx">hre</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">blockNumber</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">hre</span><span class="p">.</span><span class="nx">ethers</span><span class="p">.</span><span class="nx">provider</span><span class="p">.</span><span class="nx">getBlockNumber</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Current Block Number: </span><span class="si">${</span><span class="nx">blockNumber</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>Task 通过 <code>task()</code> 方法来创建，并通过 <code>setAction()</code> 方法来设置任务的执行函数。其中，<code>taskArgs</code> 是一个包含所有参数的对象，<code>hre</code> 是一个 <code>HardhatRuntimeEnvironment</code> 对象，可以用来获取其他的资源。</p>
<h4 id="运行-task">运行 Task</h4>
<p>定义完成后，在项目命令的 <code>AVAILABLE TASKS</code> 中就有了我们刚定义好的 <code>block-number</code> 任务，可以通过 <code>yarn hardhat block-number</code> 命令来运行任务，同样的，我们可以指定特定网络运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn hardhat block-number --network rinkeby
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_run_tasks.png" alt="hardhat_run_tasks"></p>
<h3 id="hardhat-console">Hardhat Console</h3>
<p>最后，除了通过代码与链/合约进行交互外，我们还可以通过 <code>Hardhat Console</code> 来调试项目，查看链状态，合约的输入、输出等。我们可以通过 <code>yarn hardhat console</code> 命令来打开 Hardhat Console，并进行交互。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hardhat_console.png" alt="hardhat_console"></p>
<h2 id="总结">总结</h2>
<p>以上就是我对 Hardhat 框架的基础配置与使用，它是一个很强大的开发框架，我后续还将会继续深入了解它的更多特性与使用技巧，如果有兴趣，可以继续关注，希望对大家有所帮助。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.youtube.com/watch?v=gyMwXuJrbJQ">Learn Blockchain, Solidity, and Full Stack Web3 Development with JavaScript</a></li>
<li><a href="https://github.com/NomicFoundation/hardhat">NomicFoundation/hardhat</a></li>
<li><a href="https://hardhat.org/getting-started">Hardhat 官方文档</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/">Solidity 智能合约开发 - 玩转 Web3.py</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/">Solidity 智能合约开发 - 玩转 ethers.js</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Solidity 智能合约开发 - 玩转 ethers.js</title><link>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</link><pubDate>Wed, 08 Jun 2022 00:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</guid><description>《后来的我们 - 五月天》 前言 在之前的《Solidity 智能合约开发 - 基础》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 Brownie 与 HardHat 等框架进行调试。</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>在之前的《<a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a>》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 <a href="https://github.com/eth-brownie/brownie">Brownie</a> 与 <a href="https://github.com/NomicFoundation/hardhat">HardHat</a> 等框架进行调试。而另一篇《<a href="https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/">Solidity 智能合约开发 - 玩转 Web3.py</a>》中我们也通过 Web3.py 直接与我们本地的 Ganache 节点进行交互了。</p>
<p>原本因为之前比较熟悉 Python 的使用，所以想使用 Brownie 框架进行后续开发。然而经过了一番调研，业界还是使用 HardHat 框架居多，也有更多拓展，且我关注的 Solidity 教程也更新了 <a href="https://www.youtube.com/watch?v=gyMwXuJrbJQ">Javascript 版本</a>，于是还是打算学习一下。</p>
<p>为了更好了解其原理，也为我们后续更好使用框架打好基础，我们这次通过 <a href="https://github.com/ethers-io/ethers.js/">ethers.js</a> 来与我们部署在 <a href="https://dashboard.alchemyapi.io">Alchemy</a> 平台上的 Rinkeby 测试网络进行交互。实现了基础的合约编译、部署至 Rinkeby 网络、与合约交互等功能。</p>
<p>可以点击<a href="https://github.com/pseudoyu/learn-solidity/tree/master/ethers_simple_storage">这里</a>访问本测试 Demo 代码仓库。</p>
<h2 id="ethersjs">ethers.js</h2>
<p>ethers.js 是 Javascript 的一个开源库，可以与以太坊网络进行交互，其 GitHub 地址为 <a href="https://github.com/ethers-io/ethers.js/">ethers.io/ethers.js</a>，可以访问其<a href="https://docs.ethers.io/">官方文档</a>进行使用。</p>
<h3 id="安装">安装</h3>
<p>我们可以通过 yarn 安装 <code>ethers.js</code>，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn add ethers
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yarn_add_ethers.png" alt="yarn_add_ethers"></p>
<h3 id="使用">使用</h3>
<p>使用 <code>require</code> 导入库即可使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ethers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ethers&#39;</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="solidity-合约编译">Solidity 合约编译</h2>
<h3 id="合约源码">合约源码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">SimpleStorage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint256</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">favoriteBool</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">struct</span> <span class="nc">People</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="nb">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">People</span> <span class="k">public</span> <span class="n">person</span> <span class="o">=</span> <span class="n">People</span><span class="p">({</span><span class="n">favoriteNumber</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="o">:</span> <span class="s">&#34;Arthur&#34;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">People</span><span class="p">[]</span> <span class="k">public</span> <span class="n">people</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">mapping</span><span class="p">(</span><span class="kt">string</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="k">public</span> <span class="n">nameToFavoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">store</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_favoriteNumber</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">favoriteNumber</span> <span class="o">=</span> <span class="n">_favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">retrieve</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">addPerson</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_favoriteNumber</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">People</span><span class="p">({</span><span class="n">favoriteNumber</span><span class="o">:</span> <span class="n">_favoriteNumber</span><span class="p">,</span> <span class="nb">name</span><span class="o">:</span> <span class="n">_name</span><span class="p">}));</span>
</span></span><span class="line"><span class="cl">        <span class="n">nameToFavoriteNumber</span><span class="p">[</span><span class="n">_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">_favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是一个简单的存储合约，通过一个 People 结构体对象来存储人名和他喜欢数字，通过一个数组来存储多个人的信息，并提供了添加、查找方法。</p>
<h3 id="读取合约源文件">读取合约源文件</h3>
<p>当我们通过 VSCode 或其他编辑器完成 Solidity 合约编写与语法检查后，需要编译合约为 abi 文件与 bytecode。</p>
<p>我们可以通过 <code>yarn</code> 安装 <code>solc</code> 命令行工具进行编辑，并且可以选择对应版本，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn add solc@0.8.7-fixed
</span></span></code></pre></div><p>安装完成后，，我们可以通过 <code>solcjs</code> 命令来进行编译，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol
</span></span></code></pre></div><p>因为编译合约是一个高频操作，我们可以在 <code>package.json</code> 中配置 <code>compile</code> 脚本命令，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;scripts&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;compile&#34;</span><span class="p">:</span> <span class="s2">&#34;yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>之后仅需执行 <code>yarn compile</code> 即可生成合约编译文件。</p>
<h3 id="获取编译结果">获取编译结果</h3>
<p>编译完成后会生成 abi 和 bytecode 文件，分别以 <code>.bin</code> 和 <code>.abi</code> 为后缀。</p>
<h4 id="获取-bytecode-与-abi">获取 bytecode 与 abi</h4>
<p>Solidity 合约的部署与交互需要 bytecode 与 abi 两个部分，我们可以通过通过以下代码将其写入对应变量供后续操作使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs-extra&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">abi</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&#34;./SimpleStorage_sol_SimpleStorage.abi&#34;</span><span class="p">,</span> <span class="s2">&#34;utf-8&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">binary</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&#34;./SimpleStorage_sol_SimpleStorage.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;utf-8&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="创建-rinkeby-测试网络环境alchemy">创建 Rinkeby 测试网络环境（Alchemy）</h2>
<p>智能合约的调试需要将合约部署到实际的链上，我们选择部署到 Alchemy 平台的 Rinkeby 测试网进行后续调试开发，</p>
<h3 id="alchemy-平台">Alchemy 平台</h3>
<p>首先我们访问 <a href="https://dashboard.alchemyapi.io">Alchemy 官网</a>，注册并登录，会看到其 Dashboard，会展示所有已创建的应用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/alchemy_dashboard.png" alt="alchemy_dashboard"></p>
<p>安装完成后选择 Create App 即可快速创建一个 Rinkeby 测试网络节点。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/alchemy_create_app.png" alt="alchemy_create_app"></p>
<p>创建完成后，点击 View Details，可以看到我们刚创建的 App 详细信息，点击右上角 View Key，可以查询我们的节点信息，我们需要记录下 HTTP URL，供后续连接使用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/alchemy_app_detail.png" alt="alchemy_app_detail"></p>
<h2 id="创建-rinkeby-测试账户metamask">创建 Rinkeby 测试账户（MetaMask）</h2>
<h3 id="metamask">MetaMask</h3>
<p>完成了 Rinkeby 测试网络环境的创建，我们需要通过 MetaMask 创建账户，获取一些测试 Token，并且将账户私钥记录下来，以便后续使用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/metamask_private_key.png" alt="metamask_private_key"></p>
<h3 id="获取测试-token">获取测试 Token</h3>
<p>创建账户后，我们需要一些测试 Token 来进行后续开发调试，我们可以通过以下网址获取：</p>
<ul>
<li><a href="https://faucets.chain.link">https://faucets.chain.link</a></li>
<li><a href="https://rinkebyfaucet.com/">https://rinkebyfaucet.com/</a></li>
</ul>
<h2 id="连接测试节点与钱包">连接测试节点与钱包</h2>
<h3 id="连接节点">连接节点</h3>
<p><code>ethers.js</code> 提供了库可以方便地连接到我们的测试节点，其中 <code>process.env.ALCHEMY_RPC_URL</code> 为我们在 Alchemy 平台创建 App 的 HTTP URL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ethers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ethers&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">JsonRpcProvider</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_RPC_URL</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="连接钱包">连接钱包</h3>
<p><code>ethers.js</code> 也提供了方法可以连接到我们的测试钱包，其中 <code>process.env.RINKEBY_PRIVATE_KEY</code> 为我们从 MetaMask 复制的私钥。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ethers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ethers&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">Wallet</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RINKEBY_PRIVATE_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">provider</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><h2 id="solidity-合约部署">Solidity 合约部署</h2>
<h3 id="创建合约">创建合约</h3>
<p>我们可以通过 <code>ethers.js</code> 库创建合约。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contractFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">ContractFactory</span><span class="p">(</span><span class="nx">abi</span><span class="p">,</span> <span class="nx">binary</span><span class="p">,</span> <span class="nx">wallet</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="部署合约">部署合约</h3>
<p>下面我们介绍一下如何通过 <code>ethers.js</code> 库部署合约，其中 <code>SimpleStorage</code> 合约的 ABI 和 BIN 文件已经在上面的代码中读取过了。</p>
<h4 id="创建合约-1">创建合约</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contractFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">ContractFactory</span><span class="p">(</span><span class="nx">abi</span><span class="p">,</span> <span class="nx">binary</span><span class="p">,</span> <span class="nx">wallet</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="部署合约-1">部署合约</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contract</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">contractFactory</span><span class="p">.</span><span class="nx">deploy</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">await</span> <span class="nx">contract</span><span class="p">.</span><span class="nx">deployTransaction</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="与合约交互">与合约交互</h3>
<p>我们也可以通过 <code>ethers.js</code> 来与合约进行交互。</p>
<h4 id="retrieve">retrieve()</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">currentFavoriteNumber</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">contract</span><span class="p">.</span><span class="nx">retrieve</span><span class="p">();</span>
</span></span></code></pre></div><h4 id="store">store()</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">transactionResponse</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">contract</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="s2">&#34;7&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">transactionReceipt</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">transactionResponse</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="从-raw-data-构造交易">从 raw data 构造交易</h3>
<p>除了直接调用部署合约方法等，我们也可以自己构造交易。</p>
<h4 id="构造交易">构造交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">nonce</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">getTransactionCount</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nonce</span><span class="o">:</span> <span class="nx">nonce</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">20000000000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gasLimit</span><span class="o">:</span> <span class="mi">1000000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">to</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;0x&#34;</span> <span class="o">+</span> <span class="nx">binary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">chainId</span><span class="o">:</span> <span class="mi">1337</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h4 id="签名交易">签名交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">signedTx</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">signTransaction</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="发送交易">发送交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sentTxResponse</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">await</span> <span class="nx">sentTxResponse</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我们通过 <code>ethers.js</code> 库与 Alchemy 的 Rinkeby 测试网络进行交互的步骤，在真正的生产项目开发中我们一般不会直接使用 <code>ethers.js</code> 这样的库，而是会使用 Brownie、HardHat 这样进一步封装的框架，但了解 <code>Web3.py</code> 或 <code>ethers.js</code> 等库的使用方法也非常重要。后续我还会对 HardHat 框架的使用作进一步讲解。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/">Solidity 智能合约开发 - 玩转 Web3.py</a></li>
<li><a href="https://www.youtube.com/watch?v=gyMwXuJrbJQ">Solidity, Blockchain, and Smart Contract - Javascript 版本</a></li>
<li><a href="https://github.com/ethers-io/ethers.js/">ethers.js 项目仓库</a></li>
<li><a href="https://docs.ethers.io/">ethers.js 官方文档</a></li>
<li><a href="https://dashboard.alchemyapi.io">Alchemy 官网</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>[译] 是什么让 Golang 如此受欢迎？语言创造者的回顾</title><link>https://www.pseudoyu.com/en/2022/06/06/golang_creators_look_back/</link><pubDate>Mon, 06 Jun 2022 18:21:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/06/golang_creators_look_back/</guid><description>《后来的我们 - 五月天》 前言 自从 2009 年开源以来，Go 语言的人气一直在增长。其最初创建时背后的五位谷歌软件工程师回顾了是什么推动了这种增长。 Go 的五</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>自从 2009 年开源以来，<a href="https://go.dev/">Go 语言</a>的人气一直在增长。其最初创建时背后的五位谷歌软件工程师回顾了<a href="https://cacm.acm.org/magazines/2022/5/260357-the-go-programming-language-and-environment/fulltext#R16">是什么推动了这种增长</a>。</p>
<p>Go 的五位创造者在《ACM 通讯》中写道，即使是他们，最早的工作也“极大受益于谷歌许多同事的建议和帮助”，而论文的第二句话强调，它现在是一个公共项目，“有成千上万的个人和几十家公司的贡献”。</p>
<p>在强大的社区支持下，Go 已经实现了不可否认的广泛普及。最近的 <a href="https://www.tiobe.com/tiobe-index/">Tiobe 指数</a>对世界上最受欢迎的编程语言进行了评估，Go 排名第 14 位。</p>
<p>他们的论文指出，<a href="https://thenewstack.io/category/containers/">Docker</a> 和 <a href="https://thenewstack.io/category/kubernetes/">Kubernetes</a> 都是用 Go 编写的，并补充说，这种语言也是“主要云服务供应商的关键基础设施的基础，并且是<a href="https://cncf.io/?utm_content=inline-mention">云原生计算基金会</a>托管的大多数项目的实现方式。”</p>
<p>但更有趣的问题是，为什么 Go 会变得如此流行&hellip;</p>
<p>该论文认为，正是 Go 的“以开发为中心的理念”推动其社区蓬勃发展，然后归功于该社区以及它所构建的技术，最终使 Go 成为“现代云计算环境的重要组成部分”。</p>
<p>简而言之，当回顾过去的 13 年，Go 的创造者们认为，Go 因其对软件工程化的“整体环境”的关注而获得成功。“Go 的方法是不将语言特性看作比环境特性更重要”。</p>
<p>论文作者为 <a href="https://twitter.com/_rsc?lang=en">Russ Cox</a>, <a href="https://github.com/griesemer">Robert Griesemer</a>, <a href="https://twitter.com/rob_pike?lang=en">Rob Pike</a>, <a href="https://www.linkedin.com/in/ianlancetaylor/">Ian Lance Taylor</a> 和 <a href="https://www.computer.org/profiles/kenneth-thompson">Ken Thompson</a>。</p>
<h2 id="早期发展">早期发展</h2>
<p>Go 语言源自谷歌，但这并不影响它的发展，因为自这家搜索引擎公司 1998 年成立到推出 Go，才刚刚过了 10 年。Go 的二进制文件也更容易部署，因为与 Java 的二进制文件不同，Go 的二进制不需要单独的运行时环境来执行。</p>
<p>其他语言特性也使其更具吸引力，因为 Go 是包含“垃圾回收”功能的语言之一，可以自动释放不再被变量使用的内存。论文指出，为此，Go 语言利用了新的多核处理器，在一个专门的内核上运行其垃圾回收，以降低对延迟的影响。</p>
<p>这种并发性是作为语言的核心部分而不是一个独立的可选库提供的。事实上，这在很大程度上解释了为什么 Go 是以这种方式构建的。论文中有一节题为“起源”，描述了 Go 是如何从谷歌的经验中成长起来的，谷歌有一个庞大的多语言代码库，由大约 4000 名活跃的开发人员共享。</p>
<p>他们的日常经验表明，需要一种更好的方式来利用新型多核芯片的性能来处理大规模的负载。回顾过去，该语言的创造者们写道，Go 是他们对“应对这些挑战而设计的语言可能是什么样子”这一问题的回答。Go 是专门为提供一流的并发和并行支持而设计的，这意味着 Go 不仅可以有效地处理多个任务，还可以同时执行多个任务。</p>
<p>在 Go 语言出现，工程师们一直被迫使用笨拙的语法和“大的、固定大小的线程栈”。论文认为，启用并发的线程不受欢迎，因为它们难以创建、使用和管理。一个脚注甚至提到了 <a href="https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf">1995 年的论文</a>，该论文来自 TCl 脚本语言的创造者 John Ousterhout，题为“为什么线程是一个坏主意（对于大多数目的）”。</p>
<p>他们写道：“解决这种矛盾关系是创建 Go 的主要动机之一，后来他们称这是该语言的“主要不寻常属性”。</p>
<h2 id="语言设计之外">语言设计之外</h2>
<p>该文件还称，Go 今天的流行是由于更广泛的科技行业现在经常使用云服务提供商以及它们所实现的大规模生产环境（Go 就是为解决这个问题而设计的），除此之外还有一些其他明显的优势。</p>
<p>后来，该文件指出，Go “移除了在 C 和 C++ 程序中引起大量问题的未定义行为”。(例如，如果代码试图做一些危险的事情，如解引用空指针或使用超出数组、分片界限的索引，Go 会简单地抛出一个运行时异常并停止运行程序。)</p>
<p>但 Go 的创造者们将 Go 的流行归功于其他方面。他们强调，“更重要的是早期的工作，为打包、依赖、构建测试、部署和其他软件开发领域的日常任务建立了基础，这些方面通常在语言设计中并不重要”，这些特性吸引了那些开发者通过有用的包在他们的生态系统中“播种”。虽然最初的版本只支持 Linux 和 MacOS X，但这个热情的社区很快就为 Go 的编译器和库创建了 Windows 版本，并将它们移植到其他操作系统。</p>
<p>该论文认为，对开发者的关注应该贯穿语言的开发。例如，它在早期就注意到 Go 的高质量密码学库（包括对安全通信协议 SSL 和 TLS 的支持）。Go 的标准库还包括了一个内置的 HTTPS 客户端和服务端，用于与其他系统进行在线交互。</p>
<p>但更重要的是 Go 处理库的方式。Go 的编译器被设计成克制地导入必要的库，包含在其二进制文件中。这避免了在其他语言中看到的行为，即只是为了确保包含一个必要的功能就要导入整个库。</p>
<p>考虑到开发人员的需求，Go 允许从其他领域轻松导入外部库（同时包含自动检查兼容版本的方式）。论文指出，“作为一种分布式计算的语言，Go 中没有必须发布 Go 软件包的一个中心化服务器”。(虽然现在有一个可用的 Go 软件包公共镜像，以及包含加密签名的日志）</p>
<p>Go 在标准发行版中还拥有对程序剖析等优化技术的支持，以及对模糊处理等测试功能的支持。该论文指出，Go 甚至有一个代码布局的惯例(Go 的 <code>gofmt</code> 工具将源代码解析成这种标准化的布局)。这和其他内置工具能使它更容易建立从 IDE 插件和调试器到框架和构建自动程序的一切。Go 的创造者认为，他们的语言是专门为鼓励创建工具和自动化而设计的，“因此，Go 世界有一个丰富的、不断扩展的、互操作的工具包”。</p>
<p>他们的论文认为，语言只是其吸引力的一部分。“完整的故事必须涉及整个 Go 环境：库、工具、惯例和软件工程的整体方法”。</p>
<h2 id="保持一致性">保持一致性</h2>
<p>他们论文的另一部分也吹捧了语言的一致性。Go 的创造者们承认，在它最早的几年里，“我们在每一个周的版本中都对它进行修补和调整，用户在更新到新的 Go 版本时，常常不得不改变他们的程序”。</p>
<p>但自 2012 年以来（随着 Go 1 版本的正式发布），“我们公开承诺只对语言和标准库进行向后兼容的修改，因此程序在用较新的 Go 版本编译时将继续运行，不会有任何变化。”</p>
<p>结果如何呢？从那时起，这门语言“几乎被冻结了”，论文解释说。但工具却有了戏剧性的增长，具体来说，就是“更好的编译器，更强大的构建和测试工具，以及改进的依赖性管理，更不用说支持 Go 的大量开源工具了”。论文认为，这有助于鼓励创建教学材料，并吸引用户和“第三方软件包蓬勃发展的生态系统”。</p>
<blockquote>
<p>“虽然大多数语言的设计都集中在语法、语义或类型的创新上，但 Go 却专注于软件开发过程本身”。</p>
</blockquote>
<blockquote>
<p><a href="https://cacm.acm.org/magazines/2022/5/260357-the-go-programming-language-and-environment/fulltext">The Go Programming Language and Environment | May 2022 | Communications of the ACM</a></p>
</blockquote>
<p>该论文的的一个观点甚至认为 Go 精心平衡的功能集避免了语言开发者的过度扩张。但是，论文的结尾处提到了这一规则的例外情况，即 Go 确实增加了一个重要的新功能。仅仅两个月前，Go 增加了<a href="https://github.com/golang/proposal/blob/4a54a00950b56dd0096482d0edae46969d7432a6/design/go2draft-contracts.md">参数多态性</a>，它是“为适应 Go 的其他部分而定制的”。</p>
<p>“在坚持一致性、完整性和社区性原则的前提下进行如此大的语言变化，将是对这种方法的严峻考验。”</p>
<p>Go 的创造者们认识到，需要一个社区来维持一种编程语言，也许还需要一个社区来建立一个。论文最后感谢了他们在谷歌的同事，感谢他们在 Go 最早的时候提供的建议和支持，他们预示着社区的支持将如潮水般涌来。“自公开发布以来，由于 Google 的 Go 团队扩大了，再加上一批巨大的开源贡献者，Go 得到了发展和改进。Go 现在是由成千上万的人共同完成的，在此无法一一列举”。</p>
<p>&ldquo;我们感谢所有帮助 Go 发展到今天的人&rdquo;。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li>原文作者：David Cassel</li>
<li><a href="https://thenewstack.io/what-made-golang-so-popular-the-languages-creators-look-back/">原文地址</a></li>
<li><a href="https://github.com/gocn/translator/blob/master/2022/w18_Golang_creators_look_back.md">本文永久链接</a></li>
<li><a href="https://github.com/pseudoyu">译者：张宇</a></li>
<li><a href="https://github.com/cvley">校对：cvley</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>25 岁的自白：花束般的恋爱</title><link>https://www.pseudoyu.com/en/2022/06/06/yearly_review_25/</link><pubDate>Mon, 06 Jun 2022 00:01:29 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/06/yearly_review_25/</guid><description>前言 现在是 2022 年 6 月 6 日，我 25 岁了。其实自两年前的今天发的那篇 『23 岁的自白：去追寻意义』之后，有打算每年都写一篇，算是对自己过去这或许精彩或</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_self.png" alt="yu_self"></p>
<p>现在是 2022 年 6 月 6 日，我 25 岁了。其实自两年前的今天发的那篇 『<a href="https://www.pseudoyu.com/en/2020/06/06/yearly_review_23/">23 岁的自白：去追寻意义</a>』之后，有打算每年都写一篇，算是对自己过去这或许精彩或许碌碌的一年作一个交代。</p>
<p>23 岁确实发生了很多事，但每次打开空白文档时都不知如何下笔。跟高中或是大学不同，这一年经历了很多变动，两个亲近的家人相继离世、感情变动、跨专业读研的压力、求职的焦虑&hellip;</p>
<p>已经很难用一个明确的主题或是几个关键词来概括这些经历，挣扎了几次，最终还是放弃了。也安慰自己说，还有跨年，等工作与未来一段时间的生活状态有更多确定性了，自己想说的一定更多吧。却一直拖到了现在。</p>
<p>那刚刚过去的 24 岁这一年呢？</p>
<h2 id="关于爱情">关于爱情</h2>
<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/I_fell_in_love_like_a_flower_bouquet.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《花束みたいな恋を - 大友良英》</figcaption></i>
</figure>
<hr>
<p>想来也挺有意思，这一年也发生了很多事，而在回忆的时候，却可以用『花束般的恋爱』这一个词来概括。</p>
<p>扪心自问，自己并不是一个面对感情很成熟的人，追求自我、常常害怕承诺、人际界限也处理得并不明白，这些可以称之为“渣男”品质的 buff 一个没少。但我又似乎是一个幸运的人，<del>遇到了</del>遇到过愿意包容并陪着我慢慢成长的她。</p>
<p>这段感情是充满着期待与美好开始的，两个很像的人，有着共同的目标，有着自己热爱的东西，作为同路人携手向前。有很长一段时间我都沉浸在这种幸福的状态中，甚至怀疑自己值不值得这种幸运，毕竟自己曾经真的是一个很烂的人，也做了一些糟糕的事，得到原谅已经是万幸，怎么敢奢求更多。</p>
<p>在过去的这一年里，我变了很多，开始变得愿意去思考未来，期待未来，也开始给出一些承诺，不再害怕改变自己的生活。两个人一起来到北京，养猫、存钱、努力工作，装点着忙碌却充实的生活，期待着能一起回杭州的新阶段，勾画着属于两个人的未来。我常常想，这可能就是我的完美爱情了吧。</p>
<p>可是，感情最忌讳的就是自我满足的付出与理所应当的惯性吧。可能自己一直自认为是一个还算合格的男朋友吧，时间空间上做到了陪伴，还算努力工作，她想要的东西也会尽量满足，但可能也就仅此而已了。仔细回想了一下，有多久没有两个人敞开心扉聊聊了，有多久没有在某个特定的节日精心准备惊喜了，又有多久没有两个人一起出去好好地约会了，甚至在最重要的生日，都忘了吹蜡烛许愿，拖到了第二天来弥补，还有很多很多没有做到的。</p>
<p>也许有很多理由吧，可以用来让自己稍“心安”一点。比如两个人约好了不整什么虚的，甚至提前列好了未来一年互相送的对方想要的礼物；比如连续两个月每周末都加班，实在是没有心力筹划那么多出去玩的行程；比如两个人都已经从朝夕相处的同专业同学转向了新的工作阶段，已经没有那么多共同话题了；比如，&hellip;</p>
<p>当这段感情真的以一种戛然而止的方式结束后，我才后知后觉地明白，也许她并没有从中得到属于她的爱情。当爱情的幻想与现实慢慢重叠，当距离冲淡了热恋期的滤镜，当我将自己的情绪与分享欲都寄托在感情上时，也许感情已经慢慢背离了原本的轨道了，只是，我是那个一直被保护的幸福的人罢了。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/flowers_movie_screenshot.jpg" alt="flowers_movie_screenshot"></p>
<p>我一直以来都自认为不属于一个典型的浪漫主义者，从没期待着自己的生活能够像书籍电影那样精彩，只是尽可能依从着自己的情感和意愿继续走下去。未曾想我会从这样一部电影里看到这么多自己生活的影子，甚至看到了结局。</p>
<p>但是，事业刚起步的生活阶段和感情真的没办法共存么？</p>
<p>时至今日，我依然不这么觉得，借用 『<a href="https://space.bilibili.com/37029661">小鹿 Lawrence</a>』某个视频里的一句话：</p>
<blockquote>
<p>她其实是一个很容易满足的人，喂到了小熊猫，就能开心个好几天，甚至是我不用加班剪片子，也可以高兴到手舞足蹈，也会在看完『花束般的恋爱』后，哭得像个傻子。而我共情的点和米老师不太一样，是他们去书店，男主角一直在看『成功学』的书，因为我最近在看管理学。我理解他是因为，我们不是不喜欢文学了，而是真的有的时候生活只有拼了命的去改变、去适应，才能勉强的，维持现状。</p>
</blockquote>
<p>有时候觉得，“维持现状”这个词真美好呀。在有的阶段我们可以惬意地感受、享受爱情的美好，而在有的阶段，仅仅是维持就已经需要拼了命地改变了。</p>
<p>总是觉得两个人的喜欢是基于互相的仰慕，对两个人的个性、所做的事、所热爱的东西出自内心的认可。被仰慕的人内心会被填满，而仰慕者眼神和举止都是在发光。也许自己将更少的关注放在对方作为独立个体的一举一动上了，也许自己曾经的很多吸引的点已经被淹没在生活工作琐事中，不再值得了。有很多的也许，但无论接受与否，至少这个阶段的缘分已经结束了。</p>
<p>不知不觉已经一个月过去了，令我自己都惊讶的是自己并没有那么理所应当地自暴自弃，就像最近刚看完的一部挺喜欢的剧，『我的解放日志』中的一句话：</p>
<blockquote>
<p>“但我很想挣脱，我希望我的人生，可以真正幸福快乐起来。所以你来仰慕我吧，这样到了春天，你我都会蜕变。”</p>
</blockquote>
<p>其实自己很少会公开讲述自己的感情，没想到以这样的方式碎碎念了那么多。这段感情于我的意义很重大，很遗憾没有在合适的时机分享出来。到了现在，大概已经是过期的糖了。</p>
<p>我依然在找寻这段感情或是这段人生的救赎，我的内心依然会保留或是重新燃起这份仰慕，直到没有办法继续前进吧，大概吧，无所谓结局，被爱的人内心会被填充，会感受到幸福吧。</p>
<h2 id="关于其他">关于其他</h2>
<p>过去一年的工作历程中，从步入工作的忐忑，到临危受命地负责了一个项目的痛苦挣扎，再到一切渐渐步入正轨。在工作中得到了很多学习成长，遇到了一个很契合的 leader 和一个很有趣的项目团队，另一位 leader 还常常在 Twitter 上鼓励我沉淀成长，很感谢自己的第一份工作遇到了他们。</p>
<p>很感慨，虽然也有不少起起伏伏，但现在回想起来却大多无足轻重了，自己却为了这些忽视了生活和情感中真正重要的部分，大概这就是人生吧，永远也不可能在上帝视角下看待自己的一举一动。但至少，自己还在坚持选择的行业里做着喜欢的事，这已经是最大的幸运了吧。</p>
<p>有开始重新好好写博客，这一年里发布了 22 篇博文，虽然有一半都是上个月更新的。填了自己一直想写的博客搭建的坑，收到了不少关注和评论，也认识了不少志同道合的朋友。因这几篇文章还入驻了『<a href="https://sspai.com/u/pseudoyu/posts">少数派</a>』成为了作者，文章被其创始人转了，还收到了约稿邀请，很有意思的体验。</p>
<p>新的一年里也还是要继续坚持输出吧。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_blog_update.png" alt="yu_blog_update"></p>
<p>一直想好好做开源，但是没想到却是上个月重新整理了自己的各类工具发布的一个 GitHub 项目『<a href="https://github.com/pseudoyu/yu-tools">pseudoyu/yu-tools 个人工具箱</a>』，让我收获了第一个 100 star，意外之喜。</p>
<p><a href="https://star-history.com/#pseudoyu/yu-tools&amp;Date"><img src="https://api.star-history.com/svg?repos=pseudoyu/yu-tools&amp;type=Date" alt="Star History Chart"></a></p>
<p>之后新的一年能沉下心多输入和沉淀，对开源项目能有更多代码贡献吧。</p>
<p>大概自己还有着英语专业的魂，在『<a href="https://github.com/gocn/translator">GoCN 翻译小组</a>』完成了 8 篇 Go 语言相关的技术文章的翻译，参与区块链安全余弦大佬牵头的『<a href="https://darkhandbook.io">区块链黑暗森林自救手册</a>』，参与完成了英文版本的翻译和全球发布，也算是为区块链行业做了一些微小的贡献。</p>
<p>大概在技术之路上这些也仅仅是微不足道，但至少有在好好前进吧。</p>
<h2 id="总结">总结</h2>
<p>这就是我的 24 岁，平凡却又难忘的一年岁月。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/lawrence_comments.png" alt="lawrence_comments"></p>
<p>对于即将来到的 25 岁，我说不上有太多期待。引用一下我对『<a href="https://space.bilibili.com/37029661">小鹿 Lawrence</a>』一个视频转发评论中所说的话作为结束吧。</p>
<blockquote>
<p>人生就是有这样的时候，需要勉强努力一个人生活下去。</p>
</blockquote>
<p>感谢他作为我最爱的博主在动态下的评论，很受鼓舞。也感谢身边所有关心我的亲人朋友，新的一年，也请多多关照。</p>
]]></content:encoded></item><item><title>让窗口管理也能自动化，基于 yabai+skhd 的 macOS 窗口管理系统</title><link>https://www.pseudoyu.com/en/2022/06/04/macos_window_management_solution_using_yabai_and_skhd/</link><pubDate>Sat, 04 Jun 2022 13:08:33 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/04/macos_window_management_solution_using_yabai_and_skhd/</guid><description>《后来的我们 - 五月天》 前言 从 2017 年暑假攒钱买了第一台 MacBook Pro 开始，我使用 macOS 已经五年了。随着工作学习需要，也逐渐开始使用多屏工作流。因为随时都需要开</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>从 2017 年暑假攒钱买了第一台 MacBook Pro 开始，我使用 macOS 已经五年了。随着工作学习需要，也逐渐开始使用多屏工作流。因为随时都需要开很多窗口，如 IDE、文本编辑工具、终端、IM 软件、邮件客户端等，稍没注意就很乱，得不停地切换来找到需要的窗口，很不方便，于是我开始了自己的窗口管理方案探索之路。</p>
<h2 id="窗口管理方案需求">窗口管理方案需求</h2>
<p>首先，我梳理了一下自己的窗口管理需求，列出了以下几个核心要点：</p>
<ol>
<li>每次打开一个新窗口后会在当前桌面自动进行智能分屏，如只有单窗口就全屏，两个窗口就二等分，以此类推</li>
<li>通过快捷键对分屏布局进行调整或恢复初始化布局</li>
<li>通过快捷键在不同窗口之间跳转</li>
<li>通过快捷键移动/交换不同窗口位置</li>
<li>通过快捷键便捷地对当前窗口作一些操作，如全屏、居中、发送到某个特定的桌面等</li>
<li>切换速度快</li>
</ol>
<p>针对这些需求，我开始调研目前比较流行的几款窗口管理工具。</p>
<h2 id="窗口管理工具">窗口管理工具</h2>
<p>市面上已经有很多相对成熟的窗口管理工具解决方案，比如 <a href="https://magnet.crowdcafe.com">Magnet</a>、<a href="https://docs.folivora.ai/docs/100_window_snapping_chapter.html">BetterTouchTool 附带的窗口吸附功能</a>等，我都有购买使用，总体来说还是觉得不太适合自己的工作流。</p>
<p>Magnet 主要依赖于快捷键，尽管可以自己定制符合习惯的快捷键，但记忆成本很高，且如果有多台设备也需要用自己的帐号下载后重新配置才可以继续使用，并不方便。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/magnet_keyshotcuts.png" alt="magnet_keyshotcuts"></p>
<p>BetterTouchTool 则是依赖于鼠标移动到窗口各个触发角，优势是不需要自己设置快捷键，仅需将鼠标移动到窗口边缘即可实现分屏。但与 Magnet 有着同样的弊端是，每次打开一个新窗口后还是需要自己手动去实现分屏，在很忙或者窗口很多的时候也常常会忘记，不便于管理。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/bettertouchtool_setting.png" alt="bettertouchtool_setting"></p>
<p>既然现有的软件都无法完全满足我的需求，作为一个爱折腾的程序员，目标转向了开源社区一些可高度定制化的解决方案。</p>
<h2 id="开源解决方案">开源解决方案</h2>
<h3 id="hammerspoon">Hammerspoon</h3>
<p><a href="https://www.hammerspoon.org">Hammerspoon</a> 是一个强大的 macOS 自动化工具，可以通过自己编写一些 lua 脚本实现窗口管理功能，并且可以自定义快捷键，除了窗口管理外，还可以实现例如休眠控制、剪贴板工具等丰富的功能。我配置使用了一阵子后，发现和 Magnet 类似，也没办法很好地实现智能分屏（或许有写好的脚本，但需要对很多软件进行单独配置，实现起来比较麻烦），于是也弃用了。</p>
<h3 id="yabai--skhd">yabai + skhd</h3>
<p>经过一番调研，从 YouTuber <a href="https://www.youtube.com/c/JoshMedeski">Josh Medeski</a> 的 &lt;<a href="https://www.youtube.com/watch?v=fYsCAOfGjxE">Blazing Fast Window Management on macOS</a>&gt; 视频中找到了一个解决方案，开源、免费、定制化强，仅需一个配置文件就可以完美实现我的所有需求。</p>
<h4 id="yabai">yabai</h4>
<p><a href="https://github.com/koekeishiya/yabai">yabai</a> 是 macOS 内置窗口管理工具的一个开源拓展，可以通过命令行工具实现自由控制窗口和多显示器。它最主要的特色是使用 <code>binary space partitioning</code> 算法自动修改窗口布局，使我们能够专注于窗口内容，不需要主动进行管理，仅需打开对应软件窗口，实现自动编排，工作流不会受到干扰。</p>
<h4 id="skhd">skhd</h4>
<p><a href="https://github.com/koekeishiya/skhd">skhd</a> 是一个 macOS 快捷键管理工具，能够通过配置文件来调用绑定其他程序/命令，如 yabai 的窗口管理命令，实现高度定制化的窗口操作。skhd 的实现很注重性能，响应速度很快。</p>
<h2 id="我的窗口管理配置">我的窗口管理配置</h2>
<h3 id="yabai-1">yabai</h3>
<h4 id="安装与基础配置">安装与基础配置</h4>
<p>yabai 的安装很容易，按照其<a href="https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)">官方 wiki</a> 说明安装即可。</p>
<p>个人推荐通过 <a href="https://brew.sh">brew</a> 进行安装，如果没有安装过 <code>brew</code> 可以先通过官方一键脚本进行安装。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>安装完 <code>brew</code> 后，即可继续通过命令进行安装与基本配置。打开终端，输入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install koekeishiya/formulae/yabai
</span></span></code></pre></div><p>安装脚本插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo yabai --install-sa
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span></code></pre></div><p>启动 yabai 服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew services start yabai
</span></span></code></pre></div><p>注：如果是 macOS Big Sur 或 Monterey 系统，因为需要通过 API 注入的方式来调用脚本，需要配置一下 <code>root</code> 权限与开机自启，官方也提供了详细的操作方法：</p>
<p>编辑 <code>/private/etc/sudoers.d/yabai</code> 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo visudo -f /private/etc/sudoers.d/yabai
</span></span></code></pre></div><p>在打开的文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&lt;user&gt; <span class="nv">ALL</span> <span class="o">=</span> <span class="o">(</span>root<span class="o">)</span> NOPASSWD: &lt;path&gt; --load-sa
</span></span></code></pre></div><p>上述 <code>&lt;&gt;</code> 内的 <code>user</code> 和 <code>path</code> 可以通过 <code>whoami</code> 和 <code>which yabai</code> 命令获取。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/see_user_and_config_yabai_sudo.png" alt="see_user_and_config_yabai_sudo"></p>
<p>完成以上配置后，后续在 yabai 的 <code>.yabairc</code> 配置文件中加入下述两行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">yabai -m signal --add event=dock_did_restart action=&#34;sudo yabai --load-sa&#34;
</span></span></code></pre></div><h4 id="自定义配置">自定义配置</h4>
<p>yabai 的配置文件由用户在 <code>$HOME</code> 目录下的 <code>.yabairc</code> 文件进行管理，通过编辑器或命令行工具进行编辑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vi ~/.yabairc
</span></span></code></pre></div><p>以下是我的个人配置，可以复制之后自己进行定制化修改。我已经将我的个人配置放在了 GitHub 代码托管平台，可以点击<a href="https://github.com/pseudoyu/dotfiles/blob/master/yabai/yabairc">这里</a>查看。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl"># !/usr/bin/env sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">yabai -m signal --add event=dock_did_restart action=&#34;sudo yabai --load-sa&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 全局配置
</span></span><span class="line"><span class="cl">yabai -m config mouse_follows_focus          off
</span></span><span class="line"><span class="cl">yabai -m config focus_follows_mouse          off
</span></span><span class="line"><span class="cl">yabai -m config window_origin_display        default
</span></span><span class="line"><span class="cl">yabai -m config window_placement             second_child
</span></span><span class="line"><span class="cl">yabai -m config window_topmost               off
</span></span><span class="line"><span class="cl">yabai -m config window_shadow                on
</span></span><span class="line"><span class="cl">yabai -m config window_opacity               off
</span></span><span class="line"><span class="cl">yabai -m config active_window_opacity        1.0
</span></span><span class="line"><span class="cl">yabai -m config normal_window_opacity        0.90
</span></span><span class="line"><span class="cl">yabai -m config window_border                off
</span></span><span class="line"><span class="cl">yabai -m config window_border_width          6
</span></span><span class="line"><span class="cl">yabai -m config active_window_border_color   0xff775759
</span></span><span class="line"><span class="cl">yabai -m config normal_window_border_color   0xff555555
</span></span><span class="line"><span class="cl">yabai -m config insert_feedback_color        0xffd75f5f
</span></span><span class="line"><span class="cl">yabai -m config split_ratio                  0.50
</span></span><span class="line"><span class="cl">yabai -m config auto_balance                 off
</span></span><span class="line"><span class="cl">yabai -m config mouse_modifier               fn
</span></span><span class="line"><span class="cl">yabai -m config mouse_action1                move
</span></span><span class="line"><span class="cl">yabai -m config mouse_action2                resize
</span></span><span class="line"><span class="cl">yabai -m config mouse_drop_action            swap
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># space 配置
</span></span><span class="line"><span class="cl">yabai -m config layout                       bsp
</span></span><span class="line"><span class="cl">yabai -m config top_padding                  15
</span></span><span class="line"><span class="cl">yabai -m config bottom_padding               15
</span></span><span class="line"><span class="cl">yabai -m config left_padding                 15
</span></span><span class="line"><span class="cl">yabai -m config right_padding                15
</span></span><span class="line"><span class="cl">yabai -m config window_gap                   15
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 忽略的 app
</span></span><span class="line"><span class="cl">yabai -m rule --add app=&#34;^System Preferences$&#34; manage=off
</span></span><span class="line"><span class="cl">yabai -m rule --add app=&#34;^Archive Utility$&#34; manage=off
</span></span><span class="line"><span class="cl">yabai -m rule --add app=&#34;^Logi Options+$&#34; manage=off
</span></span><span class="line"><span class="cl">yabai -m rule --add app=&#34;^Alfred Preferences$&#34; manage=off
</span></span></code></pre></div><p>我的配置基本仅在官方提供的示例上进行了部分修改，使用 <code>bsp</code> 算法智能分屏，并调整了 space 为 15，这样的间距更舒服。</p>
<p>我还添加了一些自定义的规则，可以在打开系统配置、解压工具等无法自定义窗口的应用时候忽略。</p>
<p>整体呈现如下（以下效果为打开应用窗口后算法自动编排，且新增窗口会自动重排）：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_layout_1.png" alt="my_layout_1"></p>
<h3 id="skhd-1">skhd</h3>
<p>配置好了 yabai 后，我们已经实现了智能分屏，但是有时候算法提供的窗口位置不满足我们的需求，或是我们需要频繁在各个窗口之间切换/调整，那就需要用到 skhd 工具来定制一些快捷键配置。</p>
<h4 id="安装">安装</h4>
<p>skhd 也可以通过 <code>brew</code> 包管理工具进行安装，很方便：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install koekeishiya/formulae/skhd
</span></span></code></pre></div><p>安装完成后启动即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew services start skhd
</span></span></code></pre></div><h4 id="自定义配置-1">自定义配置</h4>
<p>与 yabai 类似，skhd 的配置是通过 <code>$HOME/.skhdrc</code> 配置文件进行管理的，通过编辑器或命令行工具进行编辑即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vi ~/.skhdrc
</span></span></code></pre></div><p>以下是我的个人配置，可以复制之后自己进行定制化修改。我已经将我的个人配置放在了 GitHub 代码托管平台，可以点击<a href="https://github.com/pseudoyu/dotfiles/blob/master/skhd/skhdrc">这里</a>查看。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl"># 窗口聚焦
</span></span><span class="line"><span class="cl">alt - h : yabai -m window --focus west
</span></span><span class="line"><span class="cl">alt - j : yabai -m window --focus south
</span></span><span class="line"><span class="cl">alt - k : yabai -m window --focus north
</span></span><span class="line"><span class="cl">alt - l : yabai -m window --focus east
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 交换窗口
</span></span><span class="line"><span class="cl">shift + alt - h : yabai -m window --swap west
</span></span><span class="line"><span class="cl">shift + alt - j : yabai -m window --swap south
</span></span><span class="line"><span class="cl">shift + alt - k : yabai -m window --swap north
</span></span><span class="line"><span class="cl">shift + alt - l : yabai -m window --swap east
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 移动窗口
</span></span><span class="line"><span class="cl">shift + alt + ctrl - h : yabai -m window --warp west
</span></span><span class="line"><span class="cl">shift + alt + ctrl - h : yabai -m window --warp south
</span></span><span class="line"><span class="cl">shift + alt + ctrl - h : yabai -m window --warp north
</span></span><span class="line"><span class="cl">shift + alt + ctrl - h : yabai -m window --warp east
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 旋转窗口布局
</span></span><span class="line"><span class="cl">alt - r : yabai -m space --rotate 90
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 全屏
</span></span><span class="line"><span class="cl">alt -f : yabai -m window --toggle zoom-fullscreen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 设置/取消窗口 space
</span></span><span class="line"><span class="cl">alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 挂起窗口至屏幕中央/取消挂起窗口
</span></span><span class="line"><span class="cl">alt - t : yabai -m window --toggle float;\
</span></span><span class="line"><span class="cl">          yabai -m window --grid 4:4:1:1:2:2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 修改窗口切分方式
</span></span><span class="line"><span class="cl">alt - e : yabai -m window --toggle split
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 重置窗口布局
</span></span><span class="line"><span class="cl">shift + alt - 0 : yabai -m space --balance
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 移动窗口至特定桌面
</span></span><span class="line"><span class="cl">shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
</span></span><span class="line"><span class="cl">shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
</span></span><span class="line"><span class="cl">shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
</span></span><span class="line"><span class="cl">shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
</span></span><span class="line"><span class="cl">shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5
</span></span><span class="line"><span class="cl">shift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6
</span></span><span class="line"><span class="cl">shift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7
</span></span><span class="line"><span class="cl">shift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8
</span></span><span class="line"><span class="cl">shift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 增加窗口大小
</span></span><span class="line"><span class="cl">shift + alt - w : yabai -m window --resize top:0:-20
</span></span><span class="line"><span class="cl">shift + alt - d : yabai -m window --resize left:-20:0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 减少窗口大小
</span></span><span class="line"><span class="cl">shift + alt - s : yabai -m window --resize bottom:0:-20
</span></span><span class="line"><span class="cl">shift + alt - a : yabai -m window --resize top:0:20
</span></span></code></pre></div><p>简单来说，我配置了与 vim 快捷键操作逻辑类似的配置，实现了以下常用功能：</p>
<ul>
<li><code>&lt;Option&gt; + hjkl</code> 在不同的窗口之间聚焦</li>
<li><code>&lt;Option&gt; + &lt;Shift&gt; + hjkl</code> 交换不同窗口</li>
<li><code>&lt;Option&gt; + &lt;Shift&gt; + 0</code> 重置窗口布局</li>
<li><code>&lt;Option&gt; + &lt;Shift&gt; + &lt;1~9&gt;</code> 快速将当前窗口移动到特定桌面</li>
<li><code>&lt;Option&gt; + f</code> 全屏</li>
<li><code>&lt;Option&gt; + t</code> 挂起窗口至屏幕中央/取消挂起窗口</li>
<li><code>&lt;Option&gt; + g</code> 设置/取消窗口 space</li>
<li><code>&lt;Option&gt; + r</code> 旋转窗口布局</li>
<li><code>&lt;Option&gt; + e</code> 修改窗口切分方式</li>
</ul>
<p>其中 <code>hjkl</code> 是 vim 编辑器常用的操作，大家也可以修改为上下左右或其他自己喜欢的键位。</p>
<p>完成以上配置后，我们就实现了 yabai 智能窗口管理以及通过简单的快捷键进行窗口操作，接下来我们对 macOS 系统进行一些配置，来优化一下我们的窗口管理系统吧。</p>
<h3 id="macos-桌面管理">macOS 桌面管理</h3>
<p>macOS 提供了多桌面管理的强大功能，可以理解为每个桌面区域都是一个工作区，可以独立摆放不同的窗口，如下图所示：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/macos_desktop_management.png" alt="macos_desktop_management"></p>
<p>我们可以通过桌面来区分自己的工作区，如桌面 1 作为自己开发 IDE、终端，桌面 2 作为浏览器查询、写文档，桌面 3 用于处理微信、邮件等通讯工具，桌面 4 作为休闲娱乐、视频播放等，这样我们仅需在几个桌面间切换，实现自己的工作流逻辑，而不需要担心窗口聚焦问题。</p>
<p>为了进一步优化，更快速地完成桌面之间的切换，我们可以通过 <a href="https://www.alfredapp.com">Alfred</a>、<a href="https://www.raycast.com">Raycast</a> 等启动器来快速启动/聚焦应用，也可以通过 <a href="https://alt-tab-macos.netlify.app">AltTab</a> 或 <a href="https://manico.im">Manico</a> 等窗口切换软件提供的快捷键对已开启的应用进行快速切换。</p>
<p>除此之外，macOS 系统设置里也提供了自定义切换的快捷方式，我把 <code>&lt;Option&gt; + &lt;1~9&gt;</code> 修改为了特定的桌面，这样平时工作的时候按对应快捷键就可以迅速到对应的工作区，很快就能形成肌肉记忆。</p>
<p>打开 <strong>系统偏好设置 - 键盘 - 快捷键 - 调度中心</strong>，我们可以为不同的桌面设置对应快捷键，如果没有显示，则可以先打开 9 个空桌面进行配置，之后关闭桌面后仍会保留配置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/keyboardshortcut_to_change_desktop.png" alt="keyboardshortcut_to_change_desktop"></p>
<p>除此之外，还有一个我喜欢的小设置，打开 <strong>系统偏好设置 - 辅助功能 - 显示 - 显示器 - 减弱动态效果</strong>，这样会把不同桌面之间的窗口切换动画效果减弱，提高切换速度，配合我们的自动分屏和快捷键，实现快速强大的多工作区切换。我是速度效率优先，喜欢 macOS 动效的这一步可以不进行设置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/reduce_display_effect.png" alt="reduce_display_effect"></p>
<h2 id="总结">总结</h2>
<p>以上就是我当前的 macOS 窗口管理解决方案，我是一个很爱折腾软件和各项配置的人，有时候常常为了一个小小的需求折腾好几天，一直追求自己的最佳实践。</p>
<p>也许很多配置并不能为我在之后的工作中节省非常多的时间，窗口整理切换也就是几秒钟的差异，但当我在日常工作学习中使用自己当初花了很多心思调研和优化的系统后，或当一个突发的需求使用到了我之前的一个折腾过的软件/配置时，会莫名地很开心、很有成就感，这大概就是折腾的意义吧，也希望大家都能享受到这样的快乐。</p>
<p>我在 GitHub 上维护了一个工具箱项目 『<a href="https://github.com/pseudoyu/yu-tools">GitHub - pseudoyu/yu-tools</a>』，记录了很多其他软硬件的选择，也在不断更新优化，有感兴趣的也欢迎交流，我也会逐步出一些对应的配置/使用教程。</p>
<blockquote>
<p>注：本文由本人授权首发于『<a href="https://sspai.com">少数派</a>』，原文地址为：『<a href="https://sspai.com/post/73620">让窗口管理也能自动化，基于 yabai+skhd 的 macOS 窗口管理系统</a>』。</p>
</blockquote>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.youtube.com/watch?v=fYsCAOfGjxE">Blazing Fast Window Management on macOS</a></li>
<li><a href="https://github.com/koekeishiya/yabai">yabai 项目地址</a></li>
<li><a href="https://github.com/koekeishiya/skhd">skhd 项目地址</a></li>
<li><a href="https://github.com/pseudoyu/yu-tools">pseudoyu/yu-tools 个人工具箱项目地址</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Solidity 智能合约开发 - 玩转 Web3.py</title><link>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</link><pubDate>Mon, 30 May 2022 15:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</guid><description>《后来的我们 - 五月天》 前言 在前文《Solidity 智能合约开发 - 基础》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 Brownie 与 HardHat 等框架进行调试。但</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>在前文《<a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a>》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 <a href="https://github.com/eth-brownie/brownie">Brownie</a> 与 <a href="https://github.com/NomicFoundation/hardhat">HardHat</a> 等框架进行调试。但在使用这些封装好的框架之前，我们可以通过 Web3.py 直接与我们本地的 Ganache 节点进行交互，以便更好了解其原理，也为我们后续更好使用框架打好基础。</p>
<p>本文以 Web3.py 为例，实现了基础的合约编译、部署至本地 Ganache 网络、与合约交互等功能。</p>
<p>可以点击<a href="https://github.com/pseudoyu/learn-solidity/tree/master/web3_py_simple_storage">这里</a>访问本测试 Demo 代码仓库。</p>
<h2 id="web3py">Web3.py</h2>
<p>Web3.py 是 Python 的一个开源库，它提供了一个简单的 API，可以让我们通过 Python 程序与以太坊网络进行交互。其 GitHub 地址为 <a href="https://github.com/ethereum/web3.py">ethereum/web3.py</a>，可以访问其<a href="https://web3py.readthedocs.io/en/stable/">官方文档</a>进行使用。</p>
<h3 id="安装">安装</h3>
<p>我们可以通过 Python 包管理工具 pip 安装 Web3.py，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip3 install web3
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pip_install_web3.png" alt="pip_install_web3"></p>
<h3 id="使用">使用</h3>
<p>使用 <code>import</code> 导入所需方法即可使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">web3</span> <span class="kn">import</span> <span class="n">Web3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">w3</span> <span class="o">=</span> <span class="n">Web3</span><span class="p">(</span><span class="n">Web3</span><span class="o">.</span><span class="n">HTTPProvider</span><span class="p">(</span><span class="s2">&#34;HTTP://127.0.0.1:7545&#34;</span><span class="p">))</span>
</span></span></code></pre></div><h2 id="solidity-合约编译">Solidity 合约编译</h2>
<h3 id="合约源码">合约源码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">SimpleStorage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint256</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">favoriteBool</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">struct</span> <span class="nc">People</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">uint256</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="nb">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">People</span> <span class="k">public</span> <span class="n">person</span> <span class="o">=</span> <span class="n">People</span><span class="p">({</span><span class="n">favoriteNumber</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="o">:</span> <span class="s">&#34;Arthur&#34;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">People</span><span class="p">[]</span> <span class="k">public</span> <span class="n">people</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">mapping</span><span class="p">(</span><span class="kt">string</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="k">public</span> <span class="n">nameToFavoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">store</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_favoriteNumber</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">favoriteNumber</span> <span class="o">=</span> <span class="n">_favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">retrieve</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nf">addPerson</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_favoriteNumber</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">People</span><span class="p">({</span><span class="n">favoriteNumber</span><span class="o">:</span> <span class="n">_favoriteNumber</span><span class="p">,</span> <span class="nb">name</span><span class="o">:</span> <span class="n">_name</span><span class="p">}));</span>
</span></span><span class="line"><span class="cl">        <span class="n">nameToFavoriteNumber</span><span class="p">[</span><span class="n">_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">_favoriteNumber</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这是一个简单的存储合约，通过一个 People 结构体对象来存储人名和他喜欢数字，通过一个数组来存储多个人的信息，并提供了添加、查找方法。</p>
<h3 id="读取合约源文件">读取合约源文件</h3>
<p>当我们通过 VSCode 或其他编辑器完成 Solidity 合约编写与语法检查后，需要读取合约源文件并存入变量，供后续编译使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./SimpleStorage.sol&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">simple_storage_file</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></div><p>上述代码将 <code>SimpleStorage.sol</code> 文件内容读取到变量 <code>simple_storage_file</code> 中。</p>
<h3 id="编译合约">编译合约</h3>
<h4 id="安装-solcx">安装 <code>solcx</code></h4>
<p>合约编译需要预先安装 <code>solcx</code> 工具。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip3 install py-solc-x
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pip_install_solcx.png" alt="pip_install_solcx"></p>
<h4 id="导入-solcx">导入 <code>solcx</code></h4>
<p>使用 <code>import</code> 导入所需方法即可使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">solcx</span> <span class="kn">import</span> <span class="n">compile_standard</span><span class="p">,</span> <span class="n">install_solc</span>
</span></span></code></pre></div><h4 id="编译">编译</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">install_solc</span><span class="p">(</span><span class="s2">&#34;0.6.0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">compiled_sol</span> <span class="o">=</span> <span class="n">compile_standard</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;language&#34;</span><span class="p">:</span> <span class="s2">&#34;Solidity&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;sources&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;SimpleStorage.sol&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="n">simple_storage_file</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;outputSelection&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;*&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;*&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;abi&#34;</span><span class="p">,</span> <span class="s2">&#34;metadata&#34;</span><span class="p">,</span> <span class="s2">&#34;evm.bytecode&#34;</span><span class="p">,</span> <span class="s2">&#34;evm.sourceMap&#34;</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">solc_version</span><span class="o">=</span><span class="s2">&#34;0.6.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>上述代码我们安装了 0.6.0 版本的 Solidity 编译程序，使用 <code>solcx</code> 库中的<code>compile_standard</code> 方法对上文读取的合约源文件进行编译，并将编译结果存入变量 <code>compiled_sol</code> 中。</p>
<h4 id="获取编译结果">获取编译结果</h4>
<p>编译成功后，使用以下代码将编译好的合约写入文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;compiled_code.json&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">compiled_sol</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="获取-bytecode-与-abi">获取 bytecode 与 abi</h4>
<p>Solidity 合约的部署与交互需要 bytecode 与 abi 两个部分，我们可以通过通过以下代码将其写入对应变量供后续操作使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get bytecode</span>
</span></span><span class="line"><span class="cl"><span class="n">bytecode</span> <span class="o">=</span> <span class="n">compiled_sol</span><span class="p">[</span><span class="s2">&#34;contracts&#34;</span><span class="p">][</span><span class="s2">&#34;SimpleStorage.sol&#34;</span><span class="p">][</span><span class="s2">&#34;SimpleStorage&#34;</span><span class="p">][</span><span class="s2">&#34;evm&#34;</span><span class="p">][</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;bytecode&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">][</span><span class="s2">&#34;object&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get abi</span>
</span></span><span class="line"><span class="cl"><span class="n">abi</span> <span class="o">=</span> <span class="n">compiled_sol</span><span class="p">[</span><span class="s2">&#34;contracts&#34;</span><span class="p">][</span><span class="s2">&#34;SimpleStorage.sol&#34;</span><span class="p">][</span><span class="s2">&#34;SimpleStorage&#34;</span><span class="p">][</span><span class="s2">&#34;abi&#34;</span><span class="p">]</span>
</span></span></code></pre></div><h2 id="本地-ganache-环境">本地 Ganache 环境</h2>
<p>智能合约的调试需要将合约部署到实际的链上，而部署到 Ethereum 主网络或 Rinkeby/Koven 等测试网等也不方便调试，因此，我们需要一个本地的区块链环境，Ganache 就给我们提供了一个这样的本地调试环境。Ganache 主要分为 GUI 和 CLI 两种安装方式。</p>
<h3 id="ganache-gui">Ganache GUI</h3>
<p>在自己的本地环境，如 Mac/Windows 等系统，我们可以选择带图形界面的 Ganache 客户端，安装与使用都十分便捷，在 <a href="https://trufflesuite.com/ganache/">Ganache 官网</a>选择对应版本即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ganache_download.png" alt="ganache_download"></p>
<p>安装完成后选择 Quick Start 即可快速启动一条本地运行的区块链网络，并初始化了十个拥有 100 ETH 的账户，开发调试过程中可使用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ganache_account.png" alt="ganache_account"></p>
<h3 id="ganache-cli-安装">Ganache CLI 安装</h3>
<p>如果您的系统不支持 GUI 安装，我们可以使用 CLI 安装，安装方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm install --global yarn
</span></span><span class="line"><span class="cl">yarn global add ganache-cli
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ganache_cli_install.png" alt="ganache_cli_install"></p>
<p>等待其安装完成后即可启动本地测试网络，与 Ganache GUI 一致，也包含初始化账户与余额。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ganache_cli_start.png" alt="ganache_cli_start"></p>
<h3 id="通过-web3-连接本地-ganache-环境">通过 web3 连接本地 Ganache 环境</h3>
<p>web3 提供了库可以方便地连接到本地 Ganache 环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">w3</span> <span class="o">=</span> <span class="n">Web3</span><span class="p">(</span><span class="n">Web3</span><span class="o">.</span><span class="n">HTTPProvider</span><span class="p">(</span><span class="s2">&#34;HTTP://127.0.0.1:7545&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">chain_id</span> <span class="o">=</span> <span class="mi">5777</span>
</span></span><span class="line"><span class="cl"><span class="n">my_address</span> <span class="o">=</span> <span class="s2">&#34;0x2F490e1eA91DF6d3cC856e7AC391a20b1eceD6A5&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="s2">&#34;0fa88bf96b526a955a6126ae4cca0e72c9c82144ae9af37b497eb6afbe8a9711&#34;</span>
</span></span></code></pre></div><h2 id="solidity-合约部署">Solidity 合约部署</h2>
<h3 id="创建合约">创建合约</h3>
<p>我们可以通过 web3 库创建合约。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">SimpleStorage</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">contract</span><span class="p">(</span><span class="n">abi</span><span class="o">=</span><span class="n">abi</span><span class="p">,</span> <span class="n">bytecode</span><span class="o">=</span><span class="n">bytecode</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="部署合约">部署合约</h3>
<p>部署合约分为三个主要步骤：</p>
<ol>
<li>构造交易</li>
<li>签名交易</li>
<li>发送交易</li>
</ol>
<h4 id="构造交易">构造交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nonce</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">getTransactionCount</span><span class="p">(</span><span class="n">my_address</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">transaction</span> <span class="o">=</span> <span class="n">SimpleStorage</span><span class="o">.</span><span class="n">constructor</span><span class="p">()</span><span class="o">.</span><span class="n">buildTransaction</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;chainId&#34;</span><span class="p">:</span> <span class="n">chain_id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;gasPrice&#34;</span><span class="p">:</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">gas_price</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;from&#34;</span><span class="p">:</span> <span class="n">my_address</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;nonce&#34;</span><span class="p">:</span> <span class="n">nonce</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h4 id="签名交易">签名交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">signed_txn</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">sign_transaction</span><span class="p">(</span><span class="n">transaction</span><span class="p">,</span> <span class="n">private_key</span><span class="o">=</span><span class="n">private_key</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="发送交易">发送交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">tx_hash</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">send_raw_transaction</span><span class="p">(</span><span class="n">signed_txn</span><span class="o">.</span><span class="n">rawTransaction</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">tx_receipt</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">wait_for_transaction_receipt</span><span class="p">(</span><span class="n">tx_hash</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="与合约交互">与合约交互</h3>
<p>与部署合约步骤类似，我们可以通过 web3 库与合约交互，也分为构造交易、签名交易和发送交易三个步骤。</p>
<h4 id="构造交易-1">构造交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">simple_storage</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">contract</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="n">tx_receipt</span><span class="o">.</span><span class="n">contractAddress</span><span class="p">,</span> <span class="n">abi</span><span class="o">=</span><span class="n">abi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">store_transaction</span> <span class="o">=</span> <span class="n">simple_storage</span><span class="o">.</span><span class="n">functions</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="mi">67</span><span class="p">)</span><span class="o">.</span><span class="n">buildTransaction</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;chainId&#34;</span><span class="p">:</span> <span class="n">chain_id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;gasPrice&#34;</span><span class="p">:</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">gas_price</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;from&#34;</span><span class="p">:</span> <span class="n">my_address</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;nonce&#34;</span><span class="p">:</span> <span class="n">nonce</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h4 id="签名交易-1">签名交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">signed_store_txn</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">sign_transaction</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">store_transaction</span><span class="p">,</span> <span class="n">private_key</span><span class="o">=</span><span class="n">private_key</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h4 id="发送交易-1">发送交易</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">send_store_tx</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">send_raw_transaction</span><span class="p">(</span><span class="n">signed_store_txn</span><span class="o">.</span><span class="n">rawTransaction</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">tx_receipt</span> <span class="o">=</span> <span class="n">w3</span><span class="o">.</span><span class="n">eth</span><span class="o">.</span><span class="n">wait_for_transaction_receipt</span><span class="p">(</span><span class="n">send_store_tx</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我们通过 Web3.py 库与本地 Ganache 测试网络进行交互的步骤，在真正的生产项目开发中我们一般不会直接使用 Web3.py 这样的库，而是会使用 Brownie、HardHat 等进一步封装的库，但了解 Web3.py 或 Web3.js 等库的使用方法也非常重要。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/">Solidity 智能合约开发 - 基础</a></li>
<li><a href="https://github.com/ethereum/web3.py">ethereum/web3.py</a></li>
<li><a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py">Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Hugo + GitHub Action，搭建你的博客自动发布系统</title><link>https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/</link><pubDate>Sun, 29 May 2022 20:39:29 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/</guid><description>《后来的我们 - 五月天》 前言 在之前的一篇《免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）》中，我提到了自己通过 Hugo 这个静态</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>在之前的一篇《<a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a>》中，我提到了自己通过 <a href="https://gohugo.io">Hugo</a> 这个静态网站生成器来真正搭建我的个人博客，并在 Hugo 开源社区中 <a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den</a> 这个主题基础上进行了一些个人定制化改造和配置，满足了自己的需求。</p>
<p>我的方案主要分为以下几个核心部分：</p>
<ol>
<li>个人博客源仓库，对博客配置及所有文章 <code>.md</code> 源文件进行版本管理，配合 GitHub Action 进行自动化部署，自动生成静态站点推送到 GitHub Pages 博客发布仓库。</li>
<li>GitHub Pages 博客发布仓库，以 <code>username.github.io</code> 形式命名的仓库，使用 GitHub Pages 实现网站部署，可以通过配置域名 CNAME 解析使用自定义域名。</li>
<li>Hugo 主题仓库，fork 喜欢的主题，并对自己的个人定制化改造配置进行版本管理，通过 <code>git submodule</code> 的方式链接到个人博客源仓库。</li>
<li>其他组件源仓库，如 <a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">umami 网站数据统计</a>及 <a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">Cusdis 网站评论系统</a>等。</li>
</ol>
<p>下文会对搭建、本地测试、自动化部署维护等过程进行详细讲解，希望对大家所有帮助。</p>
<h2 id="使用-hugo-搭建博客">使用 Hugo 搭建博客</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_website.png" alt="hugo_website"></p>
<p><a href="https://gohugo.io">Hugo</a> 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Gatsby、Jekyll、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。</p>
<h3 id="安装-hugo">安装 Hugo</h3>
<p>我使用的是 macOS，所以使用官方推荐的 homebrew 方式进行 hugo 程序的安装，其他系统也类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install hugo
</span></span></code></pre></div><p>完成后，使用以下命令进行验证：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo version
</span></span></code></pre></div><h3 id="创建-hugo-网站">创建 Hugo 网站</h3>
<p>通过上述命令安装 hugo 程序后，就可以通过 <code>hugo new site</code> 命令进行网站创建、配置与本地调试了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site blog-test
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_new_site.png" alt="hugo_new_site"></p>
<h3 id="配置主题">配置主题</h3>
<p>当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 社区有了很丰富的主题，可以通过官网 <a href="https://themes.gohugo.io">Themes</a> 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目仓库，一般都会有很详细的安装及配置说明。下面我就以我目前在使用的 <a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den</a> 这个主题为例，演示一下配置流程。</p>
<h4 id="关联主题仓库">关联主题仓库</h4>
<p>我们可以将主题仓库直接 <code>git clone</code> 下来进行使用，但这种方式有一些弊端，当之后自己对主题进行修改后，可能会与原主题产生一些冲突，不方便版本管理与后续更新。我采用的是将原主题仓库 <code>fork</code> 到自己的账户，并使用 <code>git submodule</code> 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> blog-test/
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git submodule add https://github.com/pseudoyu/hugo-theme-den themes/hugo-theme-den
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_init_theme.png" alt="hugo_init_theme"></p>
<h4 id="更新主题">更新主题</h4>
<p>如果是 clone 了其他人的博客项目进行修改，则需要用以下命令进行初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --init --recursive
</span></span></code></pre></div><p>如果需要同步主题仓库的最新修改，需要运行以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --remote
</span></span></code></pre></div><h4 id="初始化主题配置及发布">初始化主题配置及发布</h4>
<p>每个主题一般都会提供一些实例配置与初始页面，开始使用主题时可以将其 <code>exampleSite/</code> 目录下的文件复制到站点目录下，在此基础上进行调整配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp -rf themes/hugo-theme-den/exampleSite/* ./
</span></span></code></pre></div><p>初始化主题基础配置后，我们可以在 <code>config.toml</code> 文件中进行站点细节配置，具体配置项参考各主题说明文档。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_theme_config.png" alt="hugo_theme_config"></p>
<p>完成后，可以通过 <code>hugo new</code> 命令发布新文章。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new posts/blog-test.md
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_new_post.png" alt="hugo_new_post"></p>
<h4 id="本地调试站点">本地调试站点</h4>
<p>Hugo 会生成静态网页，我们在本地编辑调试时可以通过 <code>hugo server</code> 命令进行本地实时调试预览，无须每次都重新生成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_server.png" alt="hugo_server"></p>
<p>运行服务后，我们可以通过浏览器 <code>http://localhost:1313</code> 地址访问我们的本地预览网页。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_server_preview.png" alt="hugo_server_preview"></p>
<h3 id="使用-github-pages-前期准备">使用 GitHub Pages 前期准备</h3>
<h4 id="域名购买">域名购买</h4>
<p>作为一个对外发布的网站，我们需要购买一个域名并配置解析，指向我们网站所在的服务器，才能让外界以比较方便的方式访问。域名购买平台很多，我用过的有 <a href="https://www.cloudflare.com">Cloudflare</a>、<a href="https://www.namesilo.com">NameSilo</a>、<a href="https://www.godaddy.com">GoDaddy</a> 等，我最后常用的还是 Cloudflare，因为其同时还提供了 CDN、网站数据分析、定制规则等强大功能。</p>
<p>首先我们需要注册一个 Cloudflare 账户，登录后选择左侧边栏的“注册域”，并搜索自己想注册的域名。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain.png" alt="cloudflare_register_domain"></p>
<p>选择了心仪的域名后，点击并选择购买时限并填写个人信息。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain_choose.png" alt="cloudflare_register_domain_choose"></p>
<p>选择付款方式，建议可以选择自动续订，以免忘记续费。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain_payment.png" alt="cloudflare_register_domain_payment"></p>
<p>类型选择 Personal 即可，并点击完成购买。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_done.png" alt="cloudflare_register_done"></p>
<p>等待 Cloudflare 处理后即可查看信息。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_domain.jpeg" alt="cloudflare_domain"></p>
<h4 id="github-pages-仓库">GitHub Pages 仓库</h4>
<p>GitHub Pages 项目需要符合 <code>username.github.io</code> 的特殊命名格式，仓库建立完成后，可以在设置中配置自己注册的自定义域名来指向 GitHub Pages 生成的网址。此外，需要将博客站点配置文件 <code>config.toml</code> 中的 <code>baseURL</code> 改为自己的自定义域名，格式为 <code>&quot;https://www.pseudoyu.com/&quot;</code>，这样博客站点才能正常访问 GitHub Pages 生成的网站服务。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/github_pages_repo.png" alt="github_pages_repo"></p>
<h4 id="域名解析">域名解析</h4>
<p>按照上文步骤注册好后，需要在域名托管商进行 DNS 解析，在这里我们需要选择 CNAME，指向我们的 GitHub Pages 网址。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_cname_config.png" alt="cloudflare_cname_config"></p>
<p>因为 CNAME 解析没办法设置 root 域名，即只能设置 <code>www.pseudoyu.com</code> 或其他子域名，而不是 <code>pseudoyu.com</code>，因此，我们可以通过 Cloudflare 上自定义规则设置域名重定向，具体配置如下，仅需将我的域名替换成自己的域名即可。即使你是通过 NameSilo 注册的域名，也可以通过 Cloudflare 来添加站点以实现功能，或者其他托管平台也有类似的功能，按照说明配置即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_cname_rule_config.png" alt="cloudflare_cname_rule_config"></p>
<h3 id="github-pages-发布博客">GitHub Pages 发布博客</h3>
<p>完成上述准备工作后，我们现在已经可以通过自定义域名来访问我们的 GitHub Pages 页面了，目前因为项目仓库是空的，访问后会报 <code>404</code> 页面。</p>
<p>我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维护服务，更稳定、安全，因此我们需要上传 Hugo 生成的静态网页文件至 GitHub Page 项目仓库。</p>
<h4 id="手动发布">手动发布</h4>
<p>当我们编辑博客内容并通过 <code>hugo server</code> 本地调试后，就可以通过 <code>hugo</code> 命令生成静态网页文件了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> public/
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_gen_pages.png" alt="hugo_gen_pages"></p>
<p>Hugo 默认会将生成的静态网页文件存放在 <code>public/</code> 目录下，我们可以通过将 <code>public/</code> 目录初始化为 git 仓库并关联我们的 <code>pseudoyu/pseudoyu.github.io</code> 远程仓库来推送我们的网页静态文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:pseudoyu/pseudoyu.github.io
</span></span><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;add test&#34;</span>
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hugo_public_init.png" alt="hugo_public_init"></p>
<p>核对文件修改后，即可通过 <code>git push origin master</code> 推送到 GitHub Pages 仓库，稍等几分钟即可通过我们的自定义域名来访问我们的博客站点了，和我们 <code>hugo server</code> 本地调试完全一致。</p>
<h4 id="自动发布">自动发布</h4>
<p>通过上述命令我们可以手动发布我们的静态文件，但还是有以下弊端：</p>
<ol>
<li>发布步骤还是比较繁琐，本地调试后还需要切换到 <code>public/</code> 目录进行上传</li>
<li>无法对博客 <code>.md</code> 源文件进行备份与版本管理</li>
</ol>
<p>因此，我们需要简单顺滑的方式来进行博客发布，首先我们初始化博客源文件的仓库，如我的仓库为 <a href="https://github.com/pseudoyu/yu-blog">pseudoyu/yu-blog</a>。</p>
<p>因为我们的博客基于 GitHub 与 GitHub Pages，可以通过官方提供的 GitHub Action 进行 CI 自动发布，下面我会进行详细讲解。GitHub Action 是一个持续集成和持续交付(CI/CD) 平台，可用于自动执行构建、测试和部署管道，目前已经有很多开发好的工作流，可以通过简单的配置即可直接使用。</p>
<p>配置在仓库目录 <code>.github/workflows</code> 下，以 <code>.yml</code> 为后缀。我的 GitHub Action 配置为 <a href="https://github.com/pseudoyu/yu-blog/blob/master/.github/workflows/deploy.yml">pseudoyu/yu-blog deploy.yml</a>，自动发布示例配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">schedule</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Runs everyday at 8:00 AM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">cron</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0 0 * * *&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;latest&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy Web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">PERSONAL_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PERSONAL_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">EXTERNAL_REPOSITORY</span><span class="p">:</span><span class="w"> </span><span class="l">pseudoyu/pseudoyu.github.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">PUBLISH_BRANCH</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">PUBLISH_DIR</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">commit_message</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.head_commit.message }}</span><span class="w">
</span></span></span></code></pre></div><p><code>on</code> 表示 GitHub Action 触发条件，我设置了 <code>push</code>、<code>workflow_dispatch</code> 和 <code>schedule</code> 三个条件：</p>
<ul>
<li><code>push</code>，当这个项目仓库发生推送动作后，执行 GitHub Action</li>
<li><code>workflow_dispatch</code>，可以在 GitHub 项目仓库的 Action 工具栏进行手动调用</li>
<li><code>schedule</code>，定时执行 GitHub Action，如我的设置为北京时间每天早上执行，主要是使用一些自动化统计 CI 来自动更新我博客的关于页面，如本周编码时间，影音记录等，如果你不需要定时功能，可以删除这个条件</li>
</ul>
<p><code>jobs</code> 表示 GitHub Action 中的任务，我们设置了一个 <code>build</code> 任务，<code>runs-on</code> 表示 GitHub Action 运行环境，我们选择了 <code>ubuntu-latest</code>。我们的 <code>build</code> 任务包含了 <code>Checkout</code>、<code>Setup Hugo</code>、<code>Build Web</code> 和 <code>Deploy Web</code> 四个主要步骤，其中 <code>run</code> 是执行的命令，<code>uses</code> 是 GitHub Action 中的一个插件，我们使用了 <code>peaceiris/actions-hugo@v2</code> 和 <code>peaceiris/actions-gh-pages@v3</code> 这两个插件。其中 <code>Checkout</code> 步骤中 <code>with</code> 中配置 <code>submodules</code> 值为 <code>true</code> 可以同步博客源仓库的子模块，即我们的主题模块。</p>
<p>首先需要将上述 <code>deploy.yml</code> 中的 <code>EXTERNAL_REPOSITORY</code> 改为自己的 GitHub Pages 仓库，如我的设置为 <code>pseudoyu/pseudoyu.github.io</code>。</p>
<p>因为我们需要从博客仓库推送到外部 GitHub Pages 仓库，需要特定权限，要在 GitHub 账户下 <code>Setting - Developer setting - Personal access tokens</code> 下创建一个 Token。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/github_psersonal_access_token.png" alt="github_psersonal_access_token"></p>
<p>权限需要开启 <code>repo</code> 与 <code>workflow</code>。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_blog_personal_token.png" alt="yu_blog_personal_token"></p>
<p>配置后复制生成的 Token（注：只会出现一次），然后在我们博客源仓库的 <code>Settings - Secrets - Actions</code> 中添加 <code>PERSONAL_TOKEN</code> 环境变量为刚才的 Token，这样 GitHub Action 就可以获取到 Token 了。</p>
<p>完成上述配置后，推送代码至仓库，即可触发 GitHub Action，自动生成博客页面并推送至 GitHub Pages 仓库。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_blog_ci.png" alt="yu_blog_ci"></p>
<p>而 GitHub Pages 仓库更新后，又会自动触发官方页面部署 CI，实现我们的网站发布。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/page_build_ci.png" alt="page_build_ci"></p>
<p>经过上述配置，我们已经实现了 Hugo 博客本地搭建及版本管理、GitHub Pages 部署网站发布，Hugp 主题管理及更新等功能，实现了完整的系统。现在每当我们本地通过熟悉的 Markdown 语法完成博客内容编辑后，只需要推送代码，等待几分钟，即可通过我们的自定义域名访问更新后的网站。</p>
<h3 id="组件拓展">组件拓展</h3>
<p>一个完整的博客系统还需要一些组件，如网站数据统计、评论系统等，我针对这两个核心需求也写了完整的 Serverless 搭建教程，可根据需求进行部署配置。</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
</ul>
<h2 id="总结">总结</h2>
<p>以上就是我通过 Hugo 与 GitHub Action 实现的免费博客自动部署系统，我自己的实现仓库在 <a href="https://github.com/pseudoyu/yu-blog">pseudoyu/yu-blog</a> 仓库中，我定制化的主题仓库在 <a href="https://github.com/pseudoyu/hugo-theme-den">pseudoyu/hugo-theme-den</a> 中。</p>
<p>我使用 GitHub Action 还实现了很多好玩的自动化个人统计功能，自动更新我的<a href="https://github.com/pseudoyu">GitHub Profile</a>，项目仓库为 <a href="https://github.com/pseudoyu/pseudoyu">pseudoyu/pseudoyu</a>，可以进入 <code>.github/workflows</code> 中自行探索。这些系统还在不断完善中，欢迎大家参与贡献与交流。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://gohugo.io">Hugo 官网</a></li>
<li><a href="https://github.com/features/actions">GitHub Action</a></li>
<li><a href="https://pages.github.com">GitHub Pages</a></li>
<li><a href="https://www.cloudflare.com">Cloudflare 官网</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
<li><a href="https://www.pseudoyu.com">我的 Pseudoyu 个人博客</a></li>
<li><a href="https://github.com/pseudoyu">我的 GitHub Profile</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Ghost 5.0 来了，使用 Digital Ocean 一键部署吧</title><link>https://www.pseudoyu.com/en/2022/05/29/deploy_ghost_5_on_digital_ocean_vps/</link><pubDate>Sun, 29 May 2022 14:21:12 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/29/deploy_ghost_5_on_digital_ocean_vps/</guid><description>《后来的我们 - 五月天》 前言 我是一个静态博客与 Serverless 支持者，自己的个人博客与一些知识库项目也都是通过 hugo 生成并托管在 GitHub Pages 上的。这种方式很方便进行版本</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>我是一个静态博客与 Serverless 支持者，自己的<a href="https://www.pseudoyu.com">个人博客</a>与一些<a href="https://www.pseudoyu.com/blockchain-guide">知识库项目</a>也都是通过 <a href="https://gohugo.io">hugo</a> 生成并托管在 <a href="https://pages.github.com">GitHub Pages</a> 上的。这种方式很方便进行版本管理与部署维护，但对于非技术的人来说，通过命令行 git 操作的方式也有些过于 geek，牵扯到多人协作等场景也不太方便。</p>
<p>上周有个前同事（非技术）让我帮忙搭建一个门户网站，主要展示一下公司信息、发布一些资讯、专题、工具等，出于易用性等考虑，也刚好看到 <a href="https://ghost.org">Ghost</a> 官方发布了 5.0 版本，支持了很多强大的功能，如邮件订阅、数据分析等，且可以自部署，所以考虑了这个方案，下文记录一下安装与部署流程。</p>
<h2 id="ghost-50">Ghost 5.0</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_5_intro.jpg" alt="ghost_5_intro"></p>
<p>Ghost 是一个非常老派的博客工具，自 2013 年原型发布以来已经经过了 9 年的发展完善，于最近刚推出 5.0 版本，很适合个人、独立发布平台等。5.0 版本中，有以下特性更新：</p>
<ul>
<li>支持更强大的订阅功能，如订阅分级等</li>
<li>支持多个邮件订阅，修改设计更加方便</li>
<li>支持发布优惠活动，也有更强大的用户分析面板</li>
<li>原生支持视频、博客、GIF、电商产品、NFT 等</li>
<li>发布更多新主题</li>
<li>优化性能 20%+</li>
<li>&hellip;</li>
</ul>
<p>Ghost 官方支持多种部署方式，如 Ghost(Pro) 托管、Docker 镜像、服务器安装等，而因为 Ghost 生成环境依赖 Ubuntu，Node，MySQL 等环境，如果需要自己单独搭建会比较麻烦，且维护成本也较高。经过一番调研，根据官方文档的安装说明，Digital Ocean 是 Ghost 的官方云托管合作伙伴，提供了一键部署安装的方式，简单便捷。</p>
<h2 id="安装部署说明">安装部署说明</h2>
<h3 id="域名购买">域名购买</h3>
<p>作为一个对外发布的网站，我们需要购买一个域名并配置解析，指向我们网站所在的服务器，才能让外界以比较方便的方式访问。域名购买平台很多，我用过的有 <a href="https://www.cloudflare.com">Cloudflare</a>、<a href="https://www.namesilo.com">NameSilo</a>、<a href="https://www.godaddy.com">GoDaddy</a> 等，我最后常用的还是 Cloudflare，因为其同时还提供了 CDN、网站数据分析、定制规则等强大功能。</p>
<p>首先我们需要注册一个 Cloudflare 账户，完成并登录后，选择左侧边栏的“注册域”，并搜索自己想注册的域名。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain.png" alt="cloudflare_register_domain"></p>
<p>选择了心仪的域名后，点击并选择购买时限并填写个人信息。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain_choose.png" alt="cloudflare_register_domain_choose"></p>
<p>选择付款方式，建议可以选择自动续订，以免忘记续费。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_domain_payment.png" alt="cloudflare_register_domain_payment"></p>
<p>类型选择 Personal 即可，并点击完成购买。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_register_done.png" alt="cloudflare_register_done"></p>
<p>等待 Cloudflare 处理后即可查看信息。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_domain.jpeg" alt="cloudflare_domain"></p>
<h3 id="digital-ocean-ssh-配置">Digital Ocean ssh 配置</h3>
<p>因为我们后续需要访问 Digital Ocean 的主机，我们需要先注册一个帐号，并配置我们的 ssh key，以便免密登录。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_add_key.png" alt="digital_ocean_add_key"></p>
<p>输入我们的 ssh key，点击添加即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_ssh_config.png" alt="digital_ocean_ssh_config"></p>
<h3 id="一键创建-ghost-droplet">一键创建 Ghost Droplet</h3>
<p>如上文所述，Ghost 提供了在 Digital Ocean 上一键创建 Droplet 的支持，我们可以访问<a href="https://ghost.org/docs/install/">安装说明文档</a>，点击 Digital Ocean 图标进行跳转。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_use_digital_ocean.png" alt="ghost_use_digital_ocean"></p>
<p>我们也可以在 Digital Ocean 镜像市场中搜索选择，点击右上角创建。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_market_ghost.png" alt="digital_ocean_market_ghost"></p>
<p>根据官方说明，选择 5 美元/月套餐配置已经足够，后续有更高需求也可以一键扩容（注：如先选择了高配置，无法进行降级）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_ghost_config.png" alt="digital_ocean_ghost_config"></p>
<p>选择主机实例地区，我选择的是美国区域，可以根据需求自己选择，并选择上文操作添加到 ssh 配置，方便之后进行访问。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_ghost_region.png" alt="digital_ocean_ghost_region"></p>
<p>完成配置选择后，我们选择数量、名称并点击 Create Droplet 即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_ghost_create.png" alt="digital_ocean_ghost_create"></p>
<p>等待 Digital Ocean 准备主机，约几分钟就可以完成。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_ocean_ghost_done_hide.jpeg" alt="digital_ocean_ghost_done_hide"></p>
<h3 id="配置域名解析">配置域名解析</h3>
<p>因为 Ghost 需要进行 https 配置，且出于方便用户进行访问等考虑，我们需要对新创建的服务器进行 DNS 解析。</p>
<p>登录 Cloudflare，选择我们刚注册的域名，选择左侧 DNS 标签栏，配置 A 解析（一般需要配置 root 解析与 www 解析），其他域名托管网站操作也大同小异。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_dns_config.jpeg" alt="cloudflare_dns_config"></p>
<h3 id="域名-ssltls-配置可选">域名 SSL/TLS 配置（可选）</h3>
<p>如果使用 Cloudflare 进行托管，可以选择配置 SSL/TLS 加密模式为完全，可以更加保障安全性。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_ssl_config.png" alt="cloudflare_ssl_config"></p>
<h3 id="一键安装-ghost-服务">一键安装 Ghost 服务</h3>
<p>完成域名解析后，我们可通过 Digital Ocean 控制台或其他终端工具连接到主机，进行一键安装。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_one_key_install.jpeg" alt="ghost_one_key_install"></p>
<p>Enter 后脚本会自动开始安装服务及各项依赖。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_start_install.png" alt="ghost_start_install"></p>
<p>安装是命令行交互式，我们仅需要输入两个自定义配置：</p>
<ul>
<li>Enter your blog URL</li>
<li>Enter your email(For SSL Certificate)</li>
</ul>
<p>这两个地方输入自己的域名与邮箱，等待安装完成即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_install_config.jpeg" alt="ghost_install_config"></p>
<h3 id="访问网站">访问网站</h3>
<p>等待脚本执行完成后，我们就可以访问 Ghost 网站了。</p>
<ul>
<li>https://<code>{your domain}</code>/ghost，后台管理界面</li>
<li>https://<code>{your domain}</code>，网站地址</li>
</ul>
<p>第一次登录会需要注册一个管理员帐号，注册完成后登录即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_login.png" alt="ghost_login"></p>
<p>登录后即可看到非常美观的 Ghost 后台管理页面。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_dashboard.png" alt="ghost_dashboard"></p>
<p>Ghost 提供了非常多可定制化配置选项，可以根据自己网站的需求进行调整。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ghost_setting.png" alt="ghost_setting"></p>
<h2 id="总结">总结</h2>
<p>以上就是我使用 Ghost 官方推荐的 Digital Ocean 托管方式部署自己的 Ghost 网站，Ghost 升级 5.0 后已经能满足大部分网站的需求，且对商业化、数据处理有了更好的支持，对于个人博客和小团队来说都是比较好的选择，希望对大家有所帮助。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://ghost.org">Ghost 官网</a></li>
<li><a href="https://www.digitalocean.com">Digital Ocean 官网</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Solidity 智能合约开发 - 基础</title><link>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</link><pubDate>Wed, 25 May 2022 01:07:33 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</guid><description>《后来的我们 - 五月天》 前言 去年读研的时候上的 HKU 的 &amp;lt;COMP7408 Distributed Ledger and Blockchain Technology&amp;gt;，课程中学习了以太坊智能合约的开发，做了一个简单的图书</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>去年读研的时候上的 HKU 的 <code>&lt;COMP7408 Distributed Ledger and Blockchain Technology&gt;</code>，课程中学习了以太坊智能合约的开发，做了一个简单的图书管理 ÐApp，然后毕业设计也选择了基于 Ethereum 做了一个音乐版权应用，详见 <a href="https://github.com/pseudoyu/uright">Uright - 区块链音乐版权管理ÐApp</a>，对 Solidity 开发有一些基础了解。</p>
<p>后来工作后主要做联盟链和业务开发这一块，很久没有碰过合约，对于语法和底层一些概念都已经一知半解，正好最近做的项目是基于 EVM 的一条链，涉及了一些基本的存证、回检和迁移相关合约的开发，调试起来有些吃力，于是打算系统学习一下，梳理一下笔记成文章，敦促自己好好思考总结。</p>
<p>这系列文章也会收录在我的个人知识库项目 《<a href="https://www.pseudoyu.com/blockchain-guide/">区块链入门指南</a>》中，希望在学习过程中不断完善。有兴趣的朋友也可以访问<a href="https://github.com/pseudoyu/blockchain-guide">项目仓库</a>参与贡献或提出建议。</p>
<p>本文为系列第一篇，主要涉及 Solidity 基础知识。</p>
<h2 id="智能合约-与-solidity-语言">智能合约 与 Solidity 语言</h2>
<p>智能合约是运行在链上的程序，合约开发者可以通过智能合约实现与链上资产/数据进行交互，用户可以通过自己的链上账户来调用合约，访问资产与数据。因为区块链保留区块历史记录的链式结构、去中心化、不可篡改等特征，智能合约相比传统应用来说能更公正、透明。</p>
<p>然而，因为智能合约需要与链进行交互，部署、数据写入等操作都会消耗一定费用，数据存储与变更成本也比较高，因此在设计合约时需要着重考虑资源的消耗。此外，常规智能合约一经部署就无法进行修改，因此，合约设计时也需要多考虑其安全性、可升级性与拓展性。</p>
<p>Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言，在 EVM 虚拟机上运行，语法整体类似于 Javascript，是目前最流行的智能合约语言，也是入门区块链与 Web3 所必须掌握的语言。针对上述的一些合约编写的问题，Solidity 也都有相对完善的解决方案支持，后续会详细讲解。</p>
<h2 id="开发调试工具">开发/调试工具</h2>
<p>与常规编程语言不同，Solidity 智能合约的开发往往无法直接通过一个 IDE 或本地环境进行方便的调试，而是需要与一个链上节点进行交互。开发调试往往也不会直接与主网（即真实资产、数据与业务所在的链）进行交互，否则需要承担高额手续费。目前开发调试主要有以下几种方式与框架：</p>
<ol>
<li><a href="https://github.com/trufflesuite/truffle">Truffle</a>。Truffle 是一个非常流行的 Javascript 的 Solidity 合约开发框架，提供了完整的开发、测试、调试工具链，可以与本地或远程网络进行交互。</li>
<li><a href="https://github.com/eth-brownie/brownie">Brownie</a>。Brownie 是一个基于 Python 的 Solidity 合约开发框架，以简洁的 Python 语法为调试和测试提供了便捷的工具链。</li>
<li><a href="https://github.com/NomicFoundation/hardhat">Hardhat</a>。Hardhat 是另一个基于 Javascript 的开发框架，提供了非常丰富的插件系统，适合开发复杂的合约项目。</li>
</ol>
<p>除了开发框架外，更好地进行 Solidity 还需要熟悉一些工具：</p>
<ol>
<li><a href="https://remix.ethereum.org">Remix IDE</a>。通过 Ethereum 官方提供的基于浏览器的 Remix 开发工具进行调试，Remix 会提供完整的 IDE、编译工具、部署调试的测试节点环境、账户等，可以很方便地进行测试，这是我学习使用时用的最多的工具。Remix 还可以通过 MetaMask 插件与测试网、主网进行直接交互，部分生产环境也会使用它进行编译部署。</li>
<li>Remix IDE 对于语法提示等并不完善，因此，可以使用 <a href="https://code.visualstudio.com">Visual Studio Code</a> 配合 <a href="https://marketplace.visualstudio.com/items?itemName=juanblanco.solidity">Solidity</a> 进行编写，有更好的体验。</li>
<li><a href="https://metamask.io">MetaMask</a>。一个常用的钱包应用，开发过程中可以通过浏览器插件与测试网、主网进行交互，方便开发者进行调试。</li>
<li><a href="https://trufflesuite.com/ganache/">Ganache</a>。Ganache 是一个开源的虚拟本地节点，提供了一个虚拟链网络，可以通过各类 Web3.js、Remix 或一些框架工具与之交互，适合有一定规模的项目进行本地调试与测试。</li>
<li><a href="https://infura.io">Infura</a>。Infura 是一个 IaaS（Infrastructure as a Service）产品，我们可以申请自己的 Ethereum 节点，通过 Infura 提供的 API 进行交互，可以很方便地进行调试，也更接近生产环境。</li>
<li><a href="https://www.openzeppelin.com">OpenZeppelin</a>。OpenZeppelin 提供了非常多的合约开发库与应用，能兼顾安全、稳定的同时给予开发者更好的开发体验，降低合约开发成本。</li>
</ol>
<h2 id="合约编译部署">合约编译/部署</h2>
<p>Solidity 合约是以 <code>.sol</code> 为后缀的文件，无法直接执行，需要编译为 EVM（Ethereum Virtual Machine）可识别的字节码才能在链上运行。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/compile_solidity.png" alt="compile_solidity"></p>
<p>编译完成后，由合约账户进行部署到链上，其他账户可通过钱包与合约进行交互，实现链上业务逻辑。</p>
<h2 id="核心语法">核心语法</h2>
<p>经过上文，我们对 Solidity 的开发、调试与部署有了一定了解。接下来我们就具体学习一下 Solidity 的核心语法。</p>
<h3 id="数据类型">数据类型</h3>
<p>与我们常见的编程语言类似，Solidity 有一些内置数据类型。</p>
<h4 id="基本数据类型">基本数据类型</h4>
<ul>
<li><code>boolean</code>，布尔类型有 <code>true</code> 和 <code>false</code> 两种类型，可以通过 <code>bool public boo = true;</code> 来定义，默认值为 <code>false</code></li>
<li><code>int</code>，整数类型，可以指定 <code>int8</code> 到 <code>int256</code>，默认为 <code>int256</code>，通过 <code>int public int = 0;</code> 来定义，默认值为 <code>0</code>，还可以通过 <code>type(int).min</code> 和 <code>type(int).max</code> 来查看类型最小和最大值</li>
<li><code>uint</code>，非负整数类型，可以指定 <code>uint8</code>、<code>uint16</code>、<code>uint256</code>，默认为 <code>uint256</code>，通过 <code>uint8 public u8 = 1;</code> 来定义，默认值为 <code>0</code></li>
<li><code>address</code>，地址类型，可以通过 <code>address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;</code> 来定义，默认值为 <code>0x0000000000000000000000000000000000000000</code></li>
<li><code>bytes</code>，<code>byte[]</code> 的缩写，分为固定大小数组和可变数组，通过 <code>bytes1 a = 0xb5;</code> 来定义</li>
</ul>
<p>还有一些相对复杂的数据类型，我们单独进行讲解。</p>
<h4 id="enum">Enum</h4>
<p><code>Enum</code> 是枚举类型，可以通过以下语法来定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="nc">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Unknown</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">Start</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">End</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">Pause</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>并通过以下语法来进行更新与初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实例化枚举类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Status</span> <span class="k">public</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 更新枚举值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nf">pause</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">status</span> <span class="o">=</span> <span class="n">Status</span><span class="p">.</span><span class="n">Pause</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化枚举值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nf">reset</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="数组">数组</h4>
<p>数组是一种存储同类元素的有序集合，通过 <code>uint[] public arr;</code> 来进行定义，在定义时可以预先指定数组大小，如 <code>uint[10] public myFixedSizeArr;</code>。</p>
<p>需要注意的是，我们可以在内存中创建数组（关于 <code>memory</code> 与 <code>storage</code> 等差异后续会详细讲解），但是必须固定大小，如 <code>uint[] memory a = new uint[](5);</code>。</p>
<p>数组类型有一些基本操作方法，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// 定义数组类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">uint</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="k">public</span> <span class="n">arr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">arr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除最后一个数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">arr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除某个索引值数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取数组长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">uint</span> <span class="n">len</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="mapping">mapping</h4>
<p><code>mapping</code> 是一种映射类型，使用 <code>mapping(keyType =&gt; valueType)</code> 来定义，其中键需要是内置类型，如 <code>bytes</code>、<code>int</code>、<code>string</code> 或合约类型，而值可以是任何类型，如嵌套 <code>mapping</code> 类型。需要注意的是，<code>mapping</code> 类型是不能被迭代遍历的，需要遍历则需要自行实现对应索引。</p>
<p>下面说明一下各类操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// 定义嵌套 mapping 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">mapping</span><span class="p">(</span><span class="kt">string</span> <span class="o">=&gt;</span> <span class="kd">mapping</span><span class="p">(</span><span class="kt">string</span> <span class="o">=&gt;</span> <span class="kt">string</span><span class="p">))</span> <span class="n">nestedMap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">nestedMap</span><span class="p">[</span><span class="n">id</span><span class="p">][</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#34;0707&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 读取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">string</span> <span class="nb">value</span> <span class="o">=</span> <span class="n">nestedMap</span><span class="p">[</span><span class="n">id</span><span class="p">][</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span> <span class="n">nestedMap</span><span class="p">[</span><span class="n">id</span><span class="p">][</span><span class="n">key</span><span class="p">];</span>
</span></span></code></pre></div><h4 id="struct">Struct</h4>
<p><code>struct</code> 是结构类型，对于复杂业务，我们经常需要定义自己的结构，将关联的数据组合起来，可以在合约内进行定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">Struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">struct</span> <span class="nc">Data</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">string</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">string</span> <span class="n">hash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Data</span> <span class="k">public</span> <span class="nb">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">function</span> <span class="nf">create</span><span class="p">(</span><span class="kt">string</span> <span class="n">calldata</span> <span class="n">_id</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="nb">data</span> <span class="o">=</span> <span class="n">Data</span><span class="p">{</span><span class="n">id</span><span class="o">:</span> <span class="n">_id</span><span class="p">,</span> <span class="n">hash</span><span class="o">:</span> <span class="s">&#34;111222&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 更新数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">function</span> <span class="nf">update</span><span class="p">(</span><span class="kt">string</span> <span class="n">_id</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="c1">// 查询数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="kt">string</span> <span class="n">id</span> <span class="o">=</span> <span class="nb">data</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// 更新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nb">data</span><span class="p">.</span><span class="n">hash</span> <span class="o">=</span> <span class="s">&#34;222333&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也可以单独文件定义所有需要的结构类型，由合约按需导入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// &#39;StructDeclaration.sol&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">Data</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span> <span class="n">hash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// &#39;Struct.sol&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;./StructDeclaration.sol&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">Struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Data</span> <span class="k">public</span> <span class="nb">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="变量常量immutable">变量/常量/<code>Immutable</code></h3>
<p>变量是 Solidity 中可改变值的一种数据结构，分为以下三种：</p>
<ul>
<li><code>local</code> 变量</li>
<li><code>state</code> 变量</li>
<li><code>global</code> 变量</li>
</ul>
<p>其中， <code>local</code> 变量定义在方法中，而不会存储在链上，如 <code>string var = &quot;Hello&quot;;</code>；而 <code>state</code> 变量在方法之外定义，会存储在链上，通过 <code>string public var;</code> 定义变量，写入值时会发送交易，而读取值则不会；<code>global</code> 变量则是提供了链信息的全局变量，如当前区块时间戳变量，<code>uint timestamp = block.timestamp;</code>，合约调用者地址变量，<code>address sender = msg.sender;</code> 等。</p>
<p>变量可以通过不同关键字进行声明，表示不同的存储位置。</p>
<ul>
<li><code>storage</code>，会存储在链上</li>
<li><code>memory</code>，在内存中，只有方法被调用的时候才存在</li>
<li><code>calldata</code>，作为调用方法传入参数时存在</li>
</ul>
<p>而常量是一种不可以改变值的变量，使用常量可以节约 gas 费用，我们可以通过 <code>string public constant MY_CONSTANT = &quot;0707&quot;;</code> 来进行定义。<code>immutable</code> 则是一种特殊的类型，它的值可以在 <code>constructor</code> 中初始化，但不可以再次改变。灵活使用这几种类型可以有效节省 gas 费并保障数据安全。</p>
<h3 id="函数">函数</h3>
<p>在 Solidity 中，函数用来定义一些特定业务逻辑。</p>
<h4 id="权限声明">权限声明</h4>
<p>函数分为不同的可见性，用户不同的关键字进行声明：</p>
<ul>
<li><code>public</code>，任何合约都可调用</li>
<li><code>private</code>，只有定义了该方法的合约内部可调用</li>
<li><code>internal</code>，只有在继承合约可调用</li>
<li><code>external</code>，只有其他合约和账户可调用</li>
</ul>
<p>查询数据的合约函数也有不同的声明方式：</p>
<ul>
<li><code>view</code> 可以读取变量，但不能更改</li>
<li><code>pure</code> 不可以读也不可以修改</li>
</ul>
<h4 id="函数修饰符">函数修饰符</h4>
<p><code>modifier</code> 函数修饰符可以在函数运行前/后被调用，主要用来进行权限控制、对输入参数进行校验以及防止重入攻击等。这三种功能修饰符可以通过以下语法定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">modifier</span> <span class="nf">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">require</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span> <span class="o">==</span> <span class="n">owner</span><span class="p">,</span> <span class="s">&#34;Not owner&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">modifier</span> <span class="nf">validAddress</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">require</span><span class="p">(</span><span class="n">_addr</span> <span class="o">!=</span> <span class="kt">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="s">&#34;Not valid address&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">modifier</span> <span class="nf">noReentrancy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">locked</span><span class="p">,</span> <span class="s">&#34;No reentrancy&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">locked</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>使用函数修饰符则是需要在函数声明时添加对应修饰符，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">changeOwner</span><span class="p">(</span><span class="kt">address</span> <span class="n">_newOwner</span><span class="p">)</span> <span class="k">public</span> <span class="n">onlyOwner</span> <span class="n">validAddress</span><span class="p">(</span><span class="n">_newOwner</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">owner</span> <span class="o">=</span> <span class="n">_newOwner</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">decrement</span><span class="p">(</span><span class="kt">uint</span> <span class="n">i</span><span class="p">)</span> <span class="k">public</span> <span class="n">noReentrancy</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">x</span> <span class="o">-=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">decrement</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="函数选择器">函数选择器</h4>
<p>当函数被调用时，<code>calldata</code> 的前四个字节要指定以确认调用哪个函数，被称为函数选择器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">addr</span><span class="p">.</span><span class="nb">call</span><span class="p">(</span><span class="nb">abi</span><span class="p">.</span><span class="nb">encodeWithSignature</span><span class="p">(</span><span class="s">&#34;transfer(address,uint256)&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="n">xSomeAddress</span><span class="p">,</span> <span class="mi">123</span><span class="p">))</span>
</span></span></code></pre></div><p>上述代码 <code>abi.encodeWithSignature() </code> 返回值的前四个字节就是函数选择器。我们如果在执行前预先计算函数选择器的话可以节约一些 <code>gas</code> 费。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">FunctionSelector</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">getSelector</span><span class="p">(</span><span class="kt">string</span> <span class="n">calldata</span> <span class="n">_func</span><span class="p">)</span> <span class="k">external</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bytes4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kt">bytes4</span><span class="p">(</span><span class="nb">keccak256</span><span class="p">(</span><span class="kt">bytes</span><span class="p">(</span><span class="n">_func</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="条件循环结构">条件/循环结构</h3>
<h4 id="条件">条件</h4>
<p>Solidity 使用 <code>if</code>、<code>else if</code>、<code>else</code> 关键字来实现条件逻辑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也可以使用简写形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="循环">循环</h4>
<p>Solidity 使用 <code>for</code>、<code>while</code>、<code>do while</code> 关键字来实现循环逻辑，但是因为后两者容易达到 <code>gas limit</code> 边界值，所以基本上不用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kt">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 业务逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kt">uint</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="合约">合约</h3>
<h4 id="构造器">构造器</h4>
<p>Solidity 的 <code>constructor</code> 可以在创建合约的时候执行，主要用来初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">constructor</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">name</span> <span class="o">=</span> <span class="n">_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如果合约之间存在继承关系，<code>constructor</code> 也会按照继承顺序。</p>
<h4 id="接口">接口</h4>
<p><code>Interface</code>，通过声明接口来进行合约交互，有以下要求：</p>
<ul>
<li>不能实现任何方法</li>
<li>可以继承其他接口</li>
<li>所有方法都必须声明为 <code>external</code></li>
<li>不能声明构造方法</li>
<li>不能声明状态变量</li>
</ul>
<p>接口用如下语法进行定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">Counter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="k">public</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">increment</span><span class="p">()</span> <span class="k">external</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">interface</span> <span class="nc">ICounter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">count</span><span class="p">()</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">increment</span><span class="p">()</span> <span class="k">external</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>调用则是通过</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">MyContract</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">incrementCounter</span><span class="p">(</span><span class="kt">address</span> <span class="n">_counter</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">ICounter</span><span class="p">(</span><span class="n">_counter</span><span class="p">).</span><span class="n">increment</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">getCount</span><span class="p">(</span><span class="kt">address</span> <span class="n">_counter</span><span class="p">)</span> <span class="k">external</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ICounter</span><span class="p">(</span><span class="n">_counter</span><span class="p">).</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="继承">继承</h4>
<p>Solidity 合约支持继承，且可以同时继承多个，使用 <code>is</code> 关键字。</p>
<p>函数可以进行重写，需要被继承的合约方法需要声明为 <code>virtual</code>，重写方法需要使用 <code>override</code> 关键字。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// 定义父合约 A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">contract</span> <span class="nc">A</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">virtual</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;A&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B 合约继承 A 合约并重写函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">contract</span> <span class="nc">B</span> <span class="k">is</span> <span class="n">A</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">virtual</span> <span class="k">override</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;B&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// D 合约继承 B、C 合约并重写函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">contract</span> <span class="nc">D</span> <span class="k">is</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">override</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>有几点需要注意的是，继承顺序会影响业务逻辑，<code>state</code> 状态变量是不可以被继承的。</p>
<p>如果子合约想调用父合约，除了直接调用外，还可以通过 <code>super</code> 关键字来调用，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">B</span> <span class="k">is</span> <span class="n">A</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="k">public</span> <span class="k">virtual</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 直接调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">A</span><span class="p">.</span><span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">bar</span><span class="p">()</span> <span class="k">public</span> <span class="k">virtual</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="c1">// 通过 super 关键字调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nb">super</span><span class="p">.</span><span class="n">bar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="合约创建">合约创建</h4>
<p>Solidity 中可以从另一个合约中使用 <code>new</code> 关键字来创建另一个合约</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">create</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_model</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Car</span><span class="p">(</span><span class="n">_owner</span><span class="p">,</span> <span class="n">_model</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">cars</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">car</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而 <code>solidity 0.8.0</code> 后支持 <code>create2</code> 特性创建合约</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">create2</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_model</span><span class="p">,</span> <span class="kt">bytes32</span> <span class="n">_salt</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="n">Car</span><span class="p">){</span><span class="n">salt</span><span class="o">:</span> <span class="n">_salt</span><span class="p">}(</span><span class="n">_owner</span><span class="p">,</span> <span class="n">_model</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">cars</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">car</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="导入合约外部库">导入合约/外部库</h4>
<p>复杂业务中，我们往往需要多个合约之间进行配合，这时候可以使用 <code>import</code> 关键字来导入合约，分为本地导入 <code>import &quot;./Foo.sol&quot;;</code> 与外部导入 <code>import &quot;https://github.com/owner/repo/blob/branch/path/to/Contract.sol&quot;;</code> 两种方式。</p>
<p>外部库和合约类似，但不能声明状态变量，也不能发送资产。如果库的所有方法都是 <code>internal</code> 的话会被嵌入合约，如果非 <code>internal</code>，需要提前部署库并且链接起来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">library</span> <span class="n">SafeMath</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">y</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">uint</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nb">require</span><span class="p">(</span><span class="n">z</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">,</span> <span class="s">&#34;uint overflow&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">TestSafeMath</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kn">using</span> <span class="n">SafeMath</span> <span class="k">for</span> <span class="kt">uint</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="事件">事件</h4>
<p>事件机制是合约中非常重要的一个设计。事件允许将信息记录到区块链上，DApp 等应用可以通过监听事件数据来实现业务逻辑，存储成本很低。以下是一个简单的日志抛出机制：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// 定义事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">event</span> <span class="nc">Log</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="nb">sender</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">AnotherLog</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 抛出事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">emit</span> <span class="n">Log</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">Log</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="s">&#34;Hello EVM!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">emit</span> <span class="n">AnotherLog</span><span class="p">();</span>
</span></span></code></pre></div><p>定义事件时可以传入 <code>indexed</code> 属性，但最多三个，加了后可以对这个属性的参数进行过滤，<code>var event = myContract.transfer({value: [&quot;99&quot;,&quot;100&quot;,&quot;101&quot;]});</code>。</p>
<h3 id="错误处理">错误处理</h3>
<p>链上错误处理也是合约编写的重要环节。Solidity 可以通过以下几种方式抛出错误。</p>
<p><code>require</code> 都是在执行前验证条件，不满足则抛出异常。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">testRequire</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_i</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">require</span><span class="p">(</span><span class="n">_i</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="s">&#34;Input must be greater than 10&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>revert</code> 用来标记错误与进行回滚。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">testRevert</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_i</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">_i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">revert</span><span class="p">(</span><span class="s">&#34;Input must be greater than 10&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>assert</code> 要求一定要满足条件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">testAssert</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">assert</span><span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>注意，在 Solidity 中，当出现错误时会回滚交易中发生的所有状态改变，包括所有的资产，账户，合约等。</p>
<p><code>try / catch</code> 也可以捕捉错误，但只能捕捉来自外部函数调用和合约创建的错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">Log</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">event</span> <span class="nc">LogBytes</span><span class="p">(</span><span class="kt">bytes</span> <span class="nb">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">tryCatchNewContract</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">try</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">(</span><span class="n">_owner</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">Foo</span> <span class="n">foo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">emit</span> <span class="n">Log</span><span class="p">(</span><span class="s">&#34;Foo created&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">catch</span> <span class="n">Error</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">reason</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">emit</span> <span class="n">Log</span><span class="p">(</span><span class="n">reason</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span> <span class="n">reason</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">emit</span> <span class="n">LogBytes</span><span class="p">(</span><span class="n">reason</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="payable-关键字"><code>payable</code> 关键字</h3>
<p>我们可以通过声明 <code>payable</code> 关键字设置方法可从合约中接收 <code>ether</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="c1">// 地址类型可以声明 payable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">address</span> <span class="k">payable</span> <span class="k">public</span> <span class="n">owner</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">constructor</span><span class="p">()</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">owner</span> <span class="o">=</span> <span class="k">payable</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 方法声明 payable 来接收 Ether
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nf">deposit</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{}</span>
</span></span></code></pre></div><h3 id="与-ether-交互">与 <code>Ether</code> 交互</h3>
<p>与 <code>Ether</code> 交互是智能合约的重要应用场景，主要分为发送和接收两部分，分别有不同的方法实现。</p>
<h4 id="发送">发送</h4>
<p>主要通过 <code>transfer</code>、<code>send</code> 与 <code>call</code> 方法实现，其中 <code>call</code> 优化了对重入攻击的防范，在实际应用场景中建议使用（但一般不用来调用其他函数）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">SendEther</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nf">sendViaCall</span><span class="p">(</span><span class="kt">address</span> <span class="k">payable</span> <span class="n">_to</span><span class="p">)</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  	<span class="p">(</span><span class="kt">bool</span> <span class="n">sent</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">memory</span> <span class="nb">data</span><span class="p">)</span> <span class="o">=</span> <span class="n">_to</span><span class="p">.</span><span class="nb">call</span><span class="p">{</span><span class="nb">value</span><span class="o">:</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">value</span><span class="p">}(</span><span class="s">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  	<span class="nb">require</span><span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="s">&#34;Failed to send Ether&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而如果需要调用另一个函数，则一般使用 <code>delegatecall</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">B</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="k">public</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">address</span> <span class="k">public</span> <span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="k">public</span> <span class="nb">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">setVars</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_num</span><span class="p">)</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">num</span> <span class="o">=</span> <span class="n">_num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nb">sender</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nb">value</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">A</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="k">public</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">address</span> <span class="k">public</span> <span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="k">public</span> <span class="nb">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">setVars</span><span class="p">(</span><span class="kt">address</span> <span class="n">_contract</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">_num</span><span class="p">)</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">,</span> <span class="kt">bytes</span> <span class="k">memory</span> <span class="nb">data</span><span class="p">)</span> <span class="o">=</span> <span class="n">_contract</span><span class="p">.</span><span class="nb">delegatecall</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="nb">abi</span><span class="p">.</span><span class="nb">encodeWithSignature</span><span class="p">(</span><span class="s">&#34;setVars(uint256)&#34;</span><span class="p">,</span> <span class="n">_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="接收">接收</h4>
<p>接收 <code>Ether</code> 主要用 <code>receive() external payable</code> 与 <code>fallback() external payable</code> 两种。</p>
<p>当一个不接受任何参数也不返回任何参数的函数、当 <code>Ether</code> 被发送至某个合约但 <code>receive()</code> 方法未实现或 <code>msg.data</code> 非空时，会调用 <code>fallback()</code> 方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">contract</span> <span class="nc">ReceiveEther</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 当 msg.data 为空时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">receive</span><span class="p">()</span> <span class="k">external</span> <span class="k">payable</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 当 msg.data 非空时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">fallback</span><span class="p">()</span> <span class="k">external</span> <span class="k">payable</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nf">getBalance</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="gas-费">Gas 费</h3>
<p>在 EVM 中执行交易需要耗费 gas 费，<code>gas spent</code> 表示需要多少 gas 量，<code>gas price</code> 为 gas 的单位价格，<code>Ether</code> 和 <code>Wei</code> 是价格单位，1 ether == 1e18 wei。</p>
<p>合约会对 Gas 进行限制，<code>gas limit</code> 由发起交易的用户设置，最多花多少 gas，<code>block gas limit</code>，由区块链网络决定，这个区块中最多允许多少 gas。</p>
<p>我们在合约开发中要尤其考虑尽量节约 gas 费，有以下几个常用技巧：</p>
<ol>
<li>使用 <code>calldata</code> 来替换 <code>memory</code></li>
<li>将状态变量载入内存</li>
<li>使用 <code>i++</code> 而不是 <code>++i</code></li>
<li>缓存数组元素</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nf">sumIfEvenAndLessThan99</span><span class="p">(</span><span class="kt">uint</span><span class="p">[]</span> <span class="n">calldata</span> <span class="n">nums</span><span class="p">)</span> <span class="k">external</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="n">_total</span> <span class="o">=</span> <span class="n">total</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint</span> <span class="n">len</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">uint</span> <span class="n">num</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">99</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">_total</span> <span class="o">+=</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">total</span> <span class="o">=</span> <span class="n">_total</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是我们系列第一篇，Solidity 基础知识，后续文章会对其常见应用和实用编码技巧进行学习总结，欢迎大家持续关注。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://solidity-by-example.org">Solidity by Example</a></li>
<li><a href="http://gasolin.idv.tw/learndapp/">Ethereum 區塊鏈！智能合約(Smart Contract)與分散式網頁應用(dApp)入門</a></li>
<li><a href="https://www.pseudoyu.com/blockchain-guide/">区块链入门指南</a></li>
<li><a href="https://github.com/pseudoyu/uright">Uright - 区块链音乐版权管理ÐApp</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</title><link>https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/</link><pubDate>Tue, 24 May 2022 21:47:47 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/</guid><description>《后来的我们 - 五月天》 前言 之前写了一篇《免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）》，讲述了一下我使用 Serverless 和一些开源</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_intro.png" alt="cusdis_intro"></p>
<p>之前写了一篇《<a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a>》，讲述了一下我使用 Serverless 和一些开源项目搭建的博客系统，也开了个系列来记录搭建过程。</p>
<p>本篇是关于博客评论系统的解决方案，我最早使用的博客评论系统是<del>万恶的</del> <a href="https://disqus.com">Disqus</a>，一个笨重且会收集用户隐私的知名评论系统，因为加载比较慢，且免费版本经常会附带一些广告，实在难以忍受，于是换成了另一个基于 GitHub issues 的评论系统 <a href="https://utteranc.es">utterances</a>，它会为每篇文章生成一个 issue，将，用户通过授权 GitHub 登录来对 issue 发表评论。这种方式的好处是只需要授权一个 <a href="https://github.com/utterances-bot">utterances-bot</a> 来进行管理，无需自己部署服务，维护数据库等。但是用了一段时间后，觉得有几点不足：</p>
<ol>
<li>基于 GitHub API 进行评论管理，如之后接口变动或对这类利用 issue 进行评论的方式进行限制，会不太稳定</li>
<li>读者必须要授权 GitHub 登录，非技术人员或使用移动端阅读的读者使用起来很不方便</li>
<li>会将 GitHub 仓库弄得较乱，也不方便后续迁移到其他系统</li>
</ol>
<p>经过一番调研 <a href="https://lutaonan.com">Randy</a> 的 <a href="https://cusdis.com/">Cusdis</a> 很合我的心意。Cusdis 是一个注重数据隐私的开源的评论系统，十分轻量，经过 gzipped 后大约只有 5kb，从名字来看也知道开发者也是难以忍受 Disqus，自己做了一个替代版，因此它也是支持 Disqus 历史数据导入的，很贴心。</p>
<p>虽然这是一个开发早期的项目，但是已经提供了电子邮件通知以及通过 Webhook 联动 Telegram 等方式进行评论提醒，对使用者来说很方便进行管理。Cusdis 提供了免费托管服务与自行部署两种方式，如果不想折腾可以直接用作者提供的服务。自行部署则需要服务器与一个 Postgre SQL 实例，我们主要示范一下自行部署方式。</p>
<p>因为在上一篇 《<a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a>》 中我使用的是 <a href="http://vercel.com/">Vercel</a> 和 <a href="https://www.heroku.com/">Heroku</a> 进行搭建的，作为一个爱折腾的人，这个评论系统我们就用 <a href="https://railway.app/">Railway</a> 来搭建部署。</p>
<p>Railway 和 Vercel 类似，也是一个 PaaS 平台，能够支持多种语言项目的部署。对于个人项目来说，它每月提供的 5 美元免费额度非常够用，实测了一下，把之前的 <a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">umami 网站数据统计系统</a> 连同 Postgre SQL 数据库实例部署在 Railway 平台，大约一个月 0.7 美元，对于个人使用来说完全足够。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/railway_price.png" alt="railway_price"></p>
<p>比起 Vercel，它同时支持部署数据库实例，可以将数据库与实例一起部署在单个项目中，减少搭建维护成本。下文会对具体搭建部署流程做个记录，因为官方支持 Railway 一键部署方式，整个搭建流程很顺畅。</p>
<h2 id="搭建部署说明">搭建部署说明</h2>
<h3 id="使用-railway-一键部署服务与数据库实例">使用 Railway 一键部署服务与数据库实例</h3>
<p>首先注册一个 Railway 账号，可以用我的<a href="https://railway.app?referralCode=J0F5LQ">邀请链接</a>。注册登录完成后，点击右上角 New Project 新建项目。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/railway_dashboard.png" alt="railway_dashboard"></p>
<p>然后输入 Cusdis 进行搜索，点击出现的项目即可开始部署。前几步也可以通过点击 <a href="https://github.com/djyde/cusdis">Cusdis 项目仓库</a> 中的 <code>Deploy on Railway</code> 按钮进行一键部署。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/new_cusids_starter.png" alt="new_cusids_starter"></p>
<p>开始部署前，需要手动填入三个环境变量：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/deploy_cusdis_on_railway.png" alt="deploy_cusdis_on_railway"></p>
<ol>
<li>USERNAME: 用来登录的账户</li>
<li>PASSWORD: 用来登录的密码</li>
<li>JWT_SECRET: 一个随机字符串</li>
</ol>
<p>其他一些环境变量已经预先设置默认值，请不要自行修改。</p>
<ol>
<li>NEXTAUTH_URL: <code>${{ RAILWAY_STATIC_URL }}</code></li>
<li>DB_TYPE: <code>pgsql</code></li>
<li>DB_URL: <code>${{ DATABASE_URL }}</code></li>
<li>PORT: <code>3000</code></li>
</ol>
<p>点击部署后，等待完成即可，会自动部署服务并初始化数据库。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_deploy_done.jpeg" alt="cusdis_deploy_done"></p>
<h3 id="配置-cusdis-脚本至个人博客">配置 Cusdis 脚本至个人博客</h3>
<p>部署完成后，点击 cusdis 服务生成的链接，点击访问服务 Dashboard。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_login.png" alt="cusdis_login"></p>
<p>此处输入部署前配置的用户名与密码，点击登录。登录完成后，点击 Dashboard，进入项目配置页面。</p>
<p>初次登录会弹窗提示需要配置第一个网站，输入网站名称即可完成添加。后续当我们需要添加网站时，点击侧边栏 New Website，填写网站名称即可完成添加。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/add_new_website.png" alt="add_new_website"></p>
<p>因为我已经配置了自己的网站，所以界面会有之前的评论记录。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_dashboard.png" alt="cusdis_dashboard"></p>
<p>下面我们点击上方 Embed Code，复制弹窗中的代码。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_embed_code.jpeg" alt="cusdis_embed_code"></p>
<p>这部份代码需要根据你所用的博客网站类型不同进行部分修改，具体可参考<a href="https://cusdis.com/doc#/">官方文档</a> 的 Integration 模块进行配置。</p>
<p>我所用的是 <a href="https://gohugo.io">Hugo</a>，配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cusdis_thread&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="na">data-host</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">data-app-id</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">data-page-id</span><span class="o">=</span><span class="s">&#34;{{ .File.UniqueID }}&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">data-page-url</span><span class="o">=</span><span class="s">&#34;{{ .Permalink }}&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">data-page-title</span><span class="o">=</span><span class="s">&#34;{{ .Title }}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cusdis.com/js/widget/lang/zh-cn.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中的 <code>data-host</code>，<code>data-app-id</code> 等都需要以刚复制出的 Embed Code 内容为准。其中 <code>&lt;script defer src=&quot;https://cusdis.com/js/widget/lang/zh-cn.js&quot;&gt;&lt;/script&gt;</code> 主要实现了汉化，不同语言支持详见<a href="https://cusdis.com/doc#/advanced/i18n">文档 i18n 模块</a>。</p>
<p>修改后，将其添加到博客的相应位置（一般在最下方），配置部署后，即可看到评论框，呈现效果如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_display.png" alt="cusdis_display"></p>
<h3 id="配置自定义域名">配置自定义域名</h3>
<p>Railway 部署自动生成的域名比较长，且有一些字符，不方便记忆。我们可以在 Railway 中为项目配置自定义域名。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/railway_custom_domain.jpeg" alt="railway_custom_domain"></p>
<p>填入想要配置的域名/二级域名后，根据官方提示添加 DNS 解析。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/railway_domain_dns.jpeg" alt="railway_domain_dns"></p>
<p>例如，我使用的是 <a href="https://www.cloudflare.com">Cloudflare</a> 托管的域名，需要先添加一下域名 CNAME 解析。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_domain_dns.jpeg" alt="cloudflare_domain_dns"></p>
<p>至此，我们的部署已经完成，可以通过域名访问管理后台，进行评论审核管理等。</p>
<h3 id="更新项目">更新项目</h3>
<p>如前文所述，Cusdis 还是一个正在开发成长的项目，我们想第一时间更新作者发布的新功能。Railway 提供了十分便捷的上游分支管理功能，可以设置项目的父项目，点击即可拉取最新更新，很方便。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/railway_update_project.png" alt="railway_update_project"></p>
<h2 id="总结">总结</h2>
<p>以上就是我们为网站添加 Cusdis 评论系统的全流程，配置完成后无需后续维护，可以便捷地通过看板来进行网站管理与评论审核，且数据存储在 Postgre SQL 数据库实例中，方便导出备份与迁移。这是我的博客搭建部署系列教程之一，请持续关注，希望能对大家有所参考。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://cusdis.com">Cusdis 项目官网</a></li>
<li><a href="https://railway.app">Railway 官方网站</a></li>
<li><a href="https://reorx.com/blog/deploy-umami-for-personal-website/">搭建 umami 收集个人网站统计数据</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>通过 mover.io 服务无缝迁移云端网盘文件至 OneDrive</title><link>https://www.pseudoyu.com/en/2022/05/22/migrate_your_files_to_onedrive_using_mover_io/</link><pubDate>Sun, 22 May 2022 13:06:12 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/22/migrate_your_files_to_onedrive_using_mover_io/</guid><description>《后来的我们 - 五月天》 前言 最近学校发了邮件说要把邮箱服务从 Google 转移到 Microsoft，而且原先的 Google Drive 无限流量也将取消，转移为 5T 的 OneDri</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>最近学校发了邮件说要把邮箱服务从 Google 转移到 Microsoft，而且原先的 Google Drive 无限流量也将取消，转移为 5T 的 OneDrive。我原先一直用着 Google Drive 的文件服务，在我的多个设备之间同步和备份文件，到现在也差不多占了 300 多 GB 的空间。因为 Google Drive 在内地需要代理，下载速度很慢，因此，我采用了官方推荐的 <a href="https://mover.io">mover.io</a> 服务来进行云端迁移，无需下载到本地转存，记录一下迁移过程。</p>
<h2 id="moverio-服务">mover.io 服务</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_io.png" alt="mover_io"></p>
<p>mover.io 服务是微软提供的一个网盘迁移服务，支持将很多云服务商提供的网盘文件迁移到 Microsoft OneDrive 上，比如 Google Drive、Dropbox、Box 等。它为机构、学校以及个人都提供了迁移服务。</p>
<p>对于个人用户，我们使用 Transfer Wizard 来进行迁移。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_transfer_wizard.png" alt="mover_transfer_wizard"></p>
<h2 id="迁移流程">迁移流程</h2>
<h3 id="注册登录-moverio-账户">注册/登录 mover.io 账户</h3>
<p>首先，我们需要注册一个 mover.io 账户，并登录，可以使用 Microsoft 授权登录或使用原来的 mover.io 账户。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_io_login.png" alt="mover_io_login"></p>
<h3 id="授权迁移数据源">授权迁移数据源</h3>
<p>登录成功后，界面清晰地给出了操作说明，按照步骤操作即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_transfer_wizard_setting.png" alt="mover_transfer_wizard_setting"></p>
<h4 id="选择迁移来源">选择迁移来源</h4>
<p>点击 Authorize New Connector 按钮，选择 Google Drive (Single User)，选择需要迁移文件所在的 Google 账户并授权。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_source_google.png" alt="mover_source_google"></p>
<p>授权完成后，就会出现所有需要迁移的文件列表。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_source_done.png" alt="mover_source_done"></p>
<h4 id="选择迁移目标">选择迁移目标</h4>
<p>点击 Authorize New Connector 按钮，选择 OneDrive for Business (Single User)，选择该数据源并授权。目前目标数据源只支持微软家族的 OneDrive 和 SharePoint 等。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_choose_dest.png" alt="mover_choose_dest"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_dest_onedrive.png" alt="mover_dest_onedrive"></p>
<p>授权完成后，就会出现迁移目标网盘的文件列表。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_dest_onedrive_done.png" alt="mover_dest_onedrive_done"></p>
<h3 id="迁移数据">迁移数据</h3>
<p>来源数据源与目标数据源都迁移完成后，即可选择 Start Copy 开始迁移流程。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_start_copy.png" alt="mover_start_copy"></p>
<h3 id="等待迁移完成">等待迁移完成</h3>
<p>完成上述操作后，迁移流程已经开始，仅需等待完成即可，可以通过登录后的 Migration Manager 进行进度查看。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_wait_migration_done.png" alt="mover_wait_migration_done"></p>
<p>因为源文件大小不同，迁移时间每个人各不相同，经测试，迁移速度参照如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mover_migration_speed.png" alt="mover_migration_speed"></p>
<h2 id="总结">总结</h2>
<p>以上就是我用过 mover.io 服务将所有 Google Drive 文件迁移到 OneDrive 上的过程，希望对大家有所帮助。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://mover.io/">mover.io 官网</a></li>
<li><a href="https://its.hku.hk/kb/ways-on-reducing-storage-on-google-drive-google-photos-and-gmail/#b-transfer-google-drive">Transfer Google Drive
(HKU Connect Google Drive &gt; HKU Microsoft OneDrive)</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</title><link>https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/</link><pubDate>Sat, 21 May 2022 16:56:47 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/</guid><description>《后来的我们 - 五月天》 前言 之前写了一篇《免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）》，讲述了一下我使用 Serverless 和一些开源</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_dashboard_white.png" alt="umami_dashboard_white"></p>
<p>之前写了一篇《<a href="https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</a>》，讲述了一下我使用 Serverless 和一些开源项目搭建的博客系统，也开了个系列来记录搭建过程。</p>
<p>前几天看到 <a href="https://reorx.com">Reorx</a> 写的一篇 《<a href="https://reorx.com/blog/deploy-umami-for-personal-website/">搭建 umami 收集个人网站统计数据</a>》，他介绍了 <a href="https://umami.is">umami</a> 这个项目，并使用 <a href="https://railway.app">Railway</a> 进行无服务搭建部署。</p>
<p>只不过我因为之前部署 <a href="https://cusdis.com">Cusdis</a> 的时候使用的是 <a href="https://www.heroku.com/">Heroku</a> 提供的免费 Postgres 数据库服务并用 <a href="http://vercel.com/">Vercel</a> 进行部署，于是在部署 umami 的时候还是想沿用原来的平台，减少搭建和维护成本。</p>
<p>下文会对具体搭建部署流程做个记录，因为官方支持一键部署方式，整个搭建流程很顺畅。</p>
<h2 id="搭建部署说明">搭建部署说明</h2>
<h3 id="使用-heroku-创建-postgres-数据库">使用 Heroku 创建 Postgres 数据库</h3>
<h4 id="创建-postgres-数据库">创建 Postgres 数据库</h4>
<p>首先注册一个 Heroku 账号，登录成功后，点击右上角按钮创建一个新的应用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cretae_app_in_heroku_1.png" alt="cretae_app_in_heroku_1"></p>
<p>输入实例名称，地区可以自行选择，我选择的是 United States，点击创建。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cretae_app_in_heroku_2.png" alt="cretae_app_in_heroku_2"></p>
<p>创建完成后，在 Resources Tab 的 Adds-on 中搜索选择 Postgres 数据库。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/add_heroku_postgres.png" alt="add_heroku_postgres"></p>
<p>选择 Free Plan 即可，Heroku 中的 Postgres 数据库是免费的，可以持续使用，免去了搭建维护成本。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/heroku_postgres_plan.png" alt="heroku_postgres_plan"></p>
<p>创建完成后，在 Setting 中查看 <code>DATABASE_URL</code>，后面部署要用到。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/postgres_data_url.jpeg" alt="postgres_data_url"></p>
<p>点击新增的 Postgres add-on 跳转进行设置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/postgres_addon_details.png" alt="postgres_addon_details"></p>
<p>进入后，选择 Setting 页面的 View Credentials，并且记录配置参数。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/heroku_credentials.png" alt="heroku_credentials"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/postgres_settings.jpeg" alt="postgres_settings"></p>
<h4 id="初始化-postgres-数据库">初始化 Postgres 数据库</h4>
<p>因为需要初始化数据库，我使用的是 DataGrip 数据库管理工具进行连接，比较方便，也可以通过 Heroku CLI 进行连接和配置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/postgres_config.jpeg" alt="postgres_config"></p>
<p>umami 需要通过官方提供的 <a href="https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql">umami/sql/schema.postgresql.sql</a> 脚本进行初始化。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/postgres_init_script.png" alt="postgres_init_script"></p>
<p>执行完成后，数据库有了五张表与初始化数据，可以进行后续部署工作。</p>
<h3 id="使用-vercel-一键部署-umami-服务">使用 Vercel 一键部署 umami 服务</h3>
<h4 id="部署-umami-服务">部署 umami 服务</h4>
<p>创建好数据库实例之后，可以通过 Vercel 一键部署 umami 服务了。</p>
<p>访问 <a href="https://umami.is">umami 官方文档</a> 的 <a href="https://umami.is/docs/running-on-vercel">Running on Vercel</a> 模块，有操作说明与一键部署脚本。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/running_on_vercel.png" alt="running_on_vercel"></p>
<p>点击一键部署按钮后，会跳转至 Vercel 的一键部署页面，创建 umami 的 Github 仓库。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vercel_create_umami_repo.png" alt="vercel_create_umami_repo"></p>
<p>接下来需要填入之前在部署 Heroku Postgres 实例时记录到 <code>DATABASE_URL</code> 参数地址，并且需要填写一个自定义字符串 <code>HASH_SLAT</code>。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vercel_config_umami.png" alt="vercel_config_umami"></p>
<p>点击 Deploy 进行部署，等待几分钟后部署完成即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vercel_deploy.png" alt="vercel_deploy"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vecel_deploy_done.png" alt="vecel_deploy_done"></p>
<h4 id="访问-umami-服务">访问 umami 服务</h4>
<p>部署完成后，点击 Dashboard 或分配的 Vercel 域名访问服务，可以看到 umami 的登录界面。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_login.png" alt="umami_login"></p>
<p>初次登录输入默认用户名 <code>admin</code> 与默认密码 <code>umami</code>，登录成功后，会跳转至 umami 的管理页面，登录后可以点击右上角头像自行修改密码。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_change_password.png" alt="umami_change_password"></p>
<h4 id="配置个人网站至-umami-服务">配置个人网站至 umami 服务</h4>
<p>完成基础帐号配置后，点击侧边栏网站 Tab，点击添加网站。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_add_website_1.png" alt="umami_add_website_1"></p>
<p>填写网站基本信息，如果勾选共享链接可以生成一个可公开访问的网址，我把它添加了一个书签放在 iPad 主屏幕上，作为一个数据看板也很不错。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_add_website_2.png" alt="umami_add_website_2"></p>
<h4 id="配置-umami-脚本至个人博客网站">配置 umami 脚本至个人博客网站</h4>
<p>网站创建完成，获取 umami 脚本。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/get_umami_script.jpeg" alt="get_umami_script"></p>
<p>获取后，在个人网站添加 umami 脚本。我使用的是静态博客 Hugo，在主题中的 <code>&lt;head&gt;</code> 标签内添加。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/set_umami_script.jpeg" alt="set_umami_script"></p>
<p>配置完成部署，即可开始追踪网站数据。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_dashboard_white.png" alt="umami_dashboard_white"></p>
<h4 id="配置自定义脚本名称">配置自定义脚本名称</h4>
<p>使用官方的 <code>umami.js</code> 脚本名称，可能会被一些过滤规则拦截，因此我们可以自定义脚本名称，实现更准确地网站数据追踪。</p>
<p>官方也提供了便捷的修改方式，可以在 Vercel 中已经部署的 umami 服务中增加 <code>TRACKER_SCRIPT_NAME</code> 环境变量，配置为自定义名称。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/umami_script_environment_varible.png" alt="umami_script_environment_varible"></p>
<p>配置完成后重新部署，再在个人网站脚本中更改脚本名称即可。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/change_umami_script.jpeg" alt="change_umami_script"></p>
<h4 id="配置自定义域名">配置自定义域名</h4>
<p>如果不想要使用 Vercel 提供的 <code>vercel.app</code> 域名，可以在 Vercel 中添加自定义域名，按照 Vercel 官方指引对域名提供商进行 <code>CANME</code> 等配置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/set_custom_domain.png" alt="set_custom_domain"></p>
<p>例如，我使用的是 <a href="https://www.cloudflare.com">Cloudflare</a> 托管的域名，需要先添加一下域名解析。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_canme_config.png" alt="cloudflare_canme_config"></p>
<p>根据官方说明，Cloudflare 还需要添加一个页面规则，配置完成后即可完成自定义域名配置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_page_rule.png" alt="cloudflare_page_rule"></p>
<h2 id="总结">总结</h2>
<p>以上就是我们为网站添加 umami 网站统计服务的全流程，配置完成后无需后续维护，可以便捷地通过看板来进行网站数据追踪。这是我的博客搭建部署系列教程之一，请持续关注，希望能对大家有所参考。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://umami.is">umami</a></li>
<li><a href="https://reorx.com/blog/deploy-umami-for-personal-website/">搭建 umami 收集个人网站统计数据</a></li>
<li><a href="http://vercel.com">Vercel 官方网站</a></li>
<li><a href="https://www.heroku.com">Heroku 官方网站</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>[译] 用 Go 编写一个简单的内存键值数据库</title><link>https://www.pseudoyu.com/en/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</link><pubDate>Sat, 21 May 2022 14:53:51 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</guid><description>《后来的我们 - 五月天》 前言 从 Postgres 到 Redis，再到 Prometheus，我们都使用并从事过各种数据库的开发。我花了很多时间来阅读其中一些数据库</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>从 Postgres 到 Redis，再到 Prometheus，我们都使用并从事过各种数据库的开发。我花了很多时间来阅读其中一些数据库的源代码，对于那些像我一样好奇的少数人来说，他们有兴趣学习如何编写一个数据库。本书旨在记录这一过程。</p>
<p><a href="https://github.com/arriqaaq/flashdb">GitHub - arriqaaq/flashdb: FlashDB is an embeddable, in-memory key/value database in Go (with Redis like commands)</a></p>
<h2 id="内存数据库">内存数据库</h2>
<p>与传统数据库的数据主要保存在机械硬盘或者固态硬盘不同的是, 内存数据库主要将数据保存在内存中。 内存数据库主要是通过消除对磁盘的访问来实现最小的响应时间，两者的不同主要体现在内存数据库是将数据保存在主存或者 RAM 中。然而, 传统的数据库则是通过驱动磁盘来获取数据。由于所有的数据都存储与管理在主存中，内存数据库相比传统的数据库更不稳定，因为当计算机断电或 RAM 崩溃时，数据将会丢失。内存数据库可以通过将每个操作存储在日志中或采取快照的方式在磁盘上持久化数据。</p>
<h2 id="目标">目标</h2>
<p>我们的目标是用 Go 编写一个简单、快速、嵌入式和可持久化的键/值数据库，并且实现以下功能</p>
<ul>
<li>支持类似 Redis 的数据结构：<code>string</code>,  <code>hash</code>, <code>set</code>, <code>zset</code></li>
<li>具有低延时和高吞吐量</li>
<li>支持事务，ACID 语义</li>
<li><a href="https://github.com/arriqaaq/flashdb#append-only-file">仅可写入的持久化文件</a>格式</li>
<li>可以通过使用 TTL 来处理<a href="https://github.com/arriqaaq/flashdb#data-expiration">数据过期</a></li>
</ul>
<h2 id="开始">开始</h2>
<p>我们的目的是建立一个非常简单的 KV（键/值）存储，以便让每个人都能轻松理解和实现。在 Go 中，有相当多的嵌入式键/值存储可用，以下是一些例子：</p>
<ul>
<li><a href="https://github.com/dgraph-io/badger">BadgerDB</a> - BadgerDB 是一个完全用 Go 编写的嵌入式、可持久化、简单而快速的键值（KV）数据库。它旨在成为 RocksDB 等非基于 Go 实现的键值存储的高性能替代品</li>
<li><a href="https://github.com/boltdb/bolt">BoltDB</a> - BoltDB 是一个基于 B+ 树的嵌入式 Go 键/值数据库</li>
<li><a href="https://github.com/tidwall/buntdb">BuntDB</a> - BuntDB 是一个应用于 Go 的嵌入式内存键/值数据库，具有自定义索引和地理空间支持</li>
<li><a href="https://github.com/hashicorp/go-memdb">go-memdb</a> - 基于不可变基数树的 Golang 内存数据库</li>
<li><a href="https://github.com/xujiajun/nutsdb">nutsdb</a> - 一个基于磁盘的键值存储</li>
</ul>
<p>读起来比做起来容易，我们可以通过阅读庞大的代码库来了解其内部结构，但这对很多人来说是开始的障碍。<a href="https://github.com/xujiajun/nutsdb">NutsDB</a> 是我在 2-3 年前读到的第一批简单易懂的代码之一。</p>
<p>因此，FlashDB 是由易于理解的组合库组成的。我们的想法是为任何想学习关于如何编写一个简单的 ACID 数据库的新手提供桥梁。</p>
<h2 id="架构">架构</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/flashdb_architecture.png" alt="flashdb_architecture"></p>
<p>FlashDB 的架构很简单并且支持各种 Redis 命令。Redis 本质上不是一个普通的键值存储，而是一个数据结构服务器，支持不同种类的值。事实上 Redis 使用以下数据结构实现了各种类型。</p>
<h3 id="字符串">字符串</h3>
<p>Redis 字符串类型是你能与 Redis 键关联的最简单的值类型。由于 Redis 键是字符串，当我们把字符串类型也作为一个值时，我们是把一个字符串映射到另一个字符串。这是用<a href="https://github.com/arriqaaq/art">可变基数树</a>（ART）实现的，这样可以很容易进行扫描。</p>
<ul>
<li><a href="https://github.com/arriqaaq/skiplist">String</a></li>
</ul>
<h3 id="哈希">哈希</h3>
<p>用哈希表示对象很方便，而实际上哈希中可放入的字段数量并没有实际限制（除了可用的内存），所以你可以在应用程序中以许多不同的方式使用哈希。这是用一个非常简单的 HashMap 数据结构实现的。</p>
<ul>
<li><a href="https://github.com/arriqaaq/hash">Hash</a></li>
</ul>
<h3 id="集合">集合</h3>
<p>Redis 集合是无序的字符串集合。我们可以对集合进行一些操作，比如检测某个元素是否已经存在，查找多个集合之间的交集、并集或差集等。这也是用一个简单的 HashMap 数据结构实现的。</p>
<ul>
<li><a href="https://github.com/arriqaaq/set">Set</a></li>
</ul>
<h3 id="有序集合">有序集合</h3>
<p>有序集合是一种数据类型，类似于集合与哈希的混合体。和集合一样，有序集合也是由唯一的、不重复的字符串元素组成的。所以从某种意义上说，有序集合也是一个集合。</p>
<p>虽然集合内的元素并不是有序的，但有序集合中的每个元素都与一个浮点值相关，称为分数（该类型类似于哈希，因为每个元素都被映射到一个值）。</p>
<p>这是对用于字符串的跳表结构稍加修改实现的。</p>
<ul>
<li><a href="https://github.com/arriqaaq/zset">ZSet</a></li>
</ul>
<h2 id="持久化">持久化</h2>
<p>虽然已经有了很多持久化机制，我选择了一个简单的 append-only 日志设计方式，因为它比较容易实现和理解。<strong>AOF</strong>(仅可写入的文件)记录了服务器收到的每一个写操作，这些操作将在服务器启动时再重放，重建原始数据集。命令的记录格式与 API 协议本身相同，以只写入的方式进行。当日志过大时，FlashDB 能够在后台分片处理日志。这是基于 <a href="https://github.com/tidwall/wal">wal</a> 实现的。</p>
<ul>
<li><a href="https://github.com/arriqaaq/aol">Append Only Log</a></li>
</ul>
<h2 id="总结">总结</h2>
<p>综上，<a href="https://github.com/arriqaaq/flashdb">FlashDB</a> 仅依靠上述五个简单的库就完成了，具有事务与 ACID 支持。它很易于理解，但我希望这对任何有兴趣学习如何编写数据库的人来说是一个有用的教程。</p>
<p><a href="https://github.com/arriqaaq/flashdb">GitHub - arriqaaq/flashdb: FlashDB is an embeddable, in-memory key/value database in Go (with Redis like commands)</a></p>
<h2 id="讲座">讲座</h2>
<p>我最近在 Golang meetup 上分享了这个项目，这是幻灯片的内容。</p>
<p><a href="https://www.canva.com/design/DAE8sGRyC2o/ZCuCaezQ6dYA0Oq24QxjUQ/view?utm_content=DAE8sGRyC2o&amp;utm_campaign=designshare&amp;utm_medium=link&amp;utm_source=publishsharelink">https://www.canva.com/design/DAE8sGRyC2o/ZCuCaezQ6dYA0Oq24QxjUQ/view?utm_content=DAE8sGRyC2o&amp;utm_campaign=designshare&amp;utm_medium=link&amp;utm_source=publishsharelink</a></p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://aly.arriqaaq.com/building-a-database-in-go">原文地址</a></li>
<li><a href="https://github.com/gocn/translator/blob/master/2022/w17_Writing_a_simple_in-memory_key-value_Database_in_Go.md">本文永久链接</a></li>
<li><a href="https://github.com/gocn/translator">GoCN &lt;每周译 Go&gt;</a></li>
<li><a href="https://github.com/pseudoyu">译者：张宇</a></li>
<li><a href="https://github.com/xkkhy">校对：小超人</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>个人工具箱（2022 年 5 月）</title><link>https://www.pseudoyu.com/en/2022/05/08/personal_tools_in_2022_may/</link><pubDate>Sun, 08 May 2022 15:47:16 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/08/personal_tools_in_2022_may/</guid><description>《后来的我们 - 五月天》 前言 自己一直是个工具控，也一直信奉着“工欲善其事，必先利其器”的理念，总是不断折腾和优化自己的硬件与软件，针对自己的一</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>《后来的我们 - 五月天》</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>自己一直是个工具控，也一直信奉着“工欲善其事，必先利其器”的理念，总是不断折腾和优化自己的硬件与软件，针对自己的一个特定需求会试图找到最优解，现在也慢慢找到了最适合自己使用习惯的解决方案。因为工作、学习和个人兴趣，设备经过很多次迭代，在这个时间节点作一下记录，后续也会不断更新，希望能够对其他人有所参考。</p>
<p><em><strong>本文仅为 2022 年 5 月所整理的软硬件工具箱，最新版本请访问我在 GitHub 上维护的个人工具箱项目 『<a href="https://github.com/pseudoyu/yu-tools">GitHub - pseudoyu/yu-tools</a>』。</strong></em></p>
<blockquote>
<p>注：下文所提及的所有软件服务均为本人购买/订阅或学生资格所享有的教育授权，请支持正版！</p>
</blockquote>
<h2 id="主要设备">主要设备</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_desktop_setup_in_2022_may.jpeg" alt="my_desktop_setup_in_2022_may"></p>
<h3 id="-电脑及配件">💻 电脑及配件</h3>
<ul>
<li><strong>Apple Mac Studio (2022)，M1 Max，64GB RAM，1T SSD</strong>，家里主力电脑，疫情在家很提升工作学习幸福感</li>
<li><strong>Apple MacBook Pro (16-inch，2019) 银色，2.4 GHz 八核 Intel Core i9，32GB RAM，2T SSD</strong>，高频使用，基本走哪都会背着，在公司外接显示屏使用</li>
<li><strong>明基（BenQ）EW3270U 4K 显示器</strong>，配合 Mac Studio 使用，在这个价位的 4K 里已经很不错了</li>
<li><strong>明基（BenQ）ScreenBar Halo 屏幕挂灯</strong>，有了这个后基本上家里没开过主光源了，可以无线控制调节，很有氛围感</li>
<li><strong>HHKB Professional Hybrid Type-S 双模静音版键盘，白色有刻</strong>，目前最爱的键盘</li>
<li><strong>RealForce PFU 联名版 87 键，黑色</strong>，备用键盘，也是静电容经典了，但是没有很习惯，可能后面玩游戏会用，毕竟 HHKB 键位特殊</li>
<li><del><strong>MM-Studio Class65 V2 客制化双模机械键盘，复古白</strong>（原本想通过这把入坑客制化，但是没心情折腾了，等了三个月发团，刚到手就原价转卖了）</del></li>
<li><strong>Apple Magic Keyboard 键盘，白色</strong>，开始用 HHKB 后就基本上不用了</li>
<li><strong>Logitech MX Master 3 鼠标，灰色</strong>，主力鼠标，手感和侧键功能都很棒，配合剪视频也很棒</li>
<li><strong>Apple Magic Mouse 2 鼠标，白色</strong>，手感不太行，基本上不用了</li>
<li><strong>Apple Magic Trackpad 触控板，白色</strong>，在家配合着鼠标使用，体验感不错</li>
<li><strong>闪极 100W Pro 氮化镓 GaN 充电器，黄色</strong>，外出携带，终于摆脱了苹果 96w 的大块头充电器</li>
</ul>
<h3 id="-手机及平板">📱 手机及平板</h3>
<ul>
<li><strong>Apple iPhone 13 蓝色，256GB</strong>，主力手机，配合苹果全家桶体验很好，不过手机基本上戒了，主要就用作沟通和看看资讯，应该很久都不会换了</li>
<li><strong>OnePlus 7 Pro，6.67&quot;，Snapdragon 855，256GB</strong>，之前在香港的时候刷机 Root 了，配合 Google 全家桶很适合留学用，而且拍照风格很自然，不过现在也很少用了</li>
<li><strong>Apple iPad Air (第三代)，256GB</strong>，主要用来作拓展屏或者放视频了，很少作什么生产力工具使用，大部分电脑能做的都不会放到 iPad 上做</li>
</ul>
<h3 id="-相机及配件">🎥 相机及配件</h3>
<ul>
<li><strong>Sony A7M3 微单相机，黑色</strong>，大学攒了好久才买的第一台微单，摄影和视频都很全能，跟着我好多年了，到现在依然很够用</li>
<li><strong>Sony 24-105mm F4 相机镜头</strong>，跟相机一起买的，出门基本上这一只大师镜头就足够应对绝大多数场景，虽然光圈只有 F4，但是成像品质真的高</li>
<li><strong>Sony 55mm F1.8 蔡司相机镜头</strong>，收到的礼物，也是最喜欢的定焦镜头，主要用来拍人像</li>
<li><strong>罗德 Wireless Go 无线麦克风</strong>，之前录视频用得比较多，便携易用，声音也很不错，后面会考虑多录一些视频</li>
</ul>
<h3 id="-音箱及耳机">🎧 音箱及耳机</h3>
<ul>
<li><strong>Apple Airpods Pro 降噪耳机</strong>，原本不太习惯入耳式，后来体验了降噪后就离不开了</li>
<li><strong>Apple HomePod mini 音箱</strong>，家里电脑主要输出设备，家里 Mac Studio 和显示器自带音质都不太行</li>
<li><strong>Divoom Ditoo 像素复古音箱</strong>，收到的礼物，现在放在桌面作装饰，基本上没放过音乐</li>
<li><strong>小爱智能音箱</strong>，联动家里的各类智能家居</li>
</ul>
<h3 id="-存储设备">📦 存储设备</h3>
<ul>
<li><strong>三星 T5 SSD，1TB</strong>，主要用来存储摄影和视频素材，很小，传输速度很快</li>
<li><strong>希捷移动硬盘，1TB</strong>，Mac Studio 用来 Time Machine 备份使用的</li>
</ul>
<h3 id="-休闲娱乐">🎮 休闲娱乐</h3>
<ul>
<li><strong>Kindle Oasis 2 电子书阅读器</strong>，以前看得比较多，现在基本上看实体书以及手机 Books 上看</li>
<li><strong>Nintendo Switch 主机，动物森友会特别版</strong>，主要用来玩宝可梦，<a href="https://pseudoyu.notion.site/f5f9e6e31b4744a7a1284eaf55451462?v=6e3be0ced2f44305b9ff3a8298e72de5">从 18 年开始陆陆续续也买了不少游戏</a>，很多都还没来得及玩，卡带收藏爱好者</li>
<li><strong>Nintendo Switch Pro 手柄，任天堂明星大乱斗特别版</strong>，体验感比自带的 Joy-Con 好多了</li>
</ul>
<h2 id="软件工具">软件工具</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/my_softwares_in_may_2022.png" alt="my_softwares_in_may_2022"></p>
<h3 id="-系统拓展">🛠 系统拓展</h3>
<ul>
<li><strong>CleanMyMac X</strong>，电脑管家，主要用来清理缓存和软件卸载</li>
<li><strong>AppCleaner</strong>，功能很单一的应用卸载工具</li>
<li><strong>One Switch</strong>，菜单栏快捷工具，主要用来组织电脑休眠使用的</li>
<li><strong>Alfred 4</strong>，快捷启动工具，配合一些 Workflow 功能很丰富，现在主要还用了它的剪贴板历史功能</li>
<li><strong>Hammperspoon</strong>，主要用来通过 <code>Option + hjkl</code> 组合键来弥补 HHKB 没有上下左右键的一些场景</li>
<li><strong>Bartender 4</strong>，菜单栏管理工具，主要隐藏一些软件服务菜单栏图标</li>
<li><strong>BetterTouchTool</strong>，触控板及 Touchbar 管理，主要给 Macbook Pro 配置触控版用的</li>
<li><strong>Magnet</strong>，分屏工具</li>
<li><strong>iStat Menus</strong>，系统状态显示，主要显示 CPU、内存和网络等状态</li>
<li><strong>AirBuddy</strong>，耳机管理工具，感觉连接耳机更顺滑了一些</li>
<li><strong>HazeOver</strong>，桌面效果工具，显示效果很不错</li>
<li><strong>Plash</strong>，动态桌面拓展，在主屏幕放了一个简约的动态时间显示，也几乎不耗资源</li>
<li><strong>DaisyDisk</strong>，磁盘管理，偶尔用来追踪大文件</li>
<li><strong>Menubar X</strong>，菜单栏网页拓展，之前偶尔挂一些小工具，现在用得也少了</li>
<li><strong>Logi Options+</strong>，罗技配置工具，配置鼠标功能按键用的，不过基本上用的默认值</li>
</ul>
<h3 id="-文件管理">📁 文件管理</h3>
<ul>
<li><strong>OneDrive</strong>，5TB 空间，存储大部分个人数据，通过客户端挂载本地目录来同步，速度不错</li>
<li><strong>iCloud</strong>，200GB 空间，主要用于照片备份与软件数据同步</li>
<li><strong>Dropbox</strong>，2GB 空间，主要配合 Cryptomator 对敏感数据加密备份</li>
<li><del><strong>Google Drive</strong>，1TB 空间（因学校从 Google 服务转向 Microsoft 服务，已弃用）</del></li>
<li><del><strong>百度网盘</strong>，存储影音及备份工具（以前存储大量视频剪辑文件用，已弃用）</del></li>
</ul>
<h3 id="-安全工具">🔐 安全工具</h3>
<ul>
<li><strong>ElPass</strong>，密码管理工具，界面很喜欢，OTP 以及 Server 管理功能很惊艳，现在所有帐号、密码、证件和银行卡都在这里管理了，用 iCloud 和 Dropbox 进行同步和备份</li>
<li><strong>GPG Keychain</strong>，macOS GPG 加密工具客户端，主要用来为 Git 提交进行签名</li>
<li><strong>Cryptomator</strong>，文件目录加密工具，用于加密备份证件等隐私数据，配合网盘使用</li>
<li><strong>DAMA</strong>，图片隐私打码工具，通过 TestFlight 尝鲜了测试版</li>
</ul>
<h3 id="-网络工具">🌏 网络工具</h3>
<ul>
<li><strong>Surge</strong>，网络代理、调试工具，家里的 Mac Studio 通过 Surge 来作为家里 Wifi 的 DHCP 服务器，接管家里的网络实现全网代理，主要给 iPad 访问外网以及 Switch 下载游戏加速用</li>
<li><strong>AdGuard Home</strong>，通过网络流量过滤与 DNS 实现去广告，很强大</li>
<li><strong>ClashX</strong>，网络代理工具，买 Surge 前主力用的，现在留了一个备用线路</li>
<li><strong>OpenVPN Connect</strong>，openvpn 客户端，连接公司内网服务器使用</li>
<li><del><strong>Tunnelblick</strong>，上一个项目在用，不过界面没有上面的好，已弃用</del></li>
<li><strong>Safari</strong>，主力浏览器，通过 iCloud 多设备同步
<ul>
<li><strong>AdGuard Home</strong>，去广告插件</li>
<li><strong>Elpass</strong>，自动填充密码</li>
<li><strong>Downie</strong>，下载插件，一键识别媒体并下载</li>
<li><strong>NetNewsWire</strong>，自动抓取网站订阅链接</li>
<li><strong>Vinegar+Baking Soda</strong>，把 YouTube 以及其他一些视频网站的视频播放器转回 HTML5 播放器，简约，体验感很不错</li>
</ul>
</li>
<li><strong>Brave</strong>
<ul>
<li><strong>MetaMask</strong>，钱包插件</li>
<li><strong>Elpass</strong>，自动填充密码</li>
<li><strong>豆伴</strong>，备份和查看豆瓣数据</li>
<li><strong>YouTube Dual Subtitles</strong>，支持多语言字幕</li>
<li><strong>YouTubeEnhancer</strong>，增强 YouTube 播放器功能</li>
</ul>
</li>
<li><del><strong>Chrome</strong>（迁移至 Brave，已弃用）</del></li>
</ul>
<h3 id="-实用工具">🧰 实用工具</h3>
<ul>
<li><strong>Bob</strong>，划词/截图翻译工具，配合 <a href="https://github.com/clubxdev/bob-plugin-deeplx">DeepL X 拓展插件</a>和 <a href="https://zu1k.com">zu1k</a> 大佬发布的 <a href="https://github.com/zu1k/deepl-api-rs">DeepL Free Api Docker 镜像</a>，完美体验，后面还更新了独立的 OCR 功能，更强大了</li>
<li><strong>Tern-Subtitle File Translator</strong>，我配合了 IBM 提供的 API，进行字幕自动中英翻译</li>
<li><strong>qBittorrent</strong>，通过 RSS 管理器来订阅特定 PT 站的番剧等媒体资源，自动更新下载</li>
<li><strong>Downie</strong>，视频源下载工具，下载 YouTube 或者 B 站的一些视频，作剪辑素材用</li>
<li><strong>PicGo</strong>，图床管理工具，主要写博客的时候上传图片到 GitHub 图床并且生成自定义的 Markdown 格式，可以直接嵌入文章</li>
<li><strong>BetterZip</strong>，压缩/解压工具，基本上装机必备了，目前遇到的格式都支持了</li>
<li><strong>PDF Expert</strong>，PDF 查看编辑工具，主要用来做一些合并和编辑，查看的话经常还是用自带的 Preview</li>
<li><strong>PDF Squeezer</strong>，PDF 压缩工具，压缩效果很不错，使用也很方便</li>
<li><strong>Image Smith</strong>，图片压缩工具，刚尝试的一个新工具，很不错，之后作主力压缩了</li>
<li><strong>TinyPNG4Mac</strong>，之前博客图片上传前都会压一些，功能很简单，现在作为备用了</li>
<li><strong>Rime 鼠须管</strong>，定制化输入法，体验很好且数据本地保存，安全稳定</li>
<li><strong>Time Machine</strong>，备份工具，主要给 Mac Studio 作实时备份用</li>
<li><strong>brew</strong>，Homebrew 安装工具，基本上开发有关的都用 brew 装了，方便管理升级</li>
<li><strong>TestFlight</strong>，尝鲜一些测试版软件用</li>
</ul>
<h3 id="-记录工具">📝 记录工具</h3>
<ul>
<li><strong>Logseq</strong>，现在主力的生活记录、任务管理和笔记工具，基于双向链接打造了自己的信息管理系统，而且通过 Journal 以文本条目的形式记录没有心智负担，建议可以看一下 <a href="https://lutaonan.com">Randy</a> 的 &lt;<a href="https://www.bilibili.com/video/BV1X44y1K7X1">我如何使用 Logseq 管理我的生活和笔记</a>&gt;，很有启发</li>
<li><strong>Notion</strong>，原本作笔记和任务管理，后来都迁移到了 Logseq，所以就只作为软件订阅管理、游戏记录的一些工具，数据库还是很强大的</li>
<li><strong>Hook</strong>，文件资源双向链接工具，目前主要用来追踪本地的一些视频之类的大文件，可以以链接的形式嵌入到 Logseq 里</li>
<li><strong>Office 365</strong>，主要文档/PPT/表格处理工具，其实工作后已经主要都是 Markdown 写为主了，但是最后还是得通过 Word 来排版</li>
<li><strong>iWork 全家桶</strong>，Apple 自带文档处理工具</li>
<li><strong>Typora</strong>，主要 Markdown 编辑器，最完美的 Markdown 编辑器了，偶尔要转存一些文本的时候也会通过 Alfred 唤出来</li>
<li><strong>MarginNote 3</strong>，用来阅读一些论文、书籍的工具，用得不算很多</li>
<li><strong>XMind8 Pro</strong>，主要思维导图工具，之前在学校的时候做笔记用的比较多，工作后反而系统性学习整理得少了，需要保持习惯</li>
</ul>
<h3 id="-开发工具">👨🏻‍💻 开发工具</h3>
<ul>
<li>编辑器
<ul>
<li><strong>JetBrains GoLand</strong>，主力工作 Go 开发 IDE，很强大，目前用 Edu 身份订阅着全家桶，希望后面能通过开源项目续着
<ul>
<li><strong>Material Theme UI + Atom Material Icons</strong>，很美观的主题</li>
<li><strong>GitHub Copilot</strong>，代码 AI 补全，很智能</li>
<li><strong>GitToolBox</strong>，提示一些 Git 状态信息</li>
<li><strong>IdeaVim</strong>，配置 Vim 键位</li>
<li><strong>PlantUML Integration</strong>，用来画 UML 图，目前感觉写和预览体验最好的平台了</li>
<li><strong>WakaTime</strong>，用来记录编码项目、语言和所用时间</li>
</ul>
</li>
<li><strong>VS Code</strong>，代码编辑工具，辅助开发
<ul>
<li><strong>Serendipity</strong>，新尝试的一个很喜欢的主题</li>
<li><strong>GitHub Copilot</strong>，代码 AI 补全，重度依赖</li>
<li><strong>Beancount</strong>，用来复式记账，配合 fava 工具进行可视化</li>
<li><strong>Markdown All in One</strong>，用来增强对 Markdown 的支持，主要用来写博客</li>
<li><strong>Rainbow Brackets</strong>，给配对的括号加上颜色</li>
<li><strong>go</strong>，Go 语言环境支持</li>
<li><strong>solidity</strong>，智能合约编写支持</li>
<li><strong>WakaTime</strong>，用来记录编码项目、语言和所用时间</li>
</ul>
</li>
<li><strong>Atom</strong>
<ul>
<li><strong>go-plus</strong>，Go 语言环境支持</li>
<li><strong>fabric-go</strong>，用来调试 fabric 1.4 版本的链码，可以自动通过镜像部署，很方便，这也是我 Atom 编辑器的唯一用途了</li>
<li><strong>wakatime</strong>，用来记录编码项目、语言和所用时间</li>
</ul>
</li>
<li><strong>JetBrains PyCharm Professional Edition</strong>，Python 编辑器
<ul>
<li><strong>Material Theme UI + Atom Material Icons</strong>，很美观的主题</li>
<li><strong>GitHub Copilot</strong>，代码 AI 补全，很智能</li>
<li><strong>GitToolBox</strong>，提示一些 Git 状态信息</li>
<li><strong>IdeaVim</strong>，配置 Vim 键位</li>
<li><strong>WakaTime</strong>，用来记录编码项目、语言和所用时间</li>
</ul>
</li>
<li><strong>Xcode</strong>，macOS 及 iOS 开发 IDE</li>
</ul>
</li>
<li>终端
<ul>
<li><strong>Warp</strong>，新尝试的 Rust 编写的终端，体验感很棒，完全作为主力终端了</li>
<li><strong>iTerm2</strong>，之前一直用，现在主要用来切多个服务器</li>
</ul>
</li>
<li>服务器管理
<ul>
<li><strong>ssh</strong>，配合 Warp 和 iTerm2 的 Profile 来连接服务器用</li>
<li><strong>Termius</strong>，服务器管理工具，主要是可以云端同步配置，跟公司同事调试测试的时候都不需要自己再配本地环境，比较方便，然后也使用 SFTP 来传文件</li>
<li><strong>ServerCat</strong>，服务器状态监控，界面很不错</li>
<li><strong>Fetch</strong>，备用远程文件传输工具，很老牌了</li>
</ul>
</li>
<li>数据库管理
<ul>
<li><strong>Sequel Ace</strong>，主力数据库管理工具，是之前开源版本 Sequel Pro 的一个维护版本，界面简约但是功能很强大</li>
<li><strong>JetBrains DataGrip</strong>，主要通过 Groovy 脚本来自动导出数据库的 Markdown 文件，很方便写文档</li>
</ul>
</li>
<li>接口调试
<ul>
<li><strong>Paw</strong>，主力接口调试工具，限免的时候注册的，速度很快，多环境以及分支管理很强大</li>
<li><del><strong>Postman</strong>，以前用的接口调试工具，但是界面太繁杂了，而且反应有点慢，弃用了</del></li>
</ul>
</li>
<li>文档查看: <strong>Dash</strong>，配合 Alfred 查文档很方便</li>
<li>容器: <strong>Docker Desktop</strong>，虽然占资源很高，但是确实方便</li>
<li>绘图工具
<ul>
<li><strong>PlantUML</strong>，配合 GoLand 里插件通过语法画流程图，修改和版本维护很方便</li>
<li><strong>Draw.io</strong>，一些很复杂的架构图和部署图通过这个客户端画，有点简陋但是够用</li>
</ul>
</li>
<li>版本控制
<ul>
<li><strong>git</strong>，版本管理工具
<ul>
<li><a href="https://github.com/commitizen/cz-cli">git-cz</a>，交互式规范化提交信息</li>
<li><a href="https://github.com/git-chglog/git-chglog">git-chglog</a>，用来自动生成格式化 CHANGELOG</li>
</ul>
</li>
<li><del><strong>Fork</strong>，git 客户端工具（已弃用，改为命令行配合 alias）</del></li>
<li><strong>GitHub</strong>，我的个人博客、图床以及开发项目都通过 GitHub 管理</li>
<li><strong>GitLab</strong>，工作项目通过公司 GitLab 进行管理</li>
</ul>
</li>
</ul>
<h3 id="-视频剪辑">📹 视频剪辑</h3>
<ul>
<li><strong>Final Cut Pro X</strong>，当时优惠价买了全家桶，从 PR 转到了 FCPX 作为主力剪辑工具，在 macOS 上比 PR 体验好多了</li>
<li><strong>剪映专业版</strong>，语音识别智能匹配字幕的功能很强大，3.0 版本还支持导出 <code>.srt</code> 格式了，再通过一个开源的 <a href="https://github.com/GanymedeNil/srt2fcpxml">srt2fcpxml</a> 工具转回 FCPX 兼容的的字幕格式导入回 FCPX，简化字幕制作工作流，再也不用自己一点点对时间轴了</li>
<li><strong>Compressor</strong>，主力压制工具，配合 FCPX 一些预设可以很便捷联动导出</li>
<li><strong>HandBrake</strong>，备用开源视频压制工具，作一些简单压缩转码使用了</li>
<li><strong>大拍档剪辑助手</strong>，用来清理 FCPX 的缓存，也有一些无版权音乐下载、素材管理的小工具</li>
<li><del><strong>IINA</strong>，之前的主力视频播放器，订阅了 Infuse 后弃用了</del></li>
</ul>
<h3 id="-图片处理">📷 图片处理</h3>
<ul>
<li><strong>Affinity Photo</strong>，替代 Photoshop 的修图和调色工具，我拍完照后会用来处理和套 Luts</li>
<li><strong>Pixelmator Pro</strong>，黑五半价买的，据说很强大，不过还没怎么用</li>
<li><strong>Luminar 4</strong>，做一些简单的效果处理会比 Affinity Photo 这些便捷一些</li>
</ul>
<h3 id="-邮件管理">📮 邮件管理</h3>
<ul>
<li><strong>Spark</strong>，电子邮件聚合工具，多端同步也很快，现在所有邮箱都通过 Spark 来管理了</li>
<li><strong>Alimail</strong>，工作用邮箱</li>
<li><strong>Outlook</strong>，主要用来管理 Office365 开发者帐号</li>
<li><strong>Mail</strong>，Apple 自带邮件客户端</li>
</ul>
<h3 id="-信息管理">📨 信息管理</h3>
<ul>
<li><strong>NetNewsWire</strong>，RSS 订阅工具，多端同步很方便，慢慢转向 RSS 为自己的主要信息输入了</li>
<li><strong>TweetBot</strong>，在电脑端用来发布和刷 Twitter 的客户端，主要是可以通过时间轴排列</li>
<li><strong>Books</strong>，Apple 自带图书应用，可导入 epub 或 pdf 文件阅读</li>
<li>域名及个人网站
<ul>
<li><strong>GitHub Pages</strong>，配合 GitHub Action 实现自动部署</li>
<li><strong>Cloudflare</strong>，管理域名，以及对网站进行 CDN 加速</li>
<li><strong>Vercel</strong>，配合 Heroku 的数据库部署了博客的 Cusdis 评论系统</li>
</ul>
</li>
<li><a href="https://www.douban.com/people/pseudo-yu"><strong>豆瓣</strong></a>，通过 GitHub Action 每天抓取豆瓣提供的 RSS，统计我的影音和书籍并更新到 GitHub 主页和个人网站介绍页里，也通过 Brave 的一个叫“豆伴”的插件来定时备份和导出</li>
</ul>
<h3 id="-通讯社交">💬 通讯社交</h3>
<ul>
<li><strong>微信</strong>，生活和工作大部分都还是会通过微信沟通</li>
<li><strong>腾讯会议</strong>，工作用，主要会议工具</li>
<li><strong>Microsoft Teams</strong>，偶尔参加一些线上研讨会使用</li>
<li><strong>Gather</strong>，有趣的线上交流，正在推荐身边的朋友用，像宝可梦一样，能减轻疫情带来的距离感</li>
<li><strong>钉钉</strong>，工作沟通以及偶尔处理我妹妹学校的一些信息用</li>
<li><strong>Telegram</strong>，主要加了一些科技资讯、软件技巧的群，偶尔看看</li>
<li><strong>Discord</strong>，主要参加一些项目获取资讯用的</li>
<li><del><strong>QQ</strong>，大学时学校常用，已弃用</del></li>
</ul>
<h3 id="-影音娱乐">🎸 影音娱乐</h3>
<ul>
<li><strong>Infuse</strong>，视频播放及媒体管理工具，全平台可用且支持格式很多，配合 Plex 这些媒体服务器可以建立自己本地的动漫、电影和剧集库</li>
<li><strong>Plex Media Server</strong>，流媒体管理服务器，可以指定本地目录自动获取元数据进行媒体库管理</li>
<li><strong>Apple Music</strong>，主要听歌软件，配合 iOS 上的 Music Mate 慢慢建立自己的音乐库</li>
<li><strong>Apple Podcasts</strong>，主要用来听一些博客</li>
<li><strong>爱奇艺</strong>，送的会员，偶尔用来追一些热门自制剧</li>
<li><strong>Netflix</strong>，用来追一些最新剧集，新加坡订阅</li>
<li><strong>Disney+</strong>，用来看一些迪士尼动画、漫威剧集和电影，不过用得也不多了，也是新加坡订阅</li>
</ul>
<h3 id="-手机-app">📲 手机 App</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/yu_ios_apps.png" alt="yu_ios_apps"></p>
<ul>
<li>🛠 系统拓展
<ul>
<li><strong>熊猫吃短信</strong>，过滤垃圾短信，很好用</li>
<li><strong>AdGuard</strong>，浏览网页去广告工具</li>
<li><strong>AT</strong>，重要日期纪念日/倒计时</li>
<li><strong>OffScreen</strong>，使用手机时间追踪</li>
<li><strong>谜底时钟</strong>，个性化时钟组件</li>
<li><strong>谜底黑胶</strong>，个性化音乐播放组件</li>
<li><strong>谜底空白</strong>，在屏幕中设置空白位置</li>
<li><strong>Vinegar+Baking Soda</strong>，浏览器看视频使用 HTML5 播放器插件</li>
</ul>
</li>
<li>📁 文件管理
<ul>
<li><strong>文件</strong>，Apple 自带本地及 iCloud 文件管理</li>
<li><strong>OneDrive</strong>，iOS 端</li>
</ul>
</li>
<li>🔐 安全工具
<ul>
<li><strong>Elpass</strong>，密码管理工具 iOS 端，支持双重验证</li>
<li><strong>Google Authenticator</strong>，Google 双重验证工具</li>
<li><strong>Microsoft Authenticator</strong>，Microsoft 双重验证工具</li>
<li><strong>DAMA</strong>，图片隐私打码工具</li>
</ul>
</li>
<li>🌏 网络工具
<ul>
<li><strong>Surge</strong>，Surge 代理工具 iOS 端</li>
<li><strong>Shadowrocket</strong>，备用代理工具</li>
<li><strong>Speedtest</strong>，网络测速工具</li>
<li><strong>小米 WIFI</strong>，管理家庭 Wifi 及设备</li>
</ul>
</li>
<li>🧰 实用工具
<ul>
<li><strong>欧陆词典</strong>，字典应用，可导入不同源</li>
<li><strong>翻译</strong>，苹果自带翻译工具</li>
<li><strong>ServerCat</strong>，服务器状态检测工具移动端</li>
<li><strong>快捷指令</strong>，进行各类自动化操作</li>
<li><strong>TestFlight</strong>，尝鲜一些测试版应用</li>
</ul>
</li>
<li>📝 记录工具
<ul>
<li><strong>Logseq</strong>，iOS 端，主要用来查看</li>
<li><strong>Office 365</strong>，iOS 端，通过 Office365 帐号和 OneDrive 进行同步</li>
<li><strong>iWork 全家桶</strong>，iOS 端</li>
<li><strong>Notability</strong>，笔记工具</li>
</ul>
</li>
<li>🪙 数字资产
<ul>
<li><strong>imToken</strong>，iOS 数字钱包</li>
<li><strong>TokenPocket</strong>，iOS 数字钱包</li>
<li><strong>币安</strong>，Binance 交易所 iOS 客户端</li>
<li><strong>欧易</strong>，OKEX 交易所 iOS 客户端</li>
<li><strong>火币</strong>，Huobi 交易所 iOS 客户端</li>
</ul>
</li>
<li>🏚 家庭管理
<ul>
<li><strong>Home</strong>，苹果自带家庭应用，目前主要用来管 HomePod mini</li>
<li><strong>米家</strong>，管理小米智能家居设备</li>
<li><strong>小爱音箱</strong>，连接和管理小爱智能音箱，语音控制智能家居</li>
<li><strong>点音</strong>，Divoom 像素音箱管理</li>
<li><strong>Yeelight</strong>，控制氛围灯模式</li>
<li><strong>小佩宠物</strong>，控制宠物智能家居</li>
<li><strong>Health</strong>，苹果自带健康数据记录应用，主要用来记录睡眠</li>
<li><strong>Grow</strong>，联动健康应用，生成健康数据</li>
<li><strong>Zepp Life</strong>，联动小米体重秤等，记录健康数据</li>
</ul>
</li>
<li>📨 信息管理
<ul>
<li><strong>Spark</strong>，iOS 端</li>
<li><strong>NetNewsWire</strong>，iOS 端</li>
<li><strong>Apple Books</strong>，电子书阅读器，主要导入 epub 格式看</li>
<li><strong>Patreon</strong>，订阅及赞助支持某些技术大佬的平台</li>
<li><strong>Twitter</strong>，iOS 端，主要国外资讯获取与发布平台</li>
<li><strong>Instagram</strong>，iOS 端，主要用来发布摄影和日常照片</li>
<li><strong>Facebook</strong>，iOS 端，个人状态更新平台，离开香港后用得比较少</li>
<li><strong>微博</strong>，官方客户端，主要股票内资讯获取与发布平台</li>
<li><strong>豆瓣</strong>，iOS 端</li>
<li><strong>少数派</strong>，用来看一些工具类资讯</li>
<li><strong>Outlook</strong>，iOS 端</li>
<li><strong>Mail</strong>，苹果自带邮件应用</li>
</ul>
</li>
<li>👨🏻‍💻 工作求职
<ul>
<li><strong>LinkedIn</strong>，看一些外企的机会</li>
<li><strong>BOSS 直骋</strong>，国内找工作主要用</li>
<li><strong>脉脉</strong>，查询一些公司资讯用</li>
</ul>
</li>
<li>💰 支付工具
<ul>
<li><strong>支付宝</strong>，日常最主要支付工具</li>
<li><strong>招商银行</strong>，招行卡管理</li>
<li><strong>掌上生活</strong>，招行信用卡管理</li>
<li><strong>中国工商银行</strong>，工行卡管理</li>
<li><strong>AlipayHK</strong>，香港支付宝账户</li>
</ul>
</li>
<li>🚆 交通出行
<ul>
<li><strong>Maps</strong>，苹果自带地图应用，主要用来搜路线</li>
<li><strong>高德地图</strong>，公司加班打车用这个</li>
<li><strong>携程旅行</strong>，用来定机票和酒店</li>
<li><strong>铁路 12306</strong>，用来定高铁票，不过后面大多在携程里直接定了</li>
<li><strong>航旅纵横 Pro</strong>，用来查询航班信息、值机以及统计自己的出行，很好用</li>
</ul>
</li>
<li>🛍 生活工具
<ul>
<li><strong>饿了么</strong>，点外卖和水果</li>
<li><strong>淘宝</strong>，买一些日常用品</li>
<li><strong>京东</strong>，主要买数码产品和小家电</li>
<li><strong>大众点评</strong>，查询一些店的评价</li>
<li><strong>大麦</strong>，看一些演出展览</li>
<li><strong>闲鱼</strong>，偶尔会看下一些二手</li>
<li><strong>当当</strong>，买纸质书，大多技术为主</li>
<li><strong>个人所得税</strong>，年度汇算用的</li>
</ul>
</li>
<li>💬 通讯社交
<ul>
<li><strong>微信</strong>，iOS 端</li>
<li><strong>腾讯会议</strong>，iOS 端</li>
<li><strong>钉钉</strong>，iOS 端</li>
<li><strong>Telegram</strong>，iOS 端</li>
<li><strong>Discord</strong>，iOS 端</li>
<li><strong>Clubhouse</strong>，语音聊天室工具，热度过去了现在用得也比较少了</li>
<li><del><strong>QQ</strong>，iOS 客户端，已弃用</del></li>
</ul>
</li>
<li>🎸 影音娱乐
<ul>
<li><strong>Infuse</strong>，iOS 端，可以局域网连接 Mac Studio 的 Plex 媒体库服务器</li>
<li><strong>YouTube</strong>，用来看各类国外博主与技术视频</li>
<li><strong>哔哩哔哩</strong>，主要用来看关注的各类博主更新</li>
<li><strong>爱奇艺</strong>，iOS 客户端</li>
<li><strong>Apple Music</strong>，iOS 端</li>
<li><strong>Music Mate</strong>，探索新音乐，慢慢建立自己的音乐库</li>
<li><strong>Apple Podcasts</strong>，主要通过 iOS 端收听播客</li>
<li><strong>Pokémon Go</strong>，最爱的游戏了，在香港留下了很多记忆，可惜回来后玩不了了</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>以上就是我在 2022 年 5 月所自用的工具箱，花了好几天，把电脑和手机的 App 都彻底整理分类了一遍，随着使用时间越来越长，一直在做减法，也在不断优化自己的使用，希望能够对大家有所参考。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://blog.gasolin.idv.tw/tools/tooling-in-2021-Dec">個人工具箱（2021 十二月）</a></li>
<li><a href="https://github.com/pseudoyu/yu-tools">GitHub - pseudoyu/yu-tools</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</title><link>https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/</link><pubDate>Thu, 24 Mar 2022 01:19:28 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/</guid><description>前言 Pseudoyu 是我的个人博客网站，最早使用 WordPress 搭建在自己的 Vultr vps 上，因为网络访问比较慢所以迁移到了腾讯云服务器上并且进行备案，虽然访问速度有提升，但是发</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><a href="https://www.pseudoyu.com">Pseudoyu</a> 是我的个人博客网站，最早使用 <a href="https://wordpress.com/">WordPress</a> 搭建在自己的 Vultr vps 上，因为网络访问比较慢所以迁移到了腾讯云服务器上并且进行备案，虽然访问速度有提升，但是发布博客的流程很繁琐，服务器的维护长期也是一笔不小的开支。</p>
<p>因此，一直在探索能够既能保障国内外访问体验，又能够托管在一些平台上，实现部署和发布流程的最优化体验。后来也一直不断在改善博客系统搭建和发布流程，迄今为止对自己的全流程解决方案还是比较满意的，虽然部署和搭建上需要进行一些配置，但后续更新维护都很方便，因此，本文将这套免费、开源的个人博客系统搭建及部署解决方案进行全流程记录，希望对大家有所帮助。</p>
<h2 id="解决方案">解决方案</h2>
<h3 id="博客平台">博客平台</h3>
<p>目前已经有很多比较成熟的博客平台，如前文所提到的 WordPress，虽然功能强大，但对于个人博客站点来说有些太重了，<del>也不够酷</del>，经过一番调研，最后选择了 <a href="https://gohugo.io">Hugo</a> 这个静态网站生成器。</p>
<p>Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Gatsby、Jekyll、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pseudoyu_homepage.png" alt="pseudoyu_homepage"></p>
<p>因为 Hugo 开源社区中 <a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den</a> 完全在我的审美上，所以我选择了 Hugo 并在这个主题基础上进行了一些个人定制化改造和配置，满足了自己的需求。</p>
<h3 id="博客托管">博客托管</h3>
<p>静态博客需要托管在一个平台上才能够实现外部访问，可以是自己的 vps 主机，也可以是 <a href="https://pages.github.com">GitHub Pages</a>，或者是 <a href="http://vercel.com">Vercel</a> 这样的 Serverless 平台，后两者都可以通过 GitHub 仓库进行关联。</p>
<p>我选择了 GitHub Pages 这种方式，完全免费且和 GitHub 代码仓库无缝对接，能够满足我博客源文件备份和版本管理的需求，还可以通过强大且同样免费的 <a href="https://github.com/features/actions">GitHub Action</a> 实现各种 CI/CD 的功能，如提交/更新博客源文件后自动构建生成博客静态文件并推送到 GitHub Pages 仓库进行部署，还可以配合一些定时任务实现自我介绍页面更新等功能。</p>
<h3 id="博客域名">博客域名</h3>
<p>使用 GitHub Pages 生成网站会自动分配一个 xxx.github.io 的默认域名，通过这个域名就可以直接对生成的博客网站进行访问，也可以通过域名解析配置自己的域名，如我的网站就是解析了 <a href="https://www.pseudoyu.com">pseudoyu.com</a> 这个域名。</p>
<p>我的域名是在 <a href="https://www.namesilo.com">NameSilo</a> 购买的，并通过 <a href="https://www.cloudflare.com">Cloudflare</a> 平台进行 CDN 加速，提升访问体验，并实现了域名重定向等功能，关于博客访问优化这一点后续会单独讲解。</p>
<p><strong>[2022-05-29 更新]</strong></p>
<p>我后来为了方便管理，把 NameSilo 域名迁移到了 Cloudflare，大家可以直接在 Cloudflare 上购买，教程包含在《<a href="https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统</a>》中。</p>
<h3 id="访客分析">访客分析</h3>
<p>作为一个持续更新运营的博客平台，我们一定很好奇我们哪篇文章阅读量最高、哪个关键词检索最频繁等，帮助我们专注在更有价值的内容创作与分享上，类似的工具也很多，我选择了 <a href="https://splitbee.io">splitbee</a> 与 <a href="https://search.google.com/search-console">Google Console</a> 来统计分析我的访客信息与搜索权重，此外，<a href="https://www.cloudflare.com">Cloudflare</a> 也能够对网络流量进行分析，不过因为有很多网络无关流量，如爬虫等，所以参考性没有前两者强。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/splitbee_statistics.png" alt="splitbee_statistics"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/google_console_performance.png" alt="google_console_performance"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cloudflare_statistics.png" alt="cloudflare_statistics"></p>
<p><strong>[2022-05-21 更新]</strong></p>
<p>除了上述直接服务的平台外，我还部署了一个可代替 <a href="https://analytics.google.com">Google Analytics</a> 的开源服务 <a href="https://umami.is">umami</a>，实现了访客数据的实时监控，教程为：《<a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a>》。</p>
<h3 id="评论系统">评论系统</h3>
<p>一个博客系统当然需要评论系统，像 WordPress 这种自身具备了评论插件，而静态博客则需要自己对接一些评论系统，我最开始选择的是第三方的 <a href="https://disqus.com">Disqus</a>，简单易用，但是会自带很多广告推广，也不够简约，后来选择了 <a href="https://lutaonan.com">Randy</a> 的 <a href="https://cusdis.com">Cusdis</a>，一个轻量级的开源评论系统解决方案（从名字看也是深受 Disqus 其害忍不住自己开坑了哈哈），我通过 Vercel 自建，并链接了 <a href="https://www.heroku.com">Heroku</a> 的免费 <a href="https://www.postgresql.org">PostgreSQL</a> 数据库进行评论数据存储，实现了免费、稳定的评论系统，还支持邮件推送、Telegram Bot 提醒/快捷回复等功能。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cusdis_overview.png" alt="cusdis_overview"></p>
<p><strong>[2022-05-24 更新]</strong></p>
<p>Cusdis 部署在 Railway 平台教程已更新：《<a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a>》。</p>
<h3 id="图片管理">图片管理</h3>
<p>日常发布的文章中可能会涉及很多图片，将图片存储在静态博客源项目仓库中的话会使项目过于庞大，并且很难二次使用和管理，因此，我同样选择了 GitHub 作为图床工具，并使用 <a href="https://molunerfinn.com/PicGo/">PicGo</a> 客户端进行图床管理，在上传前使用 <a href="https://tinypng.com">TinyPNG</a> 进行压缩，并使用 <a href="https://www.jsdelivr.com">jsDelivr</a> 服务为 GitHub 图床进行加速，这样就可以将所有图片存储在 GitHub 图床仓库，文章中以外链的方式嵌入图片。</p>
<h2 id="发布流程">发布流程</h2>
<p>通常 GitHub Pages 发布博客需要本地 <code>hugo</code> 命令生成静态站点文件目录，<code>cd</code> 到 <code>public</code> 目录，并使用 <code>git add</code>、<code>git commit</code>、<code>git push</code> 等命令提交到 GitHub Pages 仓库，实现博客的发布，因为每次更新都需要进行重复操作，且博客源 Markdown 文件无法进行很好的备份和版本管理。</p>
<p>因此，我建立了一个博客源文件仓库，通过 GitHub Action 实现了一套自动化发布流程，仅需将 Hugo 博客源文件上传至 GitHub 仓库，会自动触发 CI 生成静态站点文件并推送到 GitHub Pages 仓库。</p>
<p><strong>[2022-05-29 更新]</strong></p>
<p>Hugo 搭建与 GitHub Action 配置教程已更新：《<a href="https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统</a>》</p>
<h2 id="总结">总结</h2>
<p>以上就是我的个人博客解决方案，前期搭建有些繁琐，但一番折腾后，完美实现了我的需求，关于整个过程的详细步骤，<del>我将会分多篇文章进行讲解，请持续关注</del>，希望能够对大家有所帮助。</p>
<p><strong>[2022-06-02 更新]</strong></p>
<p>系列教程核心部分已完成：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/">从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li>
<li><a href="https://www.pseudoyu.com/en/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统</a></li>
</ul>
<p>除此之外，如果不想使用 Hugo 这类静态博客，还可以通过 Ghost 来比较方便地搭建一下：</p>
<ul>
<li><a href="https://www.pseudoyu.com/en/2022/05/29/deploy_ghost_5_on_digital_ocean_vps/">Ghost 5.0 来了，使用 Digital Ocean 一键部署吧</a></li>
</ul>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://gohugo.io">Hugo 官方网站</a></li>
<li><a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den 主题仓库</a></li>
<li><a href="https://pages.github.com">GitHub Pages 官方网站</a></li>
<li><a href="https://github.com/features/actions">GitHub Action 官方网站</a></li>
<li><a href="http://vercel.com">Vercel 官方网站</a></li>
<li><a href="https://cusdis.com">Cusdis 官方网站</a></li>
<li><a href="https://www.heroku.com">Heroku 官方网站</a></li>
<li><a href="https://molunerfinn.com/PicGo/">PicGo 官方网站</a></li>
<li><a href="https://splitbee.io">splitbee 官方网站</a></li>
<li><a href="https://search.google.com/search-console">Google Console 官方网站</a></li>
<li><a href="https://www.cloudflare.com">Cloudflare 官方网站</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>[译] 理解并用 Go 语言实现一个 HTTP 中间件</title><link>https://www.pseudoyu.com/en/2022/02/15/building_middlewares_with_golang/</link><pubDate>Tue, 15 Feb 2022 18:24:01 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/02/15/building_middlewares_with_golang/</guid><description>简介 当运行在不同计算机上的客户端与服务器进行通信时，就需要使用中间件。通过本文，读者将会了解什么是中间件、中间件使用场景以及它们是如何在 Go 语</description><content:encoded><![CDATA[<h2 id="简介">简介</h2>
<p>当运行在不同计算机上的客户端与服务器进行通信时，就需要使用中间件。通过本文，读者将会了解什么是中间件、中间件使用场景以及它们是如何在 Go 语言中构建的。</p>
<h3 id="什么是-http-中间件">什么是 HTTP 中间件</h3>
<p>为了更好理解 HTTP 中间件是什么，先要解释一些基本概念。假如一个开发者想要建立两台计算机之间的通信（其中一台计算机为另一台提供资源或服务），他将会构建一个 client/server 系统来实现。服务器等待客户端请求资源或服务，并将请求的资源转发给客户端作为响应。请求的资源或服务可能为：</p>
<ul>
<li>客户端身份校验</li>
<li>确认客户端对服务器提供的特定服务是否有访问权限</li>
<li>提供服务</li>
<li>保障数据安全，确保客户端无法访问未授权数据，防止数据被窃取</li>
</ul>
<p>服务器分为无状态和有状态两类，无状态服务器不关心客户端通信状态，而有状态服务器则关心。</p>
<p>中间件是一种将软件或企业应用连接到另一个软件应用，并构成分布式系统的软件实体。HTTP 请求被发送到 API 服务器，而服务器向客户端返回 HTTP 响应。</p>
<p>中间件具备接收请求功能，可以在请求到达处理方法之前对其进行预处理。然后，它将处理具体方法，并将其响应结果发送给客户端。</p>
<h2 id="中间件使用场景">中间件使用场景</h2>
<p>最常见的使用场景为：</p>
<ul>
<li>日志记录器，用于记录每个 REST API 访问请求</li>
<li>验证用户 session，并保持通信存活</li>
<li>用户鉴权</li>
<li>编写自定义逻辑以抽取请求数据</li>
<li>为客户端提供服务时将属性附在响应信息</li>
</ul>
<h2 id="中间件-handlers">中间件 Handlers</h2>
<p>在 Go 语言中，中间件 Handler 是封装另一个 <code>http.Handler</code> 以对请求进行预处理或后续处理的 <code>http.Handler</code>。它介于 Go Web 服务器与实际的处理程序之间，因此被称为“中间件”。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/go_middleware_handlers.png" alt="go_middleware_handlers"></p>
<p>下面是一个基本的中间件 Handler：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Executing middleware before request phase!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="c1">// 将控制权交回 Handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>         
</span></span><span class="line"><span class="cl">         <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Executing middleware after response phase!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">})</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="kd">func</span> <span class="nf">mainLogic</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="c1">// 业务逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Executing mainHandler...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;OK&#34;</span><span class="p">))</span> <span class="p">}</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="c1">// HandlerFunc 返回 HTTP Handler 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="nx">mainLogicHandler</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="nx">mainLogic</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nf">middleware</span><span class="p">(</span><span class="nx">mainLogicHandler</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在终端运行代码，得到以下输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go run middleware.go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Executing middleware before request phase!
</span></span><span class="line"><span class="cl">Executing mainHandler...
</span></span><span class="line"><span class="cl">Executing middleware after response phase!
</span></span></code></pre></div><h3 id="日志中间件-handler">日志中间件 Handler</h3>
<p>为了更好讲解日志中间件 Handler 是如何工作的，我们将实际构建一个并执行一些方法。以下示例创建了两个中间件 Handler：<code>middlewareGreetingsHandler</code> 和 <code>middlewareTimeHandler</code>。Gorilla Mux 路由的 <code>HandleFunc()</code> 方法用于处理中间件方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">middlewareGreetingsHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;Happy New Year, 2022!&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">middlewareTimeHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">curTime</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Format</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Kitchen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;the current time is %v&#34;</span><span class="p">,</span> <span class="nx">curTime</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">addr</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;ADDR&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/v1/greetings&#34;</span><span class="p">,</span> <span class="nx">middlewareHelloHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/v1/time&#34;</span><span class="p">,</span> <span class="nx">middlewareTimeHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;server is listening at %s&#34;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="nx">mux</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>先设置 ADDR 环境变量为空闲端口，并执行 <code>go run main.go</code> 命令来运行服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ADDR</span><span class="o">=</span>localhost:8080
</span></span><span class="line"><span class="cl">go run main.go
</span></span></code></pre></div><p>服务运行成功后，在浏览器中访问 <code>localhost:8080/v1/greetings</code> 查看 <code>middlewareGreetingsHandler</code> 的响应信息，访问 <code>localhost:8080/v1/time</code> 查看 <code>middlewareTimeHandler</code> 的响应信息。完成后，我们需要创建日志中间件来记录所有服务访问请求信息，列举请求方法、资源路径以及处理时间。首先我们要初始化一个新的结构体来实现 <code>http.Handler</code> 接口的 <code>ServeHTTP()</code> 方法。这个结构体将会有一个字段来追溯进程调用中的 <code>http.Handler</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 创建一个名为 Logger 的请求日志中间件 Handler 结构体 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Logger</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ServeHTTP 将请求传递给真正的 Handler 并记录请求细节
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">Logger</span><span class="p">)</span> <span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s %s %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Method</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewLogger 构造了一个新的日志中间件 Handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewLogger</span><span class="p">(</span><span class="nx">handlerToWrap</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="o">*</span><span class="nx">Logger</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Logger</span><span class="p">{</span><span class="nx">handlerToWrap</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>NewLogger()</code> 接收 <code>http.Handler</code>，并返回一个新的封装后的 <code>Logger</code> 实例。由于 <code>http.ServeMux</code> 满足 <code>http.Handler</code> 接口，可以使用日志中间件封装整个 mux。除此之外，由于 <code>Logger</code> 实现了 <code>ServeHTTP()</code> 方法并满足 <code>http.Handler</code> 接口，它也可以被传递至 <code>http.ListenAndServe()</code> 方法而非封装 mux。最后，修改 <code>main()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">addr</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;ADDR&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/v1/greetings&#34;</span><span class="p">,</span> <span class="nx">middlewareGreetingsHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/v1/time&#34;</span><span class="p">,</span> <span class="nx">middlewareTimeHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用日志中间件封装 mux
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">wrappedMux</span> <span class="o">:=</span> <span class="nf">NewLogger</span><span class="p">(</span><span class="nx">mux</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;server is listening at %s&#34;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 wrappedMux 而不是 mux 作为根 handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="nx">wrappedMux</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>重新启动服务并请求 API，不论请求路径是什么，所有的请求日志都会展示在终端。</p>
<h2 id="使用-gorillas-handlers-中间件进行日志记录">使用 Gorilla&rsquo;s <code>Handlers</code> 中间件进行日志记录</h2>
<p>Gorilla Mux 路由有一个 <code>Handlers</code> 包，为常见任务提供各种中间件，包括：</p>
<ul>
<li><code>LoggingHandler</code>：以 Apache 通用日志格式进行记录</li>
<li><code>CompressionHandler</code>：压缩响应信息</li>
<li><code>RecoveryHandler</code>: 从 panic 错误中恢复</li>
</ul>
<p>在以下示例中，我们使用 <code>LoggingHandler</code> 来实现 API 日志记录。首先，使用 <code>go get</code> 命令安装包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go get <span class="s2">&#34;github.com/gorilla/handlers&#34;</span>
</span></span></code></pre></div><p>导入包，并在 <code>loggingMiddleware.go</code> 程序中使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;github.com/gorilla/handlers&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;github.com/gorilla/mux&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">mainLogic</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Processing request!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;OK&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Finished processing request&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">r</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">r</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">mainLogic</span><span class="p">)</span>     
</span></span><span class="line"><span class="cl">     <span class="nx">loggedRouter</span> <span class="o">:=</span> <span class="nx">handlers</span><span class="p">.</span><span class="nf">LoggingHandler</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="nx">loggedRouter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go run loggingMiddleware.go
</span></span></code></pre></div><p>在浏览器中访问 <code>localhost:8080</code>，会显示以下输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/01/05 10:51:44 Processing request!
</span></span><span class="line"><span class="cl">2022/01/01 10:51:44 Finished processing request
</span></span><span class="line"><span class="cl">127.0.0.1 - - <span class="o">[</span>05/January/2022:10:51:44 +0530<span class="o">]</span> <span class="s2">&#34;GET / HTTP/1.1&#34;</span> 
</span></span><span class="line"><span class="cl"><span class="m">200</span> <span class="m">2</span> 127.0.0.1 - - <span class="o">[</span>05/January/2017:10:51:44 +0530<span class="o">]</span> <span class="s2">&#34;GET /favicon.ico HTTP/1.1&#34;</span> <span class="m">404</span> <span class="m">19</span>
</span></span></code></pre></div><p>本示例仅介绍了 Gorilla Mux <code>Handlers</code> 包的用法。</p>
<h2 id="总结">总结</h2>
<p>本文向读者介绍了什么是中间件。为了便于理解，从零开始构建了一个日志中间件程序，并通过 API 实现了一个使用场景。此外，还介绍并实践了一种在 Go 程序中构造中间件更简单的解决方案（即使用 Gorilla Mux Handler）。在未来的文章中，我将讲解如何在 Go 中构建 RPC 服务与客户端。</p>
<h2 id="文章信息">文章信息</h2>
<blockquote>
<ol>
<li><a href="https://ghostmac.hashnode.dev/understanding-and-crafting-http-middlewares-in-go">原文地址</a></li>
<li><a href="https://ghostmac.hashnode.dev">原文作者：MacBobby Chibuzor</a></li>
<li><a href="https://github.com/gocn/translator/blob/master/2022/w07_building_middlewares_with_golang.md">本文永久链接</a></li>
<li><a href="https://github.com/gocn/translator">GoCN &lt;每周译 Go&gt;</a></li>
<li><a href="https://github.com/pseudoyu">译者：张宇</a></li>
<li><a href="https://github.com/xkkhy">校对：小超人</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>SonarQube 代码质量检查工具配置</title><link>https://www.pseudoyu.com/en/2021/10/27/sonarqube_code_check_setup/</link><pubDate>Wed, 27 Oct 2021 01:57:23 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/10/27/sonarqube_code_check_setup/</guid><description>前言 最近负责公司一部分项目的代码仓库管理及 code review 等，用到了 SonarQube 这一代码质量检查工具，通过集成 GitLab CI，能够实现在每次合并请求/提交时自动执行代码质</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近负责公司一部分项目的代码仓库管理及 code review 等，用到了 SonarQube 这一代码质量检查工具，通过集成 GitLab CI，能够实现在每次合并请求/提交时自动执行代码质量检查并输出检测报告。</p>
<p>本文记录了通过 GitLab 仓库导入项目的配置全流程，以便其他项目配置时参考。</p>
<h2 id="sonarqube-项目配置">SonarQube 项目配置</h2>
<h3 id="项目面板">项目面板</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sonarqube_homepage.png" alt="sonarqube_homepage"></p>
<p>SonarQube 项目面板如上图所示，会以评级的方式对项目代码质量进行分析。每次进行代码分析后，可以很直观地对代码进行多维度的分析，在合并分支前，提交人员可参照分析结果对代码进行修改完善，减少了代码审阅人员不必要的工作量。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sonarqube_code_detail.png" alt="sonarqube_code_detail"></p>
<p>点击具体指标则可以深入代码文件对检测出的问题进行标识，为人工 code review 提供了有效参照。</p>
<h3 id="项目配置">项目配置</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/how_to_analyze.png" alt="how_to_analyze"></p>
<p>点击右上角「新增项目」，可选择不同的分析方式，支持 Jenkins, GitLab CI 及 GitHub Actions 等常用代码仓库自动化工作流方式，本文将主要说明 GitLab CI 的配置方式。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/import_gitlab_project.png" alt="import_gitlab_project"></p>
<p>选择 GitLab CI 后，选择关联 GitLab 帐号中的项目仓库，进行后续配置。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/project_code.png" alt="project_code"></p>
<p>以 Go 项目为例，首先，我们需要按照提示手动创建 <code>sonar-project.properties</code> 文件并粘贴配置信息。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/create_token.png.png" alt="create_token.png"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/config_cicd_var.png" alt="config_cicd_var"></p>
<p>然后需要为项目创建 Token，并在 GitLab 中 「设置」-「CI/CD」-「变量」配置选项中填写 Token 及 URL 变量值。</p>
<h3 id="ci-配置">CI 配置</h3>
<p>进行基本项目配置后，需要通过 <code>.gitlab-ci.yml</code> 配置 GitLab CI 工作流，我的配置如下图所示：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/config_gitlan_ci.png" alt="config_gitlan_ci"></p>
<p>我主要设置了当仓库进行合并请求时，如 <code>src</code> 目录下的代码有改变，则执行 <code>testing</code> 流水线，通过 SonarQube 进行代码质量检查。</p>
<p>GitLab CI 中还可以添加部署等脚本，与 SonarQube 工具配合使用，以实现工作流的优化。项目的 CI 脚本需要添加相应的 Runner 运行。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sonar_check_begin.png" alt="sonar_check_begin"></p>
<p>当检测到合并请求时，sonarqube-check 会被触发执行，最终返回执行结果。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sonar_check_success.png" alt="sonar_check_success"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sonarqube_status.png" alt="sonarqube_status"></p>
<p>此时点开 SonarQube 中项目的页面，则已经有了分析信息，本次代码质量检查完成。</p>
<h2 id="总结">总结</h2>
<p>以上就是对 GitLab 仓库中现有 Go 项目配置 SonarQube 代码质量检查工具的全流程。代码质量自动化检查是开发运维规范流程中重要的环节，尤其是在团队项目中，好的规范有助于工作流的优化，提升项目的整体质量。</p>
<p>后续也将会对工作中用到的开发运维规范开源工具配置与使用进行记录，如有错漏，敬请交流指正。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://docs.sonarqube.org/latest/">SonarQube Document</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>BitXHub 跨链插件（Fabric）源码解读</title><link>https://www.pseudoyu.com/en/2021/09/09/blockchain_crosschain_bitxhub/</link><pubDate>Thu, 09 Sep 2021 15:14:26 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/09/blockchain_crosschain_bitxhub/</guid><description>前言 之前提到过趣链科技的 BitXHub 跨链平台是业界较为完善的跨链开源解决方案，主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>之前提到过趣链科技的 BitXHub 跨链平台是业界较为完善的跨链开源解决方案，主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了优化。</p>
<p>目前公司团队在做一个 BaaS 平台的跨链模块，我在其中负责跨链适配器部分，对应 BitXHub 平台就是监听模块和应用链插件模块。适配器将对应用链上的跨链事件作监听，并将相应参数传给网关作跨链相关的业务逻辑需求。</p>
<p>因此，打算对 BitXHub 的 <a href="https://github.com/meshplus/pier-client-fabric">meshplus/pier-client-fabric</a> 插件源码作深入解读，学习其优秀的代码结构和功能模块，以便更好地实现自己的适配器功能。</p>
<h2 id="跨链交易流程">跨链交易流程</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cross_chain_plugin.svg" alt="cross_chain_plugin"></p>
<p>根据跨链业务需求，典型的跨链调用流程如上图所示。</p>
<ol>
<li>需要进行跨链交易的子链需要安装适配器并部署提供的跨链合约和业务合约</li>
<li>用户通过 SDK 调用业务合约时，合约将调用跨链合约并抛出跨链事件</li>
<li>子链相应适配器将会轮询或订阅跨链合约抛出的跨链事件并发送到跨链网关的监听模块</li>
<li>跨链网关将从跨链事件中提取的响应方法和参数转换为目标子链可识别的交易</li>
<li>跨链网关将转换后的交易提交到目标子链并执行</li>
</ol>
<h2 id="适配器机制">适配器机制</h2>
<h3 id="接口设计">接口设计</h3>
<p>适配器主要负责与子链之间的交互，并以接口调用的方式参与跨链交互。主要提供以下接口。</p>
<h4 id="调用链码">调用链码</h4>
<p>适配器接收跨链网关发送的交易参数，封装为已适配子链接受的数据结构并调用链码。</p>
<h4 id="查询跨链交易">查询跨链交易</h4>
<p>子链将跨链相关细节存在 payload 字段中，如合约、用户等，适配器对这些信息进行解析与封装，提供相应接口给跨链网关查询。</p>
<h4 id="查询历史交易信息">查询历史交易信息</h4>
<p>适配器需要提供历史交易查询接口，以便于当跨链事件因网络传输等原因未收到时主动进行查询。</p>
<h4 id="查询应用链基本信息">查询应用链基本信息</h4>
<p>适配器需要提供其所适配子链相关信息的查询接口以便于跨链网关进行查询，如名称、类型等。</p>
<h2 id="源码解读">源码解读</h2>
<p>接下来将对 BitXHub 跨链插件（Fabric）的核心功能模块源码进行解读。</p>
<h3 id="设计模式">设计模式</h3>
<p>插件项目采用的是典型的“生产者-消费者”模型，很适合这样需要轮询/订阅接收数据的并发场景。这种模型用到了任意时刻只有一个 goroutine 对 channel 中的某一个数据进行访问的特性。</p>
<h4 id="订阅轮询跨链事件">订阅/轮询跨链事件</h4>
<p>插件需要构建一个生产者对象来订阅自己相应子链的跨链事件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 构造生产者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ec</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">event</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">channelProvider</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nf">WithBlockEvents</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to create fabcli, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">c</span><span class="p">.</span><span class="nx">eventClient</span> <span class="p">=</span> <span class="nx">ec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 订阅跨链事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">registration</span><span class="p">,</span> <span class="nx">notifier</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ec</span><span class="p">.</span><span class="nf">RegisterChaincodeEvent</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">CCID</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">EventFilter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to register chaincode event, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">c</span><span class="p">.</span><span class="nx">registration</span> <span class="p">=</span> <span class="nx">registration</span>
</span></span></code></pre></div><p>订阅事件的方法是调用了 <code>fabric-sdk-go</code> 的 <code>RegisterChaincodeEvent()</code> 方法，需要注意的是，当不需要监听事件时，需要调用 <code>Unregister()</code> 方法来取消订阅。</p>
<p>方法中的 <code>ccID</code> 是需要监听的链码 ID，<code>eventFilter</code> 是需要监听的链码时间，而这个方法会返回一个 channel 接收数据（当取消订阅时，channel 会关闭）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">RegisterChaincodeEvent</span><span class="p">(</span><span class="nx">ccID</span><span class="p">,</span> <span class="nx">eventFilter</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">fab</span><span class="p">.</span><span class="nx">Registration</span><span class="p">,</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">fab</span><span class="p">.</span><span class="nx">CCEvent</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">eventService</span><span class="p">.</span><span class="nf">RegisterChaincodeEvent</span><span class="p">(</span><span class="nx">ccID</span><span class="p">,</span> <span class="nx">eventFilter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>将订阅了跨链合约的对象（即生产者）与消费者都置于无限循环中，当有跨链事件抛出时，生产者将会不断地向 channel 中放入数据，而消费者也不断从通道中取出数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 生产者将跨链事件写入通道
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">case</span> <span class="nx">ccEvent</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">notifier</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">ccEvent</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">c</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="nx">ccEvent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 消费者从通道中取出跨链事件数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">.</span><span class="nx">ctx</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}()</span>
</span></span></code></pre></div><p>因为生产者和消费者都在无限循环中，生产者的 goroutine 不会退出，channel 持续写入数据，而当没有新事件时，消费者将会阻塞，等待生产者接收新的数据并写入 channel。</p>
<h3 id="插件初始化运行与关闭">插件初始化、运行与关闭</h3>
<p>看了整体的设计模式，我们从程序的主入口看看整个插件项目运行的机制。</p>
<h4 id="初始化">初始化</h4>
<p>在 client 程序初始化中，首先根据自定义的结构构造了消费者对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 构造消费者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">mgh</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newFabricHandler</span><span class="p">(</span><span class="nx">contractmeta</span><span class="p">.</span><span class="nx">EventFilter</span><span class="p">,</span> <span class="nx">eventC</span><span class="p">,</span> <span class="nx">appchainID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">csm</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewConsumer</span><span class="p">(</span><span class="nx">configPath</span><span class="p">,</span> <span class="nx">contractmeta</span><span class="p">,</span> <span class="nx">mgh</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="运行">运行</h4>
<p>程序运行的入口很简单，就是对跨链合约进行轮询，并启动消费者对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">Start</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Fabric consumer started&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">c</span><span class="p">.</span><span class="nf">polling</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">consumer</span><span class="p">.</span><span class="nf">Start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="关闭">关闭</h4>
<p>关闭插件也很简单，即停止程序运行并取消订阅事件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 关闭插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">Stop</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">ticker</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">consumer</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在 consumer 包中取消订阅事件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Consumer</span><span class="p">)</span> <span class="nf">Shutdown</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">eventClient</span><span class="p">.</span><span class="nf">Unregister</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">registration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>再深一层看，取消订阅事件是调用了 <code>fabric-sdk-go</code> 的 <code>Unregister()</code> 方法，会取消该事件的订阅并关闭相应通道。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">Unregister</span><span class="p">(</span><span class="nx">reg</span> <span class="nx">fab</span><span class="p">.</span><span class="nx">Registration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">eventService</span><span class="p">.</span><span class="nf">Unregister</span><span class="p">(</span><span class="nx">reg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="接口实现">接口实现</h3>
<p>除了对事件进行订阅监听外，插件还提供了一系列查询接口供网关调用，以完成相应跨链操作。</p>
<h4 id="getproof">getProof()</h4>
<p>如获取 Proof 信息等</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">getProof</span><span class="p">(</span><span class="nx">response</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">proof</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">handle</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">response</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// query proof from fabric
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ledger</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">consumer</span><span class="p">.</span><span class="nx">channelProvider</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">QueryTransaction</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">TransactionID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pd</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">common</span><span class="p">.</span><span class="nx">Payload</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">TransactionEnvelope</span><span class="p">.</span><span class="nx">Payload</span><span class="p">,</span> <span class="nx">pd</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">peer</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">pd</span><span class="p">.</span><span class="nx">Data</span><span class="p">,</span> <span class="nx">pt</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">pt</span><span class="p">.</span><span class="nx">Actions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Payload</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">retry</span><span class="p">.</span><span class="nf">Retry</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">attempt</span> <span class="kt">uint</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="nx">proof</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;Can&#39;t get proof&#34;</span><span class="p">,</span> <span class="s">&#34;error&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">strategy</span><span class="p">.</span><span class="nf">Wait</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;Can&#39;t get proof&#34;</span><span class="p">,</span> <span class="s">&#34;error&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">proof</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="getchainid">getChainID()</h4>
<p>该接口用于获取链的 ID</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">GetChainID</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">request</span> <span class="o">:=</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ChaincodeID</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">CCID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Fcn</span><span class="p">:</span>         <span class="nx">GetChainId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">consumer</span><span class="p">.</span><span class="nx">ChannelClient</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Payload</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">chainIds</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Payload</span><span class="p">),</span> <span class="s">&#34;-&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chainIds</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">chainIds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">chainIds</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="其他接口">其他接口</h4>
<p>其他更多接口实现细节详见 <a href="https://github.com/meshplus/pier-client-fabric/blob/master/client.go">meshplus/pier-client-fabric/client.go</a>。</p>
<h3 id="跨链合约">跨链合约</h3>
<p>跨链合约是实现插件监听的重要部分，当业务需要跨链时，将会统一调用跨链合约，并与跨链网关进行交互。</p>
<p>跨链合约提供了一系列接口供业务合约进行实现，因此按照一定的规范撰写业务合约则能简化跨链业务的开发和维护，跨链合约编写的规范详见&lt;<a href="https://github.com/meshplus/bitxhub/wiki/%E8%B7%A8%E9%93%BE%E5%90%88%E7%BA%A6%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3">跨链合约编写文档</a>&gt;。</p>
<h4 id="事件实现">事件实现</h4>
<p>跨链合约是怎样将跨链事件抛出给插件的呢？</p>
<p>在跨链合约的 <code>Invoke()</code> 方法中，跨链合约首先通过 <code>GetFunctionAndParameters()</code> 方法获取了合约调用者（也就是业务合约）的调用方法和相应参数，然后通过对方法名进行判断，从而调用不同的合约。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">broker</span> <span class="o">*</span><span class="nx">Broker</span><span class="p">)</span> <span class="nf">Invoke</span><span class="p">(</span><span class="nx">stub</span> <span class="nx">shim</span><span class="p">.</span><span class="nx">ChaincodeStubInterface</span><span class="p">)</span> <span class="nx">pb</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">function</span><span class="p">,</span> <span class="nx">args</span> <span class="o">:=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">GetFunctionAndParameters</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="k">switch</span> <span class="nx">function</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">case</span> <span class="s">&#34;getChainId&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">getChainId</span><span class="p">(</span><span class="nx">stub</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;getInMessage&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">getInMessage</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;getOutMessage&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">getOutMessage</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">case</span> <span class="s">&#34;EmitInterchainEvent&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">EmitInterchainEvent</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;invalid function: &#34;</span> <span class="o">+</span> <span class="nx">function</span> <span class="o">+</span> <span class="s">&#34;, args: &#34;</span> <span class="o">+</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们着重来分析一下当调用了 <code>EmitInterchainEvent()</code> 时，跨链合约做了什么，相应说明见注释。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">broker</span> <span class="o">*</span><span class="nx">Broker</span><span class="p">)</span> <span class="nf">EmitInterchainEvent</span><span class="p">(</span><span class="nx">stub</span> <span class="nx">shim</span><span class="p">.</span><span class="nx">ChaincodeStubInterface</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="nx">pb</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断传入参数数量是否正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 跨链合约需要传入很多参数，如调用失败在链上容易产生安全问题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">5</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;incorrect number of arguments, expecting 7&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 读取参数并存入相应变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 目标链 ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dstServiceID</span> <span class="o">:=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 自己的链码 ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cid</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getChaincodeID</span><span class="p">(</span><span class="nx">stub</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取 bxhID 和 appchainID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">curFullID</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">genFullServiceID</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">cid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将当前链 ID 和目标链 ID 组合成输出跨链服务组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">outServicePair</span> <span class="o">:=</span> <span class="nf">genServicePair</span><span class="p">(</span><span class="nx">curFullID</span><span class="p">,</span> <span class="nx">dstServiceID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取输出值的键值对
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">outMeta</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">getMap</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">outterMeta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询输出跨链服务组是否在键值对中，否则设为 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">outMeta</span><span class="p">[</span><span class="nx">outServicePair</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">outMeta</span><span class="p">[</span><span class="nx">outServicePair</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 封装交易信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Event</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Index</span><span class="p">:</span>     <span class="nx">outMeta</span><span class="p">[</span><span class="nx">outServicePair</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DstFullID</span><span class="p">:</span> <span class="nx">dstServiceID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SrcFullID</span><span class="p">:</span> <span class="nx">curFullID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Func</span><span class="p">:</span>      <span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Args</span><span class="p">:</span>      <span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Argscb</span><span class="p">:</span>    <span class="nx">args</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Argsrb</span><span class="p">:</span>    <span class="nx">args</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 输出服务自增
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">outMeta</span><span class="p">[</span><span class="nx">outServicePair</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将交易信息转为 json 格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">txValue</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将输出事件消息格式化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">key</span> <span class="o">:=</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">outMsgKey</span><span class="p">(</span><span class="nx">outServicePair</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatUint</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">Index</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将消息与交易信息写入账本（持久化）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">PutState</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">txValue</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;persist event: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">).</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设定相应跨链交易事件名称，并将交易信息存入 payload 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">SetEvent</span><span class="p">(</span><span class="nx">interchainEventName</span><span class="p">,</span> <span class="nx">txValue</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;set event: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">).</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将元数据状态写入账本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">broker</span><span class="p">.</span><span class="nf">putMap</span><span class="p">(</span><span class="nx">stub</span><span class="p">,</span> <span class="nx">outterMeta</span><span class="p">,</span> <span class="nx">outMeta</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Success</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以上就是调用跨链合约时所做的，本质上其实只是在跨链合约中通过 <code>SetEvent()</code> 设置了一个触发一个事件，再在插件中通过 <code>RegisterChaincodeEvent()</code> 进行订阅监听。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nf">SetEvent</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">payload</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</span></span></code></pre></div><p><code>SetEvent()</code> 是 <code>shim</code> 包下的一个接口，主要传入名称与 payload 数组，关于链码事件监听原理与细节详见 &lt;<a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析</a>&gt;。</p>
<h3 id="业务合约">业务合约</h3>
<p>分析完了跨链合约，我们来看看业务合约是如何调用跨链合约的呢，以示例中的 <code>data_swapper.go</code> 数据交换合约为例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">DataSwapper</span><span class="p">)</span> <span class="nf">get</span><span class="p">(</span><span class="nx">stub</span> <span class="nx">shim</span><span class="p">.</span><span class="nx">ChaincodeStubInterface</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="nx">pb</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// args[0]: key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">value</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">GetState</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Success</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// args[0]: destination service id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// args[1]: key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">b</span> <span class="o">:=</span> <span class="nx">util</span><span class="p">.</span><span class="nf">ToChaincodeArgs</span><span class="p">(</span><span class="nx">emitInterchainEventFunc</span><span class="p">,</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&#34;interchainGet,interchainSet,&#34;</span><span class="p">,</span> <span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">response</span> <span class="o">:=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">InvokeChaincode</span><span class="p">(</span><span class="nx">brokerContractName</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">channelID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Status</span> <span class="o">!=</span> <span class="nx">shim</span><span class="p">.</span><span class="nx">OK</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invoke broker chaincode %s error: %s&#34;</span><span class="p">,</span> <span class="nx">brokerContractName</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Message</span><span class="p">).</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Success</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;incorrect number of arguments&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如想在 <code>data_swapper.go</code> 业务合约中获取其他链的信息，通过 <code>switch...case...</code> 在调用 <code>get</code> 方法时首先对输入参数数组 <code>args []string</code> 的长度进行判断，当长度为 1 时，正常调用自身合约进行查询，而当长度为 2 时，首先通过 fabric 提供的 <code>ToChaincodeArgs()</code> 方法将参数从 <code>string</code> 转为链码参数数组格式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ToChaincodeArgs</span><span class="p">(</span><span class="nx">args</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bargs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">args</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bargs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">bargs</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后直接在业务链码中通过 <code>InvokeChaincode()</code> 方法调用跨链合约，并传入参数和通道 ID，至此就完成了一次跨链数据查询链码调用。</p>
<h2 id="总结">总结</h2>
<p>以上就是对跨链交易流程与 BitXHub 跨链插件（Fabric）源码解读，也希望在此过程中加深对跨链机制和相关平台的理解，未来能更好地参与到其开源建设中。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://github.com/gocn/opentalk/tree/main/PhaseTen_BitXHub">跨链技术平台 BitXHub</a></li>
<li><a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub Document</a></li>
<li><a href="https://github.com/meshplus/pier-client-fabric">meshplus/pier-client-fabric</a></li>
<li><a href="https://tech.hyperchain.cn/bitxhub-design-thinking/">十问 BitXHub:谈谈跨链平台的架构设计</a></li>
<li><a href="https://github.com/meshplus/bitxhub/wiki/%E8%B7%A8%E9%93%BE%E5%90%88%E7%BA%A6%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3">跨链合约编写文档</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>分布式系统与区块链共识机制</title><link>https://www.pseudoyu.com/en/2021/09/08/blockchain_consensus/</link><pubDate>Wed, 08 Sep 2021 11:03:55 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/08/blockchain_consensus/</guid><description>前言 随着互联网系统日益复杂，大多数系统都从单体架构转向分布式架构，而在区块链这样以分布式技术为基础的技术更是高度依赖数据一致性和共识机制。 本</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>随着互联网系统日益复杂，大多数系统都从单体架构转向分布式架构，而在区块链这样以分布式技术为基础的技术更是高度依赖数据一致性和共识机制。</p>
<p>本文将介绍分布式系统一致性、共识的概念与其在区块链中的实际应用与发展。</p>
<h2 id="分布式系统">分布式系统</h2>
<h3 id="一致性问题">一致性问题</h3>
<p>随着业务场景的复杂化，同一个业务往往也由多台服务器组成集群提供服务，但如何在这些物理位置和运行状态都不同的系统中达成一致成为了分布式领域的重要问题。</p>
<p>一般而言，分布式系统达成一致有以下三点规范：</p>
<ol>
<li>可终止性</li>
<li>约同性</li>
<li>合法性</li>
</ol>
<p>分布式事务需要保障能在有限的时间内达成一致的结果，该结果必须是由某个节点提出的提案且不同节点必须完成相同的决策。</p>
<h3 id="强一致性">强一致性</h3>
<p>想在单体应用或者各个节点的性能、网络带宽等配置在理想状况下做到这一点很容易，然而，在真实的业务场景中，要实现这样的强一致性成本非常高，需要保障系统的绝对稳定性、系统与系统之间的通讯没有延迟，此外，强一致性也会降低系统的性能和拓展性。</p>
<p>在强一致性情况下，任何时刻所有节点中的数据都是一样的。强一致性通常又包括顺序一致性和线性一致性两种。</p>
<h4 id="顺序一致性">顺序一致性</h4>
<p>顺序一致性要求所有进程的全局执行顺序和各个进程自身的顺序保持一致，但并不要求物理时间上对各个进程保持全局的顺序。因此，这也是一种相对实践性较强的做法。</p>
<h4 id="线性一致性">线性一致性</h4>
<p>线性一致性在顺序一致增加了需要对进程间进行全局排序的规则，要求所有时刻所有进程的操作都是实时同步的。这种绝对一致性往往在实践中很难实现，需要通过全局锁或者一些复杂的同步算法实现，且往往以牺牲性能为代价。</p>
<h3 id="弱一致性">弱一致性</h3>
<p>而在真实的业务场景里，往往并不需要实时同步这样的绝对一致状态，因此可以容忍部分访问或在一段时间后最终达成一致。这些在某些方面弱化了的一致性称为弱一致性。</p>
<h3 id="共识机制">共识机制</h3>
<p>共识机制是指在分布式系统中多个节点对某个事务达成一致的机制，关于共识的达成，有以下几种理论和原则：</p>
<ul>
<li>FLP 不可能原理</li>
<li>CAP 原则</li>
<li>ACID 原则</li>
<li>BASE 理论</li>
<li>多阶段提交</li>
</ul>
<h4 id="flp-不可能原理">FLP 不可能原理</h4>
<p>FLP 不可能原理是 Fischer、Lynch 和 Patterson 三位科学家提出的一种理论，即在一个网络可靠但允许节点失效（如停机）的异步系统中，不可能在有限时间内完成共识。</p>
<p>异步是指系统各个节点之间的时间等存在差异性，导致无法判断消息未响应是由于节点故障还是传输过程中的故障，因此无法判断消息是否丢失。</p>
<h4 id="cap-原则">CAP 原则</h4>
<p>而在工程实践中，往往会弱化某一部分的需求以满足真实业务场景的需求。CAP 原则就是来解决这一问题，CAP 是指：</p>
<ul>
<li>Consistency，一致性</li>
<li>Availability，可用性</li>
<li>Partition，分区容错性</li>
</ul>
<p>分布式系统无法同时保障这三点，最多能保障其中两个特性，那这个原理有哪些实际应用呢？</p>
<ol>
<li>AP 系统，在静态网站、非实时性数据库等业务场景下，可以弱化其一致性，如新版本上线后一段时间才达成一致。</li>
<li>CP 系统，在银行转账等对一致性要求绝对敏感的场景下，可以弱化其可用性，如当系统故障或失败时拒绝服务。</li>
<li>AC 系统，两阶段提交和一些关系性数据库则弱化网络分区，如 ZooKeeper 等。</li>
</ol>
<h4 id="acid-原则">ACID 原则</h4>
<p>分布式数据库的事务需要牺牲部分可用性来达到一致性，需要遵循 ACID 原则，具体如下：</p>
<ul>
<li>Atomicity，原子性。事务的所有操作要么全部执行，要么全部不执行，失败则全部回退。</li>
<li>Consistency，一致性。事务执行前后状态需要一致，不存在中间状态。</li>
<li>Isolation，隔离性。多个事务可以并发执行但彼此之间相互独立。</li>
<li>Durability，持久性。状态改变是永久的。</li>
</ul>
<h4 id="base-原则">BASE 原则</h4>
<p>BASE 原则是指：</p>
<ul>
<li>Basically Available，基本可用</li>
<li>Soft State，软状态</li>
<li>Eventual Consistency，最终一致</li>
</ul>
<p>这是一种牺牲强一致性来实现整个系统的方案，即只保障最终一致性。</p>
<h4 id="多阶段提交">多阶段提交</h4>
<p>两阶段提交是将事务提交过程分解为预提交和正式提交两个阶段以避免冲突，但仍然存在同步阻塞、单点故障、数据一致性等问题。</p>
<p>TCC 事务机制则主要分为：</p>
<ul>
<li>Try 阶段</li>
<li>Confirm 阶段</li>
<li>Cancel 阶段</li>
</ul>
<p>在 Try 阶段对业务进行检查并预留业务资源，在 Confirm 阶段使用资源执行业务，Cancel 阶段取消执行并释放资源。这种方式是对两阶段提交多作了一些业务上的处理，但因为拆分成了三个接口进行，代码复杂性提升了。</p>
<p>三阶段提交引入了超时机制，并在两阶段提交的第一阶段加入了一个尝试预提交环节，主要解决了单点故障和阻塞问题。</p>
<h2 id="共识算法">共识算法</h2>
<p>根据容错类型（是否会有恶意节点），我们把共识算法分为非拜占庭容错（Crash Fault Tolerance, CFT）和拜占庭容错（BFT, Byzantine Fault Tolerance）两种。</p>
<h3 id="cft-crash-fault-tolerance">CFT (Crash Fault Tolerance)</h3>
<p>分布式系统中存在故障节点但不存在错误节点的场景称为 CFT，在这种场景下，消息可能丢失或者重复，但不会错误，在这种条件下如何达成共识是真实世界中非常常见的需求。</p>
<h4 id="paxos">Paxos</h4>
<p>Paxos 算法原理类似于两阶段提交，设定了三种逻辑节点，提案者、接受者和学习者。由提案者提出提案，接受者对提案进行投票并接受提案，而学习者获取提案结果并广播。</p>
<p>只有提案者提出的提案才可能会批准，而所有节点都可以竞选成为提案者，但每一轮共识只有唯一的一个提案者提提案，这种机制保障了一定的公平性。</p>
<p>然而，Paxos 只能保障一定条件下的共识，当超过半数的节点参与时才会正常运作。</p>
<h4 id="raft">Raft</h4>
<p>由于 Paxos 算法实现起来比较困难，出现了许多变体，如 Fast Paxos、Multi-Paxos 等，其中比较有代表性的就是 Raft 算法。</p>
<p>Raft 将一致性过程拆分为领导者选举、日志复制和安全性三个子问题，设定了领导者、候选者和跟随者三种逻辑节点。</p>
<p>所有节点的初始状态都是跟随者，想参与领导者竞选则转变为候选者并提出选举请求，如超过一半票数则成功在本次任期称为领导者。</p>
<p>领导者会处理所有请求并将日志同步至跟随者，并且会定期给所有跟随者发送心跳消息，如果出现故障，心跳消息超时未收到，则会发起新的选举过程。</p>
<h3 id="bft-byzantine-fault-tolerance">BFT (Byzantine Fault Tolerance)</h3>
<h4 id="byzantine-fault-tolerance-bft">Byzantine Fault Tolerance, BFT</h4>
<p>拜占庭容错算法则主要是用来处理网络中存在恶意节点的场景，主要是对拜占庭问题的解决，在恶意节点不超过 1/3 的情况下可以有效达成共识，但复杂度非常高（指数级）。</p>
<h4 id="practical-byzantine-fault-tolerance-pbft">Practical Byzantine Fault Tolerance, PBFT</h4>
<p>PBFT 是对 BFT 算法的优化，采用了 RSA 签名算法、消息验证、摘要等密码学技术，结合 Paxos 等相关算法，最后将算法复杂度降到了平方级。</p>
<p>在 PBFT 算法实现中，首先选取（随机/轮换）某个节点，设定其逻辑节点为主节点。主节点在自己的 View 内接收客户端的请求并广播（使用三阶段提交机制，见上文）至其他节点，当所有节点完成处理请求后将结果返回给客户端，如果收到了至少来自 2f + 1 个不同节点的相同结果，则共识完成。</p>
<ul>
<li>尝试预提交：主节点收到消息后进行签名并向其他节点广播</li>
<li>预提交：其他节点收到消息后进行核对，合法则向签名并向其他节点广播，其他节点也进行核对</li>
<li>正式提交：对消息签名并广播提交状态，如经过 2f + 1 个验证，则系统完成共识</li>
</ul>
<h4 id="其他">其他</h4>
<p>除了 PBFT 外，PoW、PoS、HotStuff 等也广泛应用于比特币、以太坊、Libra 等区块链项目，并在不断优化中，拜占庭容错类算法因为效率不高，大多用于公有链环境，而联盟链则多采用 非拜占庭容错的方式，辅之以权限控制等方式来平衡性能和安全性。</p>
<h2 id="总结">总结</h2>
<p>以上就是对分布式系统与区块链共识机制的概念和实际应用总结，之后也会对各类业界投入使用的共识算法作更深入的剖析。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://book.douban.com/subject/27127839/">区块链原理、设计与应用</a></li>
<li><a href="https://xiaomi-info.github.io/2020/01/02/distributed-transaction/">分布式事务，这一篇就够了</a></li>
<li><a href="http://anruence.com/2018/03/05/tcc-2pc-3pc/">理解 TCC、2PC 和 3PC</a></li>
<li><a href="https://tech.hyperchain.cn/gong-shi-zhuan-lan-gong-shi-de-fen-lei-shang/">【共识专栏】共识的分类（上）</a></li>
<li><a href="https://tech.hyperchain.cn/gong-shi-zhuan-lan-gong-shi-de-fen-lei-xia/">【共识专栏】共识的分类（下）</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>区块链服务平台（BaaS）简介及架构</title><link>https://www.pseudoyu.com/en/2021/09/07/blockchain_baas_platform/</link><pubDate>Tue, 07 Sep 2021 10:00:52 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/07/blockchain_baas_platform/</guid><description>前言 目前工作中负责一个针对 Hyperledger Fabric 的区块链即服务 (Blockchain as a Service, BaaS) 平台的链码管理部分，对这 BaaS 平台的架构与实现很感兴趣，作为一个能为开发者提供一站式应用创</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>目前工作中负责一个针对 Hyperledger Fabric 的区块链即服务 (Blockchain as a Service, BaaS) 平台的链码管理部分，对这 BaaS 平台的架构与实现很感兴趣，作为一个能为开发者提供一站式应用创建、管理和维护区块链的平台，其架构是怎么样的呢？</p>
<p>本文是对 BaaS 平台架构的总结和梳理。</p>
<h2 id="baas-简介">BaaS 简介</h2>
<p>区块链是一个复杂的分布式系统，尤其是像 Hyperledger Fabric 这样的企业联盟链平台，其部署和运维都非常复杂，作为应用开发者需要处理许多环境问题（如证书、docker 环境等），带来了许多挑战。</p>
<p>因此，BaaS 平台应运而生，它是一种帮助用户创建、管理和维护企业级区块链的应用平台，用户能够通过友好的 Web 界面对区块链进行操作。通过 BaaS 平台，用户可以很灵活地搭建区块链网络、管理区块链业务和各个模块的功能、进行智能合约的研发和部署以及实时监控和运维。</p>
<p>通过 BaaS 平台，开发者可以快速进行区块链业务的研发，综合成本大大降低，且有助于系统稳定性、安全性和易用性等的提升。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/baas_framework.svg" alt="baas_framework"></p>
<h2 id="平台架构">平台架构</h2>
<p>BaaS 平台作为一个一站式应用服务，自下而上主要分为以下几层：</p>
<ol>
<li>资源层</li>
<li>监控运维层</li>
<li>区块链底层</li>
<li>区块链服务层</li>
<li>应用层</li>
</ol>
<p>而根据每个系统的业务差异，各个层的架构与功能模块会有所差异，下面将会对几大主流平台层次结构做一些描述。</p>
<h3 id="hyperledger-cello">Hyperledger Cello</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_cello_overview.png" alt="hyperledger_cello_overview"></p>
<p><a href="https://github.com/hyperledger/cello">Hyperledger Cello</a> 作为 IBM Hyperledger 的顶级项目之一，是一个开源区块链管理平台，支持部署、运行时管理和数据分析等功能。</p>
<p>Cello 目前支持 Hyperledger Fabric 区块链，可以有效管理 Fabric 链的生命周期，主要包含以下模块：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_cello_architecture.png" alt="hyperledger_cello_architecture"></p>
<p>除了高效地创建部署网络外，Cello 提供了一些对于区块链的管理功能：</p>
<ul>
<li>区块链生命周期管理</li>
<li>底层支持多种架构，如 Docker、Swarm、Kubernetes 等</li>
<li>支持多种底层区块链平台并可以自定义配置</li>
<li>支持运行时监控与运维</li>
<li>可插拔的框架设计，可以通过插件的形式拓展第三方功能，如资源调度、驱动代理等</li>
</ul>
<h3 id="趣链-baas">趣链 BaaS</h3>
<p>根据官网介绍，BlocFace 是由趣链科技为企业及开发者全新推出的区块链服务平台，为用户提供一键部署联盟链、可视化监控运维和智能合约研发等一站式研发服务，其平台架构如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperchain_baas.png" alt="hyperchain_baas"></p>
<h2 id="总结">总结</h2>
<p>以上就是对区块链服务平台 (BaaS) 的简介及架构分析，因为目前的 Leader 是 Hyperledger Cello 的项目发起人和核心开发者，鼓励我积极参与 Cello 的开源建设，要加油啦！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://book.douban.com/subject/27127839/">区块链原理、设计与应用</a></li>
<li><a href="https://github.com/hyperledger/cello">Hyperledger Cello 项目地址</a></li>
<li><a href="https://www.hyperchain.cn/products/blocface">BlocFace 官网</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>跨链技术原理与实战</title><link>https://www.pseudoyu.com/en/2021/09/06/blockchain_crosschain/</link><pubDate>Mon, 06 Sep 2021 15:34:40 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/06/blockchain_crosschain/</guid><description>前言 目前区块链底层平台日渐多样，如老牌的 Hyperledger Fabric、Ethereum 等，以及国内的 Hyperchain、Z-ledger 等，而随着区块链</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>目前区块链底层平台日渐多样，如老牌的 Hyperledger Fabric、Ethereum 等，以及国内的 Hyperchain、Z-ledger 等，而随着区块链应用生态越来越复杂，单链的性能有一定瓶颈，链与链之间的协同与交互（信息同步、共享、合约互操作等）也成为了链和应用生态发展的重要部分。</p>
<p>本文是对跨链技术的概念与主流解决方案的梳理。</p>
<h2 id="跨链技术概览">跨链技术概览</h2>
<p>因为底层链设计、共识算法、网络结构等组件的相似性，同构区块链之间的交互比较容易，但异构区块链则相对复杂，往往难以直接进行交互，而需要两条链之间有一些辅助平台/服务来进行数据格式转换等。</p>
<h3 id="跨链机制">跨链机制</h3>
<p>目前跨链主要由以下几种解决方案：</p>
<ol>
<li>公证人机制</li>
<li>哈希锁定</li>
<li>分布式私钥控制</li>
<li>侧链/中继链</li>
</ol>
<h4 id="公证人机制">公证人机制</h4>
<p>公证人机制是一种通过第三方中介协助不同链之间交互的机制，本质上是两方共同信任一个第三方，让其对跨链数据或跨链交互操作进行验证和转发。这种方式能很好地支持异构区块链，但是是一种中心化方式。</p>
<p>很多数字货币交易所就是通过这样的方式进行不同数字货币之间的交易和转换，本质上是交易所在撮合交易，效率等都较高，但是存在一定安全风险，且只支持资产的交换。</p>
<h4 id="哈希锁定">哈希锁定</h4>
<p>哈希锁定最早出现在比特币的闪电网络，是通过哈希锁和时间锁保障跨链双方资产的一种方式。其中时间锁是将交易限制在一定时间内，超时则交易失效，从而避免损失，但这种方式同样只能实现资产的交换，而无法实现资产的转移。</p>
<h4 id="侧链">侧链</h4>
<p>侧链是一种双向锚定的技术，最开始的侧链是相对于比特币主链而言的，如 BTC-Relay，在这条侧链上可以对比特币进行新特性的研发和测试，且当大量用户在比特币网络上进行交易时，使用侧链可以有效地拓展网络的吞吐量。例如，在 Ethereum 主链上进行资产交易和价值转移，而在 Ethereum 侧链上可以进行一些对 tps 要求较高的 DApp 运行等。</p>
<p>而同一条主链的不同侧链也可以借助主链来进行一些交互，这就是借助测链进行跨链的基本原理。</p>
<h4 id="中继链">中继链</h4>
<p>中继链则是上述侧链和公证人机制的一种综合应用，通过设定跨链交互机制（如 Cosmos 的 IBC）来实现异构链之间的信息共享与交互。需要进行跨链的各个平行链连接到一个中继链来辅助交易的验证和交互。</p>
<h2 id="跨链技术实践">跨链技术实践</h2>
<h3 id="开发实战">开发实战</h3>
<p>目前在做一个 BaaS 平台的跨链功能，其基础架构如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cross_chain_framework.svg" alt="cross_chain_framework"></p>
<p>子链主要是实现各类业务和应用的链，当子链要与其他链进行跨链业务交互时，它需要执行跨链合约，而我们提供了一个跨链网关来对这些跨链合约进行监听。针对异构区块链。如 Hyperledger Fabric、Ethereum，我们将提供不同的适配器来实现跨链 SDK 与跨链网关之间的交互，适配器提供跨链合约信息查询功能。当另一条业务链的 SDK 接收到跨链合约方法时，如果是合约互调用或数据传递，则直接调用对应的合约方法。</p>
<p>我主要做的是跨链适配器接口这一部分，适配器作为针对不同链的插件嵌入跨链网关中从而适配不同的应用链，能够很好地协助跨链网关实现对交易的监听、同步与执行。</p>
<p>而在具体实现中，如在 Fabric 网络中，则是通过子链调用跨链业务合约，而跨链业务合约统一调用一个适配器的合约，在这个适配器合约中，我们实现了交易信息传入，通过 Fabric 事件机制来进行监听（即在合约中实现 <code>SetEvent</code> 方法，而在适配器中对相应事件进行注册，从而实现对跨链合约的监听。</p>
<p>关于 Fabric 事件监听相关细节及实现详情见 《<a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析</a>》。</p>
<h3 id="功能拓展">功能拓展</h3>
<p>目前趣链科技的 <a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub 跨链平台</a>是业界实现得比较完善的开源跨链解决方案，其架构如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/bitxhub_structure.png" alt="bitxhub_structure"></p>
<p>主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了优化，并且设计了 IBTP 链间通用传输协议配合“网关+中继链”的架构来解决跨链交易中的验证、路由等问题。</p>
<h2 id="总结">总结</h2>
<p>以上就是对跨链技术的概念梳理与实战总结，为了对跨链机制的各个环节有更深入的了解，之后也将会对目前正在做的跨链服务和 BitXHub 平台进行更深入的剖析和源码解读。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://tech.hyperchain.cn/blockchain-interoperability/">关于跨链技术的分析和思考</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/92667917">跨链的简要研究：从原理到技术</a></li>
<li><a href="https://github.com/gocn/opentalk/tree/main/PhaseTen_BitXHub">跨链技术平台 BitXHub</a></li>
<li><a href="https://yuanxuxu.com/2020/08/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B7%A8%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%93%88%E5%B8%8C%E6%97%B6%E9%97%B4%E9%94%81/">区块链跨链技术之哈希时间锁</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析</a></li>
<li><a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub Document</a></li>
<li><a href="https://tech.hyperchain.cn/bitxhub-design-thinking/">十问 BitXHub:谈谈跨链平台的架构设计</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>[译] Go sync.Once 的妙用</title><link>https://www.pseudoyu.com/en/2021/09/02/go_concurrency_sync_once/</link><pubDate>Thu, 02 Sep 2021 13:31:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/02/go_concurrency_sync_once/</guid><description>前言 如果你曾用过 Go 中的 goroutines，你也许会遇到几个并发原语，如 sync.Mutex, sync.WaitGroup 或是 sync.Map，但是你听说过 sync.Once 么？ 也许你听说过，那 go 文档是</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>如果你曾用过 Go 中的 goroutines，你也许会遇到几个并发原语，如 <code>sync.Mutex</code>, <code>sync.WaitGroup</code> 或是 <code>sync.Map</code>，但是你听说过 <code>sync.Once</code> 么？</p>
<p>也许你听说过，那 go 文档是怎么描述它的呢？</p>
<blockquote>
<p>Once 是只执行一个操作的对象。</p>
</blockquote>
<p>听起来很简单，它有什么用处呢？</p>
<p>由于某些原因，<code>sync.Once</code> 的用法并没有很好的文档记录。在第一个<code>.Do</code>中的操作执行完成前，将一直处于等待状态，这使得在执行较昂贵的操作（通常缓存在 map 中）时非常有用。</p>
<h2 id="原生缓存方式">原生缓存方式</h2>
<p>假设你有一个热门的网站，但它的后端 API 访问不是很快，因此你决定将 API 结果通过 map 缓存在内存中。以下是一个基本的解决方案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QueryClient</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cache</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mutex</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">QueryClient</span><span class="p">)</span> <span class="nf">DoQuery</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查结果是否已缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">cached</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">cached</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果未缓存则发出请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://upstream.api/?query=&#34;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">.</span><span class="nf">QueryEscape</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将结果存储在缓存中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>看起来不错，对吧？</p>
<p>然而，如果有两个 <code>DoQuery</code> 同时进行调用会发生什么呢？竞争。两方缓存都无法命中，并且都会向 <code>upstream.api</code> 执行不必要的 HTTP 请求，而只有一个需要完成这个请求。</p>
<h2 id="不美观但更好的缓存方式">不美观但更好的缓存方式</h2>
<p>我并没有进行统计，但我认为大家解决这个问题的另外一种方式是使用 channel、context 或 mutex。在这个例子中，可以将上文代码调整为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CacheEntry</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="nx">wait</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QueryClient</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cache</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">CacheEntry</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mutex</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">QueryClient</span><span class="p">)</span> <span class="nf">DoQuery</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查操作是否已启动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">cached</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">&lt;-</span><span class="nx">cached</span><span class="p">.</span><span class="nx">wait</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">cached</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">entry</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">CacheEntry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">data</span><span class="p">:</span> <span class="nx">result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">wait</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">entry</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果未缓存，则发出请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://upstream.api/?query=&#34;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">.</span><span class="nf">QueryEscape</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">entry</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 关闭 channel，传递操作完成信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 立即返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nb">close</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">data</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这种方案不错，但代码的可读性受到了很大影响。<code>cached.wait</code> 进行了哪些操作不是很清晰，在不同情况下的操作流也并不直观。</p>
<h2 id="使用-synconce">使用 <code>sync.Once</code></h2>
<p>我们来尝试一下使用 <code>sync.Once</code> 方案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CacheEntry</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="nx">once</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QueryClient</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cache</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">CacheEntry</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mutex</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">QueryClient</span><span class="p">)</span> <span class="nf">DoQuery</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">entry</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">!</span><span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果在缓存中未找到，创建新的 entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">entry</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">CacheEntry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">once</span><span class="p">:</span> <span class="nb">new</span><span class="p">(</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">c</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">entry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 现在，当我们调用 .Do 时，如果有一个正在同步进行的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 它将一直阻塞，直到完成（并填充 entry.data）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 或者如果操作之前已经完成过一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 本次调用不会进行操作，也不会阻塞
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">entry</span><span class="p">.</span><span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;https://upstream.api/?query=&#34;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">.</span><span class="nf">QueryEscape</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">entry</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">data</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以上就是 <code>sync.Once</code> 的方案，和之前的示例很相似，但现在更容易理解（至少在我看来）。只有一个返回值，且代码自上而下，非常直观，而不必像之前一样对 <code>entry.wait</code> channel 进行阅读和理解。</p>
<h2 id="进一步阅读其他注意事项">进一步阅读/其他注意事项</h2>
<p>另一个类似于 <code>sync.Once</code> 的机制是 <a href="https://pkg.go.dev/golang.org/x/sync/singleflight">golang.org/x/sync/singleflight</a>。<code>singleflight</code> 只会删除正在进行中的请求中的重复请求（即不会持久化缓存），但与 <code>sync.Once</code> 相比，<code>singleflight</code> 通过 context 实现起来可能更简洁（通过使用 <code>select</code> 和 <code>ctx.Done()</code>），并且在生产环境中，可以通过 context 取消这一点很重要。<code>singleflight</code> 实现的模式和 <code>sync.Once</code> 十分接近，但如果 map 中存有值，则会提前返回。</p>
<p><a href="https://github.com/golang/go/issues/25312#issuecomment-387800105">ianlancetaylor</a> 建议结合 context 使用 <code>sync.Once</code>，方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctxt</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="文章信息">文章信息</h2>
<blockquote>
<ol>
<li><a href="https://blog.chuie.io/posts/synconce/">原文地址</a></li>
<li><a href="https://github.com/gocn/translator/blob/master/2021/w34_the_underutilized_usefulness_of_sync_Once.md">本文永久链接</a></li>
<li><a href="https://github.com/gocn/translator">GoCN &lt;每周译 Go&gt;</a></li>
<li><a href="https://github.com/pseudoyu">译者：张宇</a></li>
<li><a href="https://github.com/Cluas">校对：Cluas</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Hyperledger Fabric Go SDK 事件分析</title><link>https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</link><pubDate>Wed, 01 Sep 2021 17:21:58 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</guid><description>前言 最近在做跨链适配器，需要在一条本地链上利用 Go SDK 来连接 fabric 网络，并监听事件，所以对 fabric 所支持的事件与 SDK 所提供的监听方法做一下汇总。 Fabric 事件 事件是</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近在做跨链适配器，需要在一条本地链上利用 Go SDK 来连接 fabric 网络，并监听事件，所以对 fabric 所支持的事件与 SDK 所提供的监听方法做一下汇总。</p>
<h2 id="fabric-事件">Fabric 事件</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_application_interact.png" alt="hyperledger_fabric_application_interact"></p>
<p>事件是客户端与 Fabric 网络进行交互的一种方式，如上图所示，Fabric 网络中执行一个交易后，因为是异步进行的，所以客户端无法获取提交的交易状态（是否被接受），因此，Fabric 的 Peer 节点提供了事件机制，客户端可以通过 gRPC 接口来监听区块事件。从 fabric v1.1 开始，时间的注册发生在通道级别而不是 Peer 节点，因此可以进行更精细的控制</p>
<h3 id="事件类型">事件类型</h3>
<p>事件主要由 Ledger 和存有链码合约的容器触发。Fabric 共支持四种事件形式：</p>
<ol>
<li>BlockEvent 监控新增到 fabric 上的块时使用</li>
<li>ChaincodeEvent 监控链码中发布的事件时使用，也就是用户自定义事件</li>
<li>TxStatusEvent 监控节点上的交易完成时使用</li>
<li>FilteredBlockEvent 监控简要的区块信息</li>
</ol>
<p>在 Fabric Go SDK 中则通过以下几种事件监听器进行操作</p>
<ol>
<li><code>func (c *Client) RegisterBlockEvent(filter ...fab.BlockFilter) (fab.Registration, &lt;-chan *fab.BlockEvent, error)</code></li>
<li><code>func (c *Client) RegisterChaincodeEvent(ccID, eventFilter string) (fab.Registration, &lt;-chan *fab.CCEvent, error)</code></li>
<li><code>func (c *Client) RegisterFilteredBlockEvent() (fab.Registration, &lt;-chan *fab.FilteredBlockEvent, error)</code></li>
<li><code>func (c *Client) RegisterTxStatusEvent(txID string) (fab.Registration, &lt;-chan *fab.TxStatusEvent, error)</code></li>
</ol>
<p>而当监听完成后需要通过 <code>func (c *Client) Unregister(reg fab.Registration)</code> 来取消注册并移除事件通道</p>
<h3 id="grpc-通信">gRPC 通信</h3>
<p>SDK 与 Peer 节点通过 gRPC 进行通讯，源码见 <a href="https://github.com/hyperledger/fabric-protos/blob/main/peer/events.proto">fabric-protos/peer/events.proto</a></p>
<p>其中，定义了以下几种 message：</p>
<ol>
<li>FilteredBlock，给 FilteredBlockEvent 使用</li>
<li>FilteredTransaction 和 FilteredTransaction，给 FilteredTransactionEvent 使用</li>
<li>FilteredChaincodeAction，给 ChaincodeEvent 使用</li>
<li>BlockAndPrivateData，给私有数据使用</li>
</ol>
<p>Response 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// DeliverResponse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">message</span> <span class="nx">DeliverResponse</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">oneof</span> <span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">common</span><span class="p">.</span><span class="nx">Status</span> <span class="nx">status</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">common</span><span class="p">.</span><span class="nx">Block</span> <span class="nx">block</span> <span class="p">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">FilteredBlock</span> <span class="nx">filtered_block</span> <span class="p">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">BlockAndPrivateData</span> <span class="nx">block_and_private_data</span> <span class="p">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以及三个 gRPC 通信接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">service</span> <span class="nx">Deliver</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// then a stream of block replies is received
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">rpc</span> <span class="nf">Deliver</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Envelope</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">DeliverResponse</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// then a stream of **filtered** block replies is received
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">rpc</span> <span class="nf">DeliverFiltered</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Envelope</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">DeliverResponse</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// then a stream of block and private data replies is received
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">rpc</span> <span class="nf">DeliverWithPrivateData</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">common</span><span class="p">.</span><span class="nx">Envelope</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">DeliverResponse</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_events.svg" alt="fabric_events"></p>
<p>整个流程如上图所示，Go SDK 中通过实现一个 Dispatcher 将应用中的事件注册请求转换为事件订阅请求并通过 DeliverClient 发送给 Peer 节点，Peer 节点中的 DeliverServer 接收订阅请求，调用 deliverBlocks 进入循环，从 Ledger 读取区块并生成事件，最后发送给客户端，客户端中的 Dispatcher 又将其转换为应用订阅的事件响应。</p>
<h3 id="事件实现过程">事件实现过程</h3>
<p>实现时间过程需要两个步骤</p>
<ol>
<li>在链码中调用 <code>SetEvent</code> 方法</li>
<li>在在客户端中通过 Go SDK 实现事件监听器</li>
</ol>
<h4 id="setevent-方法">SetEvent 方法</h4>
<p>方法定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">ChaincodeStub</span><span class="p">)</span> <span class="nf">SetEvent</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">payload</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</span></span></code></pre></div><p>调用实例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">SmartContract</span><span class="p">)</span> <span class="nf">Invoke</span><span class="p">(</span><span class="nx">stub</span> <span class="nx">shim</span><span class="p">.</span><span class="nx">ChaincodeStubInterface</span><span class="p">)</span> <span class="nx">sc</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">PutState</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;unable put state (%s), error: %v&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Payload 需要转换为字节格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">eventPayload</span> <span class="o">:=</span> <span class="s">&#34;Event Information&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">payloadAsBytes</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">eventPayload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// SetEvent 方法通常位于 PutState、DelState 等与账本交互的操作之后
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stub</span><span class="p">.</span><span class="nf">SetEvent</span><span class="p">(</span><span class="s">&#34;&lt;事件名称&gt;&#34;</span><span class="p">,</span> <span class="nx">payloadAsBytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">eventErr</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;事件触发失败&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">shim</span><span class="p">.</span><span class="nf">Success</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="客户端事件监听器">客户端事件监听器</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 实现一个链码事件监听
</span></span></span><span class="line"><span class="cl"><span class="c1">// 传入相应参数，这里的 eventId 必须与链码里的 &lt;事件名称&gt; 匹配以实现监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">reg</span><span class="p">,</span> <span class="nx">eventChannel</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">eventClient</span><span class="p">.</span><span class="nf">RegisterChaincodeEvent</span><span class="p">(</span><span class="nx">chaincodeID</span><span class="p">,</span> <span class="nx">eventID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Failed to regitser block event: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 取消注册并移除事件通道 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">defer</span> <span class="nx">eventClient</span><span class="p">.</span><span class="nf">Unregister</span><span class="p">(</span><span class="nx">reg</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>以上就是通过 Go SDK 对 fabric 网络上的事件进行监听操作的基本介绍，正在看 fabric Go SDK 源码，后续将补充一些解读。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://github.com/hyperledger/fabric-sdk-go">hyperledger/fabric-sdk-go</a></li>
<li><a href="https://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go">Hyperledger Fabric Packages for Go Chaincode</a></li>
<li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/peer_event_services.html">基于通道的 Peer 节点事件服务</a></li>
<li><a href="https://github.com/hyperledger/fabric-protos/blob/main/peer/event">fabric-protos/peer/events.proto</a></li>
<li><a href="https://lessisbetter.site/2019/09/20/fabric-event-source/">Fabric 1.4 源码解读 3：事件(Event)原理解读</a></li>
<li><a href="https://www.jianshu.com/p/aecaae8aa3da">fabric 支持的事件</a></li>
<li><a href="http://blog.hubwiz.com/2019/07/07/Hyperledger-fabric-chaincode-event/">如何监听 Fabric 链码的事件</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Go 错误处理总结与实践</title><link>https://www.pseudoyu.com/en/2021/08/29/go_error_handling/</link><pubDate>Sun, 29 Aug 2021 00:19:42 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/29/go_error_handling/</guid><description>前言 最近在对极客时间毛剑老师的 Go 进阶训练营进行重温和学习汇总，这是一门比较偏向于工程化以及原理层面的的课程，涵盖的知识点非常多，因此决定开一</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近在对极客时间毛剑老师的 Go 进阶训练营进行重温和学习汇总，这是一门比较偏向于工程化以及原理层面的的课程，涵盖的知识点非常多，因此决定开一个系列来进行记录，也便于自己总结查阅。这是系列第一篇《Go 错误处理》。</p>
<h2 id="go-错误处理机制">Go 错误处理机制</h2>
<h3 id="go-内置-errors">Go 内置 errors</h3>
<p>Go 语言中的 <code>error</code> 就是普通的一个接口，表示值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// http://golang.org/pkg/builtin/#error
</span></span></span><span class="line"><span class="cl"><span class="c1">// error 接口的定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="kt">error</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// http://golang.org/pkg/errors/error.go
</span></span></span><span class="line"><span class="cl"><span class="c1">// errors 构建 error 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">errorString</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">s</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">errorString</span><span class="p">)</span> <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>基础库中有大量自定义的 <code>error</code>，如 <code>Error: EOF</code>，而 <code>errors.New()</code> 返回的是内部 <code>errorString</code> 对象的指针。</p>
<h3 id="error-与-exception">Error 与 Exception</h3>
<p>不同于 Java、C++ 等语言，Go 处理异常的逻辑是不引入 exception，而是采取多参数返回，因此可以在函数中带入 error interface 对象来交给调用者来进行处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">handle</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">handle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>需要注意的是，Go 中有 panic 的机制，可以和 recovery 搭配实现类似于 <code>try...exception...</code> 的效果，但是 Go 中的 panic 并不等同于 exception，exception 一般是交由调用者来进行处理，而 Go panic 则是针对真正异常的情况（如索引越界、栈溢出、不可恢复的环境问题等），意味着代码不能继续运行，而不能假设调用者会来解决 panic。</p>
<p>Go 的多返回值来支持调用者进行错误处理的方式给予了开发者很大的灵活性，有如下优势</p>
<ul>
<li>简单</li>
<li>Plan for failure, not success</li>
<li>没有隐藏的控制流</li>
<li>完全交给开发者来控制 error</li>
<li>error 是值，因此有很大的灵活性进行处理</li>
</ul>
<h2 id="go-错误处理最佳实践">Go 错误处理最佳实践</h2>
<h3 id="panic">panic</h3>
<p>panic 只用于真正异常的情况，如</p>
<ul>
<li>在程序启动的时候，如果有强依赖的服务出现故障时 panic 退出</li>
<li>在程序启动的时候，如果发现有配置明显不符合要求， 可以 panic 退出（防御编程）</li>
<li>在程序入口处，例如 gin 中间件需要使用 recovery 预防 panic 程序退出</li>
</ul>
<p>因为 panic 会导致程序直接退出，而如果使用 recovery 进行处理的话性能不好且不可控。因此，其他情况下只要不是不可恢复的程序错误，都不应该直接 panic 应该返回 error，从而交给开发者。</p>
<h3 id="error">error</h3>
<p>一般我们在开发中会使用 <code>github.com/pkg/errors</code> 处理应用错误，但需要注意的是，在公共库当中，我们一般不使用。</p>
<p>在通过多返回值来判断错误时，<code>error</code> 应该是函数的最后一个返回值，而当 <code>error</code> 不是 <code>nil</code> 时，其他返回值均应该为不可用状态，不应该对它们进行额外处理，错误处理的时候也应该先判断错误，当 <code>if err != nil</code> 时及时返回错误，从而避免过多的代码嵌套。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 错误示例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">someFunc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 正确示例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">someFunc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>当程序出现错误时，一般使用 <code>errors.New</code> 或 <code>errors.Errorf</code> 返回错误值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">someFunc</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span> <span class="o">:=</span> <span class="nf">anotherFunc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">res</span> <span class="o">!=</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">errors</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;结果错误，已尝试 %d 次&#34;</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而如果是调用其他函数出现问题，则应该直接返回，如果需要携带额外信息，则使用 <code>errors.WithMessage</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">someFunc</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">anotherFunc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">WithMessage</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;other information&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用 <code>errors.Wrap</code> 添加堆栈信息。只需要在错误第一次出现时使用，且在基础库和被大量引用的第三方库编写时一般不使用，避免堆栈信息重复。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmashal</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">Wrap</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;other information&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>当需要对错误进行判断时，需要采用 <code>errors.Is</code> 进行比较</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nf">A</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>而对错误类型进行判断时则使用 <code>errors.As</code> 进行赋值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nf">A</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">errA</span> <span class="nx">errorA</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">As</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">errA</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对于业务中的错误（如输入错误等），最好在统一的一个地方建立自己的错误字典，其中应该包含错误代码并且可以在日志中作为独立字段打印，也需要有清晰的文档。</p>
<p>我们常常用日志来辅助我们进行错误处理，不需要进行返回、被忽略的错误必须输出日志，但禁止每个出错的地方都打日志。而如果同一个地方不停地报错，最好是打印一次错误详情并打印出现次数。</p>
<h2 id="总结">总结</h2>
<p>以上就是对 Go 错误处理和最佳实践的一些总结，后续也会对错误类型、错误包装以及常见的使用中遇到的坑等进行总结。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://lailin.xyz/post/go-training-03.html">Go 错误处理最佳实践</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>基于 CNFS 的区块链网络存储与优化</title><link>https://www.pseudoyu.com/en/2021/08/20/blockchain_paper_cnfs/</link><pubDate>Fri, 20 Aug 2021 09:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/20/blockchain_paper_cnfs/</guid><description>Research on Cloud Computing Processing and Optimization of Distributed Computer 前言 经过在 HKU 一年区块链相关的学习，对分布式存储这一领域产生了兴趣，毕业项目也和 IPFS 相关，详见「Uright - 区块链音乐版权</description><content:encoded><![CDATA[<h1 id="research-on-cloud-computing-processing-and-optimization-of-distributed-computer">Research on Cloud Computing Processing and Optimization of Distributed Computer</h1>
<h2 id="前言">前言</h2>
<p>经过在 HKU 一年区块链相关的学习，对分布式存储这一领域产生了兴趣，毕业项目也和 IPFS 相关，详见「<a href="https://www.pseudoyu.com/en/2021/05/10/uright_case_study/">Uright - 区块链音乐版权管理ÐApp</a>」，回内地后恰有机会和 CNFS Protocol Lab 的孙野院长合作撰写了本篇「Research on Cloud Computing Processing and Optimization of Distributed Computer（基于 CNFS 区块链的网络存储与优化）」，对分布式网络存储、计算有了更深的理解，特此记录。</p>
<p>本文被 ICCEA(2021 International Conference on Electronic, Electrical and Computer) 所收录。</p>
<h2 id="abstract">Abstract</h2>
<p>With the rapid development of network traffic, video, pictures, information will produce a lot of data, which causes the problem of computer calculation and storage. With the increasing demand for computer processing capacity, the traditional computer computing method has been unable to meet the needs of society, which is also gradually developing in the direction of Cloud Computing (hereinafter referred to as CDC) and distributed computing. Through distributed computing, the computer can decompose a large task into many small tasks, which can be distributed to different computing resources. Therefore, distributed computing has become the main way of CDC processing, which can meet the existing market. At the same time, CNFS is the abbreviation of computer network file system, which is a global, point-to-point distributed version file system. Through CNFS, we can connect all the computing devices with the same file system together, which can be called the information processing system. Firstly, this paper analyzes the related concepts. Then, this paper analyzes the architecture of CDC. Finally, some suggestions are put forward.</p>
<h2 id="1-introduction">1. Introduction</h2>
<p>With the development of IT, computer information has become an indispensable part of people&rsquo;s life, which requires us to continuously improve the information computing ability [1]. Therefore, distributed computing has become the main way, which can carry out more efficient computing and processing [2]. CNFS (Computer Network File System) is a point-to-point distributed file system, which aims to replace the traditional HTTP system [3]. Therefore, CNFS has learned many lessons from the past successful systems, which has become the cornerstone of CDC and cloud storage. At the same time, CNFS will become the cornerstone of blockchain. The key technology of CDC is decentralization. However, CNFS is a perfect solution, which can play a significant role [4-6]. The decentralized technology of CNFS has been applied to many fields, which can solve many problems of the existing platform [7].</p>
<h2 id="2-related-concepts">2. Related concepts</h2>
<h3 id="21-distributed-computing">2.1 Distributed computing</h3>
<p>Distributed computing is to divide a large task into many small tasks, which can be distributed to different computing resources. A distributed system is a collection of independent computers. Therefore, the distributed computing system is just like a computer, which can effectively solve the balance between cost, efficiency and scalability. Since the 1980s, the distributed computer has become the focus of research, including a variety of systems, such as middleware, SOA, grid computing, web service, Hadoop platform and so on [8]. Before the emergence of CDC, grid computing is the most typical representative of distributed computing. By connecting the hardware, software and information resources scattered all over the Internet into a huge whole, grid computing can enable people to use the geographically dispersed resources, which will complete a variety of large-scale, complex computing and data processing tasks. Grid computing is an Internet level distributed computing method, which mainly uses the distributed computing resources on the Internet. Grid computing is the closest to CDC, which can achieve centralized parallel processing of large computing tasks. However, the development of grid computing technology contributes a lot, which has become the technical basis of CDC development [9]. Distributed computing is one of the most important supporting technologies of CDC. Taking Google CDC as an example, distributed computing cases mainly include distributed data storage system GFS, distributed data management system Big Table, open source Hadoop platform, etc. In the field of PAAS and SAAS of CDC, distributed computing will be an important technology. With the method of distributed computing, we can release the binding relationship between users and large application systems. Overall, distributed computing breeds CDC. In the CDC environment, distributed computing reshapes the application form and service form of CDC, which provides a simple and feasible computing method for big data applications [10].</p>
<h3 id="22-advantages-of-cnfs">2.2 Advantages of CNFS</h3>
<p>CNFS provides a new distributed Internet infrastructure. On the infrastructure, we can build many different types of applications. Therefore, CNFS is a global, mountable and versioned file system, which has many advantages [11]. First, decentralization is faster. All the data in CNFS are stored on the user&rsquo;s own computer, which is equivalent to distributing the central server of HTTP to each user. If other users want to get the data, they can extract it from the nearest user&rsquo;s computer. Second, reduce the dependence on the backbone. The transmission means of CNFS is obviously different from that of HTTP. HTTP mainly depends on the backbone network [12-14]. CNFS is mainly transmitted through nodes, which can be transmitted from one node to another. Therefore, CNFS can switch another node immediately even if one node fails. Third, permanent data storage. The storage mode of CNFS is very special, which is a fragmented storage mode. CNFS data can be divided into many parts, which leads to people can not get complete data. Therefore, data can be saved safely and permanently [15].</p>
<h2 id="3-cdc-processing">3. CDC processing</h2>
<h3 id="31-k-nearest-neighbor-method">3.1 K-nearest neighbor method</h3>
<p>K-nearest neighbor (KNN) is a typical ranking classification algorithm. After one judgment, the sorting algorithm can output documents belonging to multiple categories. Through KNN, we can calculate the similarity of each text in the training sample set, which can find k most similar training texts. At the same time, we can select a threshold, which can be sorted according to the score. The similarity between k nearest neighbor training samples and the test sample is shown in Formula 1. K neighbors calculate the weight of each class, as shown in formula 2.</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cnfs_knn_formula.png" alt="cnfs_knn_formula"></p>
<h3 id="32-cdc-architecture">3.2 CDC architecture</h3>
<p>CDC can provide elastic resources on demand, which is a collection of services. The architecture of CDC can be divided into three levels: core service, service management and user access interface, as shown in Figure 1.</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cnfs_cdc_architecture.png" alt="cnfs_cdc_architecture"></p>
<h3 id="33-file-storage-verification-scheme">3.3 File storage verification scheme</h3>
<p>File storage verification scheme is the basis for service providers to prove the integrity of their stored data to service consumers. After each service, the service information will be written into the blockchain. Therefore, CDC has become an important computing and storage mode of blockchain. The file storage method is shown in Figure 2.</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cnfs_block_structure.png" alt="cnfs_block_structure"></p>
<h2 id="4-important-technologies-of-cdc">4. Important technologies of CDC</h2>
<h3 id="41-location-service-based-on-mobile-cloud">4.1 Location service based on mobile cloud</h3>
<p>As an indispensable supporting technology of mobile CDC, location-based services can provide a variety of location-based services around the architecture of location-based services, such as mainstream location technology, location index, query processing and so on. Location services based on traditional positioning technologies such as GPS cover a wide range, which has been widely used in many fields, such as military, transportation and so on. However, GPS has many problems, such as weak penetration, high positioning energy consumption and so on, which can not fully meet the requirements of new mobile applications such as accurate indoor positioning and user action recognition. Through CDC, we can complete location services of mobile cloud, such as automatic shopping guide service, patient monitoring in smart home, etc. Mobile CDC model has been used to build new location services, which can solve and form an important supporting technology.</p>
<h3 id="42-energy-saving-technology-of-mobile-terminal">4.2 Energy saving technology of mobile terminal</h3>
<p>The battery capacity of mobile terminals is growing slowly, and the contradiction between the rapid and rich mobile applications and the limited power of mobile terminals is becoming increasingly prominent. Through CDC, we can achieve energy saving in many aspects, such as data transmission energy saving. The proportion of wireless data transmission energy consumption in the energy consumption of mobile terminals is also increasing. Through cellular network transmission data, we can usually use RRC protocol for the whole process of mobile terminal energy consumption measurement. The results show that there is too much tail energy consumption in the process of data transmission, which reduces the energy utilization of mobile terminals. By changing the time threshold of tail energy consumption, we can reduce the number and time of jumping to the tail energy consumption state. Through transmission scheduling, we can reduce the tail energy consumption. Through the virtual ending mechanism and double queue scheduling algorithm, we can schedule the prefetch data and delay transmission, which can adjust the time threshold.</p>
<h3 id="43-data-security-and-privacy-protection">4.3 Data security and privacy protection</h3>
<p>While obtaining rich services of CDC, mobile users will face more security threats such as privacy exposure. This requires us to strengthen the data security and privacy protection of CDC. In mobile CDC environment, users&rsquo; data and computing tasks migrate through wireless network, which can realize and support online query, multi-user data sharing and so on. In view of the limited computing resources and mobility of mobile terminals, cloud authentication platform can avoid the degradation of service performance caused by multi-user parallel access. Through a series of new cryptographic mechanisms, we can choose between encryption and attribute based encryption. By introducing an access structure to associate ciphertext or user private key with attributes, we can flexibly represent access control policies, which can provide fine-grained access authorization for data.</p>
<h2 id="5-conclusion">5. Conclusion</h2>
<p>At present, CDC has become an important way of data processing and storage, which can optimize decentralization and other measures. CNFS is a new application based on HTTP, which is an attempt of new technology. Therefore, distributed computing will become the main computing method of computer in the future, which can improve a variety of IT.</p>
<h2 id="references">References</h2>
<blockquote>
<p>[1]	Cui Yong, Song Jian, Miao congcongcong, Tang Jun. research progress and trend of mobile CDC [J]. Acta computer Sinica, 2017, 40 (02): 273-295.</p>
</blockquote>
<blockquote>
<p>[2]	Ding Jian, Wang Huaimin, Shi Peichang, Wu Qingbo, Dai Huadong, Fu Hongyi. Trusted cloud service [J]. Acta computa Sinica, 2015, 38 (01): 133-149.</p>
</blockquote>
<blockquote>
<p>[3]	Li Jia. Intelligent logistics model reconstruction based on big data CDC [J]. China&rsquo;s circulation economy, 2019, 33 (02): 20-29.</p>
</blockquote>
<blockquote>
<p>[4]	Lu Xiaobin, Wang Jianya. Analysis of the current situation of CDC Adoption Behavior [J]. Journal of Chinese library, 2015, 41 (01): 92-111.</p>
</blockquote>
<blockquote>
<p>[5]	Lu Xiaobin, Wang Tao. Research on technical improvement and optimization of massive data analysis process by Google&rsquo;s three CDC technologies [J]. Library and information work, 2015, 59 (03): 6-11+102.</p>
</blockquote>
<blockquote>
<p>[6]	Pengxiaosheng, dengdiyuan, chengshijie, wenjinyu, Li Chaohui, Niulin. Key technologies of power big data for smart grid application [J]. Journal of China Electric Engineering, 2015, 35 (03): 503-511.</p>
</blockquote>
<blockquote>
<p>[7]	Qin Rongsheng. Research on the impact of big data and CDC technology on audit [J]. Audit research, 2014 (06): 23-28.</p>
</blockquote>
<blockquote>
<p>[8]	Shi Weisong, zhangxingzhou, wangyifan, zhangqingyang. Edge calculation: present situation and Prospect [J]. Computer research and development, 2019, 56 (01): 69-89.</p>
</blockquote>
<blockquote>
<p>[9]	Shi Weisong. Edge computing: a new computing model in the era of Internet of things [J]. Computer research and development, 2017, 54 (05): 907-924.</p>
</blockquote>
<blockquote>
<p>[10]	Sun Lei, Hu Xuelong, ZhangXiaobin, Li Yun. CDC solutions for biomedical big data processing [J]. Journal of electronic measurement and instruments, 2014, 28 (11): 1190-1197.</p>
</blockquote>
<blockquote>
<p>[11]	Wang Guiling, Han Yanbo, Zhang Zhongmei, Zhu Meiling. Stream data integration and service based on CDC [J]. Acta computa Sinica, 2017, 40 (01): 107-125.</p>
</blockquote>
<blockquote>
<p>[12]	Wang Yu Ding, Yang Jia Hai, Xu Cong, Ling Xiao, Yang Yang. Overview of CDC access control technology [J]. Acta software Sinica, 2015, 26 (05): 1129-1150.</p>
</blockquote>
<blockquote>
<p>[13]	Xu Baomin, Ni Xuguang. Development trend and key technology progress of CDC [J]. Chinese Academy of Sciences, 2015, 30 (02): 170-180.</p>
</blockquote>
<blockquote>
<p>[14]	Yang Qingfeng. Key technology prediction and strategic selection in CDC era [J]. Journal of Chinese Academy of Sciences, 2015, 30 (02): 148-161+169.</p>
</blockquote>
<blockquote>
<p>[15]	Zhou Yuezhi, Zhang Di. Near end CDC: opportunities and challenges in the post CDC era [J]. Acta computa Sinica, 2019, 42 (04): 677-700.</p>
</blockquote>
]]></content:encoded></item><item><title>Ethereum MPT（Merkle Patricia Tries）详解</title><link>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</link><pubDate>Mon, 16 Aug 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</guid><description>前言 最近接到了一个工作任务，将项目智能合约状态树中的数据结构从红黑树改为字典树，并对比一下两个数据结构的性能，Trie 主要参照的是 Ethereum 官方的 Java</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近接到了一个工作任务，将项目智能合约状态树中的数据结构从红黑树改为字典树，并对比一下两个数据结构的性能，Trie 主要参照的是 Ethereum 官方的 Java 实现 <a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj</a>，而红黑树则是自己实现，本文则是对两个数据结构的理论和实际表现对比的记录。</p>
<h2 id="数据结构">数据结构</h2>
<h3 id="red-black-tree---红黑树">Red-Black Tree - 红黑树</h3>
<p>红黑树是一种近似平衡的二叉查找树，含有红黑结点，能够确保任何一个结点的左右子树高度差小于两倍。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/red_black_tree_2.png" alt="red_black_tree_2"></p>
<h4 id="性质">性质</h4>
<p>必须满足以下五个性质：</p>
<ol>
<li>结点为红色或黑色</li>
<li>根结点为黑色</li>
<li>叶子结点（NIL）为黑色</li>
<li>每个红色节点的两个子结点为黑色</li>
<li>任意一个结点到每个叶子结点的路径都包含相同数量的黑色结点</li>
</ol>
<p>红黑树并不是完美平衡的，但是左子树和右子树的层数是相等的，因此，也成为黑色完美平衡。因为是近似平衡的，所以旋转的频次会降低，维护成本下降，时间复杂度维持在 LogN。</p>
<h4 id="操作">操作</h4>
<p>红黑树主要通过三种操作来保持自平衡：</p>
<ul>
<li>左旋</li>
<li>右旋</li>
<li>变色</li>
</ul>
<h4 id="与-avl-的对比">与 AVL 的对比</h4>
<ul>
<li>AVL 提供了更快的查找操作（因为完美平衡）</li>
<li>红黑树提供了更快的插入和删除操作</li>
<li>AVL 存储的结点信息更多（平衡因子与高度），因此占存储空间更大</li>
<li>读操作多、写操作少的时候用 AVL 更合适，多用于数据库；当写操作较多时一般使用红黑树，简洁好实现，多用于各类高级语言的库中，如 map、set 等</li>
</ul>
<h4 id="代码实现">代码实现</h4>
<p>因为红黑树较为复杂，实现代码上传至 GitHub 供学习查看。</p>
<p><a href="https://github.com/pseudoyu/RedBlackTree-java">pseudoyu/RedBlackTree-Java</a></p>
<h3 id="trie---字典树">Trie - 字典树</h3>
<p>Trie 被称为字典树，又称单词查找树或键树，常用于统计和排序大量的字符串，如搜索引擎的文本磁盘统计等。</p>
<p>它能够最大限度减少无谓的字符串比较，查询效率较高。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/trie_structure.png" alt="trie_structure"></p>
<h4 id="性质-1">性质</h4>
<ol>
<li>结点不存完整单词</li>
<li>从根结点到某一结点，路径上经过的字符连接起来为该结点对应的字符串</li>
<li>每个结点的所有子结点路径代表的字符都不相同</li>
<li>结点可以存储额外信息，如词频等</li>
</ol>
<h4 id="结点内部实现">结点内部实现</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/trie_nodes.png" alt="trie_nodes"></p>
<p>字典树的高度较低，但占用的存储空间较大，核心思想是空间换时间。</p>
<p>利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的，可以很天然地解决单词联想等业务场景。</p>
<h4 id="代码实现-1">代码实现</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Trie</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Trie</span><span class="o">[]</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isEnd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">isEnd</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Trie</span> <span class="n">node</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">ch</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span><span class="o">.</span><span class="na">isEnd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">search</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Trie</span> <span class="n">node</span> <span class="o">=</span> <span class="n">searchPrefix</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="na">isEnd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">startsWith</span><span class="o">(</span><span class="n">String</span> <span class="n">prefix</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">searchPrefix</span><span class="o">(</span><span class="n">prefix</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Trie</span> <span class="nf">searchPrefix</span><span class="o">(</span><span class="n">String</span> <span class="n">prefix</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Trie</span> <span class="n">node</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prefix</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">ch</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="modified-merkle-patricia-tries">Modified Merkle Patricia Tries</h3>
<h4 id="以太坊账户状态存储方式">以太坊账户状态存储方式</h4>
<ol>
<li>使用 Key-Value 的哈希表存储在每次出块时都会有新交易打包进块中，从而改变 merkle tree，但事实上只有一小部分账户发生改变，成本过高</li>
<li>直接用 merkle tree 存放账户，要改内容时直接改 merkle tree 也不可行，因为 merkle tree 没有提供一个高校的查找和更新方法</li>
<li>使用 sorted merkle tree 也不可行，因为新增账户产生的账户地址是随机的，需要插入重新排序</li>
</ol>
<h4 id="mpt-结构">MPT 结构</h4>
<p>利用了 Trie 结构的特点</p>
<ol>
<li>打乱顺序后 Trie 结构不变，天然排序，即使插入新值也不影响，适用于以太坊 account-base 的结构</li>
<li>具有很好的更新局部性，更新时不用遍历整棵树</li>
</ol>
<p>但是 Trie 结构比较浪费存储空间，当键值对分布稀疏时效率较低，而以太坊的账户地址是 40 位十六进制数，地址约为 2^160 种，极其稀疏（防止哈希碰撞）。</p>
<p>因此，需要对 Trie 结构进行路径压缩，也就是 Pactricia Trie，经过压缩后，树的高度明显减少，空间和效率都得到提升。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pactricia_trie.png" alt="pactricia_trie"></p>
<h4 id="modified-mpt-结构">Modified MPT 结构</h4>
<p>而以太坊真正采用的是 Modified MPT 结构，其结构如下</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/modified_merkle_pactricia_trie.png" alt="modified_merkle_pactricia_trie"></p>
<p>每次发布新的区块时，状态树中的新节点的值会发生变化，并不是更改原值，而是新建一些分支，保留原来的状态（因此可以实现回滚）。</p>
<p>在以太坊系统中，分叉是常态，orphan block 中的数据都要向前回滚，而由于 ETH 中有智能合约，为了支持智能合约的回滚，必须保持之前的状态。</p>
<h4 id="代码实现-2">代码实现</h4>
<p>代码参照以太坊的 Java 实现。</p>
<p><a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj - GitHub</a></p>
<h2 id="总结">总结</h2>
<p>以上就是对<code>Ethereum MPT</code> 与红黑树数据结构的解析，在刷 LeetCode 痛苦的时候想过很多次这些学了也用不到，没想到那么快就有了应用场景，还是要好好理解和实践呀！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.jianshu.com/p/e136ec79235c">30 张图带你彻底理解红黑树</a></li>
<li><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/">LeetCode 实现 Trie</a></li>
<li><a href="https://github.com/pseudoyu/RedBlackTree-java">pseudoyu/RedBlackTree-Java</a></li>
<li><a href="https://segmentfault.com/a/1190000016050921">以太坊源码分析 &ndash; MPT 树</a></li>
<li><a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>LeetCode 刷题常用数据结构（Go 篇）</title><link>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</link><pubDate>Sat, 29 May 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</guid><description>前言 最近重新开始用 Go 刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近重新开始用 Go 刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数据结构和操作并不多，熟练使用也能很好地提升自己的代码质量，特此做一个整理，以便于查阅。</p>
<h2 id="数据结构">数据结构</h2>
<h3 id="数组">数组</h3>
<h4 id="初始化">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 初始化一个大小为10，默认值为0的数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">nums</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个二位boolean数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">visited</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([</span><span class="mi">5</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="常用方法">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问num[i]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="字符串-string">字符串 String</h3>
<h4 id="初始化-1">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">s1</span> <span class="o">:=</span> <span class="s">&#34;hello world&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建多行字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s2</span> <span class="o">:=</span> <span class="s">`This is a
</span></span></span><span class="line"><span class="cl"><span class="s">multiline
</span></span></span><span class="line"><span class="cl"><span class="s">string.`</span>
</span></span></code></pre></div><h4 id="访问字符串">访问字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 可直接用索引访问字节（非字符）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s1</span> <span class="o">:=</span> <span class="s">&#34;hello world&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">first</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">s2</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">first</span> <span class="o">:=</span> <span class="nx">s2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span></code></pre></div><h4 id="修改字符串">修改字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 字符串的值是不可变的，可以分配一个新字符串值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s</span> <span class="o">:=</span> <span class="s">&#34;hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">t</span> <span class="o">:=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将字符串转为[]byte或[]rune可以进行修改
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s1</span> <span class="o">:=</span> <span class="s">&#34;hello world&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;H&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s3</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s2</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="查询字符是否属于特定字符集">查询字符是否属于特定字符集</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="c1">// 判断字符串s的i索引位置字符是否是元音
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">&#34;aeiouAEIOU&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span></code></pre></div><h4 id="判断字符串大小">判断字符串大小</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">s1</span> <span class="o">==</span> <span class="nx">s2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 不相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Compare 函数可以用于比较，1大于，0相等，-1小于
</span></span></span><span class="line"><span class="cl"><span class="c1">// EqualFold 函数忽略大小写后比较
</span></span></span></code></pre></div><h4 id="拼接字符串">拼接字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 支持直接用+进行连接，但是效率不高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s1</span> <span class="o">:=</span> <span class="s">&#34;hello &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span> <span class="o">:=</span> <span class="nx">s1</span> <span class="o">+</span> <span class="s">&#34;world&#34;</span>
</span></span></code></pre></div><h4 id="高效拼接字符串">高效拼接字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// bytes.Buffer可以一次性连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">b</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl"><span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;Hello &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;World&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">b1</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 多个字符串拼接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">strs</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">strs</span><span class="p">,</span> <span class="s">&#34;World&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="整型-或任意数据类型-转为字符串">整型 (或任意数据类型) 转为字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Itoa转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">i</span> <span class="o">:=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="nx">t</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Sprintf转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">i</span> <span class="o">:=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="nx">t</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="切片-slice">切片 slice</h3>
<h4 id="初始化-2">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 初始化一个存储String类型的切片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">slice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个存储int类型的切片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">slice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span>
</span></span></code></pre></div><h4 id="常用方法-1">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 判断是否为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">slice</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">len</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 访问索引元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">slice</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在尾部添加元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">slice</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">slice</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="通过切片模拟栈和队列">通过切片模拟栈和队列</h3>
<h4 id="栈">栈</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 创建栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// push压入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// pop弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">v</span> <span class="o">:=</span> <span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">stack</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span> <span class="p">=</span> <span class="nx">stack</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nx">stack</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 检查栈空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">len</span><span class="p">(</span><span class="nx">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span></code></pre></div><h4 id="队列">队列</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 创建队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">queue</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// enqueue入队
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">queue</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// dequeue出队
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">v</span> <span class="o">:=</span> <span class="nx">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">queue</span> <span class="p">=</span> <span class="nx">queue</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 长度0为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">len</span><span class="p">(</span><span class="nx">queue</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span></code></pre></div><h3 id="map">Map</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置kv
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">m</span><span class="p">[</span><span class="s">&#34;hello&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 删除k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 遍历
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// map键需要可比较，不能为slice、map、function
</span></span></span><span class="line"><span class="cl"><span class="c1">// map值都有默认值，可以直接操作默认值，如：m[age]++ 值由0变为1
</span></span></span><span class="line"><span class="cl"><span class="c1">// 比较两个map需要遍历，其中的kv是否相同，因为有默认值关系，所以需要检查val和ok两个值
</span></span></span></code></pre></div><h3 id="标准库">标准库</h3>
<h4 id="sort">sort</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// int排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">([]</span><span class="kt">int</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 字符串排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">([]</span><span class="kt">string</span><span class="p">{})</span>
</span></span></code></pre></div><h4 id="math">math</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// int32 最大最小值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt32</span>
</span></span><span class="line"><span class="cl"><span class="nx">math</span><span class="p">.</span><span class="nx">MinInt32</span>
</span></span><span class="line"><span class="cl"><span class="c1">// int64 最大最小值（int默认是int64）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt64</span>
</span></span><span class="line"><span class="cl"><span class="nx">math</span><span class="p">.</span><span class="nx">MinInt64</span>
</span></span></code></pre></div><h4 id="copy">copy</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 删除a[i]，可以用 copy 将i+1到末尾的值覆盖到i,然后末尾-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">:],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// make创建长度，则通过索引赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">a</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">=</span> <span class="nx">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// make长度为0，则通过append()赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">a</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="类型转换">类型转换</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// byte转数字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s</span> <span class="p">=</span> <span class="s">&#34;12345&#34;</span>  <span class="c1">// s[0] 类型是byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">num</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">str</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">// &#34;1&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">b</span> <span class="o">:=</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">num</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="c1">// &#39;1&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d%s%c\n&#34;</span><span class="p">,</span> <span class="nx">num</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">// 111
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 字符串转数字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">num</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>刷题路漫漫&hellip;加油！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://leetcode.com">LeetCode 官网</a></li>
<li><a href="https://github.com/greyireland/algorithm-pattern">greyireland/algorithm-pattern</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Uright - 区块链音乐版权管理ÐApp</title><link>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</link><pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</guid><description>Uright - 区块链音乐版权管理ÐApp 简介 基于 Angular+Solidity+Web3.js，应用 IPFS、ENS、Oracles 等技术，通过 Truffle 部</description><content:encoded><![CDATA[<h1 id="uright---区块链音乐版权管理ðapp">Uright - 区块链音乐版权管理ÐApp</h1>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_chain.png" alt="uright_chain"></p>
<h3 id="简介">简介</h3>
<p>基于 Angular+Solidity+Web3.js，应用 IPFS、ENS、Oracles 等技术，通过 Truffle 部署于 Ethereum 的音乐版权管理 Decentralized Application (ÐApp)。</p>
<p>Uright 去中心化应用允许音乐人（内容所有者）将他们的作品注册为&quot;Manifestations&quot;并登记至以太坊区块链。</p>
<p>&ldquo;Manifestations&quot;将音乐人的作品展现为内容片段，用以证明作者身份及所有权。这是通过&quot;Manifestations&quot;智能合约完成的，该智能合约记录显示作品内容的 IPFS 哈希、标题(计划附加元数据)以及注册时间，这些信息可以用来证明作者身份，并且内容可以从 IPFS 文件存储系统中检索到。</p>
<p>然而，仅仅注册一个&quot;Manifestations&quot;是不够的，还应提供支撑材料，否则该&quot;Manifestations&quot;将于一天后失效。这些支持材料通常由音乐人（作品上传者）注册，但任何其他人都可以添加支撑材料，支撑材料可以是任何类型的文件，如截图、PDF 文档等。&ldquo;UploadEvidences&quot;智能合约会将支撑材料上传至 IPFS 文件系统。</p>
<p>此外，&ldquo;YouTubeEvidences&quot;智能合约允许音乐人在 YouTube 等视频/音乐平台的上传简介中声明作品&quot;Manifestations&rdquo;，智能合约将自动检测作为支撑材料。</p>
<p>（开发中&hellip;）如果有其他人已经注册了音乐人的原创作品/支持材料，音乐人可以进行申诉，合约功能已实现，但在 Web 应用尚不可用。</p>
<p>（开发中&hellip;）通过 NFT 技术对音乐人作品进行代币化。</p>
<p>项目地址：<a href="https://github.com/pseudoyu/uright">GitHub</a></p>
<h3 id="架构">架构</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_architecture.png" alt="uright_architecture"></p>
<h3 id="核心技术">核心技术</h3>
<h4 id="ipfs">IPFS</h4>
<p>当音乐人使用数字文件（如.mp3 格式文件）注册自己的作品时，文件将被上传至 IPFS 且其生成的 IPFS 标识符(哈希值)用于在 Ethereum 区块链中注册作品。用户可以选择将作品上传至 IPFS 网络，也可以保持作品的私密性，设置将内容不上传至 IPFS 网络，而只生成作品哈希值。</p>
<p>用户需要保留与生成作品哈希时使用的完全相同的文件，可在以后用作拥有数字文件的证据，以便于哈希检验。IPFS 哈希值也将用于检索上传的内容。</p>
<h4 id="ethereum-naming-system-ens">Ethereum Naming System (ENS)</h4>
<p>Uright 项目集成了 ethereum-ens 包，可作用于以太坊主网、Ropsten、Rinkeby 测试网及本地测试网。ensdomains/ens 包用于设置地址名称。</p>
<h4 id="oracles">Oracles</h4>
<p>Oracle 模块集成在上传 YouTube 证据的智能合约，通过 YouTube 的视频 ID (<a href="https://www.youtube.com/watch?v=VIDEO_ID">https://www.youtube.com/watch?v=VIDEO_ID</a>) 来检索该视频描述中是否含有特定作品哈希。</p>
<p>因此，该功能允许音乐人证明该作品同时存在于 YouTube 平台并属于自己（因为仅上传者可以编辑视频描述，使其包含作品哈希值）</p>
<p>可使用 Oraclize 提供的在线服务进行查询: <a href="http://app.oraclize.it/home/test_query">http://app.oraclize.it/home/test_query</a></p>
<h4 id="可升级性">可升级性</h4>
<p>为了使作品注册合约具备可升级性，引入 ZeppelinOS 中的 AdminUpgradeabilityProxy，通过中继代理的方式实现了委任模式。</p>
<h3 id="设计模式">设计模式</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_design_architecture.png" alt="uright_design_architecture"></p>
<p>Uright 项目智能合约的设计有利于模块化和可重用性。比如，将验证过期功能实现为一个实体库；以及&quot;Evidencable&quot;库使注册作品可累积多项支持材料，也可以在后续申诉功能等研发中提供便利。</p>
<p>此外，将这些功能作为库提供可以降低部署成本。</p>
<h4 id="circuit-breaker-断路器模式--emergency-stop">Circuit Breaker (断路器模式) / Emergency Stop</h4>
<p>断路器的模式可以防止一个应用程序反复尝试执行一个可能会失败的操作，让它继续不等待故障的纠正或浪费处理器周期，而它决定了故障是长期持久的。断路器的模式也使一个应用程序来检测故障是否已得到解决。如果出现问题，该应用程序可以尝试调用操作。</p>
<h4 id="automatic-deprecation">Automatic Deprecation</h4>
<p>此外，对已登记的作品实行了类似于&quot;Automatic Deprecation&quot;的模式。这样，如果一个
用户注册了作品但不提供支持材料，其注册将在设定的固定时间后过期，在这种情况下，过期意味着该作品可以被另一个用户重新注册覆盖。</p>
<h3 id="安全措施">安全措施</h3>
<p>所有智能合约都已使用 Remix 和 Solhint 工具进行了代码检查，通过这两种工具检查常见的安全问题，如可重入性或时间戳依赖性等。</p>
<p>SafeMath 库用于避免整数上溢和下溢问题。</p>
<p>最后，Solhint 被设置为定义的连续集成和部署工作流中的一个步骤，这样，每次代码被推送到 GitHub 时，travis 都会运行所有的测试(对于合同和 Angular 前端)，如果所有测试都通过，则负责部署。</p>
<p>此外，Solhint 工具也会在测试之前执行，用于跟踪任何可能出现的安全问题。</p>
<h3 id="相关库">相关库</h3>
<p>Uright 项目从 ZeppelinOS 和 OpenZeppelin 包中导入了一些库用于功能实现</p>
<h4 id="zeppelinos">ZeppelinOS</h4>
<ul>
<li>AdminUpgradeabilityProxy: 实现智能合约的可升级性</li>
<li>Initializable: 通过可升级的智能合约拓展实现代理的初始化</li>
</ul>
<h4 id="openzeppelin">OpenZeppelin</h4>
<ul>
<li>Pausable: 实现&quot;Circuit Breaker (断路器模式) / Emergency Stop&quot;设计模式，通过拓展 Ownable 以实现只有拥有者可以停止</li>
<li>SafeMath: 用于避免整数上溢和下溢问题</li>
<li>OraclizeAPI 包，usingOraclize，用于检验 YouTube 视频是否属于特定用户且绑定至版权作品</li>
</ul>
<h3 id="智能合约详解">智能合约详解</h3>
<h4 id="manifestationssol">Manifestations.sol</h4>
<p>此智能合约用于注册作品，通过将作品元数据（目前为标题）及内容的 IPFS 哈希值与作者身份（即以太坊账户地址）进行关联，以证明作品所有权，同一作品可声明为单人作者或联合作者。此外，如用一个已经注册的内容哈希重新注册新作品，系统会检测为失败。</p>
<h4 id="uploadevidencessol">UploadEvidences.sol</h4>
<p>此智能合约主要用于支持材料登记，通过将作品文件内容上传至 IPFS 文件系统进行证据登记。对于同一个作品，可以添加多个证据（但不能重复添加）。</p>
<h4 id="expirablelibsol">ExpirableLib.sol</h4>
<p>此智能合约主要用于管理作品创建和到期时间的项目逻辑，实现作品注册（或申诉）的时效性。</p>
<h3 id="功能">功能</h3>
<p>Uright ÐApp 通过 Web 客户端对音乐人和用户提供音乐版权管理服务</p>
<ol>
<li>版权注册：以作品文件生成唯一哈希值，将音乐人的作品注册上链，以此证明作品版权</li>
</ol>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_register.png" alt="uright_register"></p>
<ul>
<li>注册从未注册的新作品</li>
<li>注册已存在注册记录的作品并进行申诉</li>
<li>添加支撑材料来证明作品版权</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_evidence_upload.png" alt="uright_evidence_upload"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_youtube_evidence.png" alt="uright_youtube_evidence"></p>
<ol start="2">
<li>版权检索：通过哈希值检查一个作品是否已被注册</li>
</ol>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_music_search.png" alt="uright_music_search"></p>
<ul>
<li>我的：查找当前音乐人的所有注册作品</li>
<li>版权库：查找链上所有已注册作品</li>
<li>详细信息：单击“详细信息”查看详细信息，包括所有已上传证据</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/uright_music_library.png" alt="uright_music_library"></p>
]]></content:encoded></item><item><title>BlockchainGuide - 区块链核心知识库</title><link>https://www.pseudoyu.com/en/2021/04/03/blockchain_guide/</link><pubDate>Sat, 03 Apr 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/04/03/blockchain_guide/</guid><description>BlockchainGuide 一个不断更新的区块链核心知识库 源项目地址 | 在线阅读 目录 BlockchainGuide 基础知识 区块链基础 比特币 以太坊 Hyperledger Fabric 热门技术 IPFS 跨链 BaaS 平台 开发实战 编程语言 开发工具 个人</description><content:encoded><![CDATA[<h1 id="blockchainguide">BlockchainGuide</h1>
<blockquote>
<p>一个不断更新的区块链核心知识库</p>
</blockquote>
<p><a href="https://github.com/pseudoyu/blockchain-guide">源项目地址</a> | <a href="https://guide.pseudoyu.com">在线阅读</a></p>
<p><strong>目录</strong></p>
<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
<!-- code_chunk_output -->
<ul>
<li><a href="#blockchainguide">BlockchainGuide</a>
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a>
<ul>
<li><a href="#%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80">区块链基础</a></li>
<li><a href="#%E6%AF%94%E7%89%B9%E5%B8%81">比特币</a></li>
<li><a href="#%E4%BB%A5%E5%A4%AA%E5%9D%8A">以太坊</a></li>
<li><a href="#hyperledger-fabric">Hyperledger Fabric</a></li>
</ul>
</li>
<li><a href="#%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF">热门技术</a>
<ul>
<li><a href="#ipfs">IPFS</a></li>
<li><a href="#%E8%B7%A8%E9%93%BE">跨链</a></li>
<li><a href="#baas-%E5%B9%B3%E5%8F%B0">BaaS 平台</a></li>
</ul>
</li>
<li><a href="#%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98">开发实战</a>
<ul>
<li><a href="#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">编程语言</a></li>
<li><a href="#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7">开发工具</a></li>
<li><a href="#%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE">个人项目</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a>
<ul>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%88%91">关于我</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- /code_chunk_output -->
<h2 id="基础知识">基础知识</h2>
<h3 id="区块链基础">区块链基础</h3>
<ol>
<li><a href="https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/">区块链基础知识与关键技术</a></li>
</ol>
<h3 id="比特币">比特币</h3>
<ol>
<li><a href="https://bitcoin.org/en/">官网</a></li>
<li><a href="https://bitcoin.org/bitcoin.pdf">白皮书</a> (<a href="https://bitcoin.org/files/bitcoin-paper/bitcoin_zh_cn.pdf">中译</a>)</li>
<li><a href="https://github.com/bitcoin/bitcoin">源码</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/">比特币核心技术解读</a></li>
</ol>
<h3 id="以太坊">以太坊</h3>
<ol>
<li><a href="https://ethereum.org/en/">官网</a></li>
<li><a href="https://ethereum.org/en/whitepaper/">白皮书</a></li>
<li><a href="https://ethereum.org/en/developers/docs/">文档</a></li>
<li><a href="https://github.com/ethereum/go-ethereum">源码</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/">Ethereum 核心技术解读</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/">Ethereum MPT(Merkle Patricia Tries) 详解</a></li>
</ol>
<h3 id="hyperledger-fabric">Hyperledger Fabric</h3>
<ol>
<li><a href="https://www.hyperledger.org/use/fabric">官网</a></li>
<li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/">文档</a></li>
<li><a href="https://github.com/hyperledger/fabric#releases">源码</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/">Hyperledger Fabric 系统架构详解</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/">Hyperledger Fabric 网络与安全体系浅析</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析</a></li>
</ol>
<h2 id="热门技术">热门技术</h2>
<h3 id="ipfs">IPFS</h3>
<ol>
<li><a href="https://ipfs.io">官网</a></li>
<li><a href="https://ipfs.io/ipfs/QmR7GSQM93Cx5eAg6a6yRzNde1FQv7uL6X1o4k7zrJa3LX/ipfs.draft3.pdf">白皮书</a></li>
<li><a href="https://docs.ipfs.io">文档</a></li>
<li><a href="https://github.com/ipfs/ipfs">源码</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/">IPFS 分布式存储协议分析与思考</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/">IPFS 本地节点搭建（命令行）</a></li>
<li><a href="https://www.pseudoyu.com/en/2021/06/22/blockchain_paper_cnfs/">基于 CNFS 的区块链网络存储与优化</a></li>
</ol>
<h3 id="跨链">跨链</h3>
<ol>
<li><a href="https://www.pseudoyu.com/en/2021/09/06/blockchain_crosschain/">跨链技术原理与实战</a></li>
</ol>
<h3 id="baas-平台">BaaS 平台</h3>
<ol>
<li><a href="https://www.pseudoyu.com/en/2021/09/07/blockchain_baas_platform/">区块链服务平台 (BaaS) 简介及架构</a></li>
</ol>
<h2 id="开发实战">开发实战</h2>
<h3 id="编程语言">编程语言</h3>
<ol>
<li><a href="https://docs.soliditylang.org/en/v0.8.4/">Solidity</a></li>
<li><a href="https://golang.org">Go</a></li>
</ol>
<h3 id="开发工具">开发工具</h3>
<ol>
<li><a href="https://metamask.io/">MetaMask</a></li>
<li><a href="https://www.trufflesuite.com">Truffle</a></li>
<li><a href="https://web3js.readthedocs.io/en/v1.3.4/">Web3.js</a></li>
<li><a href="https://openzeppelin.com">OpenZeppelin</a></li>
<li><a href="https://infura.io">Infura</a></li>
</ol>
<h3 id="个人项目">个人项目</h3>
<ol>
<li><input checked="" disabled="" type="checkbox"> Uright (<a href="https://www.pseudoyu.com/en/2021/05/10/uright_case_study/">文档</a> | <a href="https://github.com/pseudoyu/uright">GitHub</a>) - 一款基于以太坊区块链的音乐版权管理应用（ÐApp）</li>
</ol>
<hr>
<h2 id="其他">其他</h2>
<h3 id="关于我">关于我</h3>
<p>个人网站：<a href="https://www.pseudoyu.com">Pseudoyu</a></p>
<p>个人公众号：&quot;<strong>Pseudoyu</strong>&quot;</p>
]]></content:encoded></item><item><title>MySQL 基础与实践</title><link>https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/</link><pubDate>Mon, 29 Mar 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/</guid><description>前言 数据库不论在基础知识学习还是真实企业业务场景中都很常用，也有很多调侃说日常工作总是离不开 CRUD，熟练主流关系型与数据库的使用是一个开发</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>数据库不论在基础知识学习还是真实企业业务场景中都很常用，也有很多调侃说日常工作总是离不开 CRUD，熟练主流关系型与数据库的使用是一个开发者基本的操作。本文将在 MacOS 系统下对 MySQL 这个流行的关系性数据库的基础知识与相关操作进行整理，以便于查阅。</p>
<h2 id="数据与数据库概述">数据与数据库概述</h2>
<h3 id="数据">数据</h3>
<p>首先，数据其实本质上是一种事实或者观察到的结果，是对客观事务的逻辑上的归纳总结，是信息的一种表现形式和载体。人们从很早的时候就开始管理数据（即使还没有这个概念），最初是由人工管理，而后来渐渐有了文件系统（就像图书馆一样，分门别类地管理不同信息），而随着计算机技术的发展，最后形成了用数据库进行管理的这种较为便捷高效的模式。</p>
<h3 id="数据库">数据库</h3>
<p>数据库是按照一定的数据结构来组织、存储和管理数据的一个仓库，主要特征为</p>
<ul>
<li>结构化</li>
<li>可共享</li>
<li>冗余度小</li>
<li>独立性高</li>
<li>易于拓展</li>
</ul>
<p>很好理解的是，按照不同关系/结构组织起来的数据具备不同的特征，同时也适用于不同的应用场景，目前主要分为层次数据库、网状数据库和关系数据库三种，而我们要着重介绍的 MySQL 就数据关系数据库。</p>
<h3 id="数据库管理系统dbms">数据库管理系统(DBMS)</h3>
<p>数据库管理系统(DBMS)是对数据库进行各种操作的一个系统，一具有建立和维护数据库、对数据的存储进行组织管理、对数据库进行控制、定义数据、操纵数据以及管理数据之间的通信等核心功能，不同的数据库管理系统对数据库和数据的处理方式不同，数据呈现方式也不同，也往往需要根据数据规模、业务需求等场景选择合适的数据库管理系统，如在海量数据和高并发数据读写的情况下，关系性数据库的性能会下降得很厉害。</p>
<h2 id="关系性数据库rdbms">关系性数据库(RDBMS)</h2>
<h3 id="主要特征">主要特征</h3>
<p>关系性数据库主要以数据表的形式呈现，每一行为一条记录，每一列则为记录名称所对应的数据域(Field)。许多行列组成一张单表，而若干单表则组成数据库。用户/系统通过 SQL(结构化查询语言对数据库进行查询。</p>
<p>有些关系型数据库的操作具有事务性，即 ACID 规则</p>
<ul>
<li>原子性(Atomicity)</li>
<li>一致性(Consistency)</li>
<li>隔离性(Isolation)</li>
<li>持久性(Durability)</li>
</ul>
<p>原子性是指一系列事务操作要么都完成，要么都失败，不存在完成了一部分这样的情况，例如银行转账这样的场景里，转账行为发生后，发送方余额减少，而如果数据库出现了操作错误，接收方余额未增加，则会造成严重的问题。</p>
<p>一致性是指在事务执行完成后，整个数据库的数据是一致的，不应存在数据库内同一数据不同步的情况。</p>
<p>隔离性则是指不同的事务之间应该独立进行运行、互不干扰的，当然，这样会牺牲一定的效率，但对数据的准确性等提供了较好保障。</p>
<p>持久性则是指当一个事务执行完成后，它对数据库进行的更改、对系统产生的影响是永久的。</p>
<h3 id="数据完整性">数据完整性</h3>
<p>数据完整性是数据库很重要的一个要求和属性，是指存储在数据库中的数据应该保持一致性和可靠性，主要分为以下四种</p>
<ul>
<li>实体完整性</li>
<li>域完整性</li>
<li>参照完整性</li>
<li>用户定义完整性</li>
</ul>
<p>实体完整性要求每张数据表都有一个唯一的标识符，每张表中的主键字段不能为空且不能重复，这主要是指表中的数据都可以被唯一区分。</p>
<p>域完整性则是通过对表中列做一些额外限制，如限制数据类型、检查约束、设置默认值、是否允许空值以及值域范围等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 在创建表时对字段进行唯一性的约束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id_number</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span><span class="w"> </span><span class="k">unique</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>参照完整性是指数据库不允许引用不存在的实体，数据库的表与其他表之间往往存在一些关联，可以通过外键约束来保障其完整性。</p>
<p>而用户自定义完整性则是根据具体应用场景和涉及到数据来对数据进行一些语义方面的限制，如余额不能为负数等，一般用设定规则、存储过程和触发器等来进行约束和限制。</p>
<h3 id="主流-rdbms">主流 RDBMS</h3>
<p>目前主流的关系型数据库有以下几种</p>
<ul>
<li>SQL Server</li>
<li>Sybase</li>
<li>DB2</li>
<li>Oracle</li>
<li>MySQL</li>
</ul>
<p>企业和个人用得比较多的是 Oracle 和 MySQL 两种，接下来也会以 MySQL 为例进行详细的操作讲解。</p>
<h2 id="mysql">MySQL</h2>
<h3 id="安装与启动">安装与启动</h3>
<p>MySQL 是由 Sun 公司（后被 Oracle 公司收购）开发维护的一种很流行的小型数据库系统，由于体积很小且运行数据快，被很多中小型企业/网站采用，也具备较完整的开发和维护生态。</p>
<p>作为个人用户学习使用，可以下载社区版（开源）进行使用本地搭建环境，可以根据不同的系统选择不同的版本，也具备较便捷的图形界面供大家进行服务的开启、关闭、重启以及进行相关的配置等。本文以 MacOS 系统下的<code>MySQL 8.0.21</code>为例，在安装及进行基本设置后，就可以对本机 MySQL 服务进行管理，版本可能会略有差别，但核心功能差别不大。</p>
<h4 id="图形界面">图形界面</h4>
<p>打开系统偏好设置，可以看到如下界面</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mac_mysql_manage.png" alt="mac_mysql_manage"></p>
<p>点击 MySQL 图标即可进入详细管理界面</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mac_mysql_service.png" alt="mac_mysql_service"></p>
<p>在这个管理界面可以很方便地进行 MySQL 服务的开启与关闭，也可以将其设置为开机自启等操作，<code>Configuration</code>中也可以进行进一步的设置，但更建议在命令行进行。</p>
<h4 id="命令行界面">命令行界面</h4>
<p>当然，也可以在命令行中进行启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">//启动MySQL
</span></span><span class="line"><span class="cl">sudo /usr/local/mysql/support-files/mysql.server start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//关闭MySQL
</span></span><span class="line"><span class="cl">sudo /usr/local/mysql/support-files/mysql.server stop
</span></span></code></pre></div><p>效果如下</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mac_mysql_cli.png" alt="mac_mysql_cli"></p>
<p>当然也可以通过设置一些 alias 来简化命令，但是既然有比较方便的管理界面了，也就不折腾了，如果在一些没有图形界面的 linux 环境下进行操作，则需要命令行操作。</p>
<h3 id="连接-mysql">连接 MySQL</h3>
<p>安装和启动完成后 即可通过命令行连接 MySQL 并进行一些基本操作了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mysql -h localhost -u root -p
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//输入安装时设置的密码
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//查看状态
</span></span><span class="line"><span class="cl">status<span class="p">;</span>
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_connect.png" alt="mysql_connect"></p>
<p>而除了通过命令行连接外，MacOS 平台上也有一个很好用的客户端<code>Sequel Pro</code>，提供了大多数需要的功能，而由于正式版存在崩溃问题且已经不再维护，建议下载测试版 <a href="https://sequelpro.com/test-builds">Sequel Pro 测试版</a>，可以很方便地连接至本地/远程服务器 MySQL 服务</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sequel_pro_connect.png" alt="sequel_pro_connect"></p>
<p>并查询数据库的结构、内容及执行 SQL 命令</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sequel_pro_manage.png" alt="sequel_pro_manage"></p>
<p>这是目前我使用下来非常强大且轻量级的一个客户端，建议大家使用！</p>
<h3 id="sql-命令">SQL 命令</h3>
<p>经过了本地 MySQL 配置与连接后，我们就可以对数据库进行一些操作了，SQL 语言主要分为以下四类</p>
<ul>
<li>DDL 数据定义语言（Data Definition Language）</li>
<li>DML 数据操纵语言（Data Manipulation Language）</li>
<li>DQL 数据查询语言（Data Query Language）</li>
<li>DCL 数据控制语言（Data Control Language）</li>
</ul>
<p>接下来我们将通过实战完成一系列操作</p>
<h4 id="ddl-操作">DDL 操作</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 创建数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">learn_test</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 显示所有数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">show</span><span class="w"> </span><span class="n">databases</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">drop</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">mydb</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_ddl.png" alt="mysql_ddl"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 进入某个数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">use</span><span class="w"> </span><span class="n">learn_test</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 创建一个简单的数据表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">phone</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 添加字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">add</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">modify</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="n">tinyint</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">drop</span><span class="w"> </span><span class="k">column</span><span class="w"> </span><span class="n">sex</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除全表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">drop</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">contacts</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>为了方便演示，这些操作都将在<code>Sequel Pro</code>客户端中进行，操作后我们的表结构如下</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_learn_test_ddl.png" alt="mysql_learn_test_ddl"></p>
<h4 id="dml-操作">DML 操作</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 插入多条数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">phone</span><span class="p">,</span><span class="w"> </span><span class="n">sex</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="p">(</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;13100000000&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;13100000001&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;王五&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;13100000002&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 修改数据内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">update</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;王五&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 删除数据内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="dql-操作">DQL 操作</h4>
<p>MySQL 可以通过<code>select</code>命令来对表进行查询，最常用的查看全表命令为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查看表的全部数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>还可以通过<code>where</code>关键字来进行条件查询、以及多个条件的组合查询</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 组合条件进行查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&#34;李四&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql.png" alt="mysql_contacts_dql"></p>
<p><code>IN</code>和<code>LIKE</code>也是两个可以很灵活用于查询的关键字。</p>
<p><code>IN</code>可以帮助我们过滤某个字段的多个值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询id在(1,3)中的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">in</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql_in.png" alt="mysql_contacts_dql_in"></p>
<p>同时，<code>IN</code>和<code>EXISTS</code>也可以用于子查询</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 子查询 IN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="n">A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="n">stu_no</span><span class="w"> </span><span class="k">in</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">select</span><span class="w"> </span><span class="n">B</span><span class="p">.</span><span class="n">stu_no</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="n">B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">--- 子查询 EXISTS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="n">A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="k">exists</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="n">B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="n">stu_no</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">B</span><span class="p">.</span><span class="n">stu</span><span class="p">.</span><span class="k">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p><code>LIKE</code>可以帮助我们进行一些包含关系的模糊搜索，<code>%</code>可以匹配任一个字符，<code>_</code>可以匹配单个字符</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询所有姓张的联系人
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;张%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql_like_2.png" alt="mysql_contacts_dql_like_2"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 查询所有名字以四结尾且为两个字的的联系人
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;_四&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql_like.png" alt="mysql_contacts_dql_like"></p>
<p>实际应用中，往往数据表的数据量非常庞大，会对数据根据相应条件进行分组，这就要用到<code>GROUP BY</code>关键字，以及<code>HAVING</code>用于进一步筛选条件。<code>GROUP BY</code>需要配合聚合函数进行使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 统计男联系人数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">sex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">when</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;男&#34;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">when</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;女&#34;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="s2">&#34;未知&#34;</span><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="err">性别</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="err">人数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">sex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">having</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql_group_by.png" alt="mysql_contacts_dql_group_by"></p>
<p>而也可以通过<code>GROUP_CONCAT</code>来结合一些具体的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 按性别显示不同性别联系人的列表及总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">sex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">when</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;男&#34;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">when</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;女&#34;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="s2">&#34;未知&#34;</span><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="err">性别</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">group_concat</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">desc</span><span class="w"> </span><span class="n">separator</span><span class="w"> </span><span class="s1">&#39; | &#39;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="err">人数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">sex</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_dql_group_concat.png" alt="mysql_contacts_dql_group_concat"></p>
<p>有时候我们只需要返回唯一值，而需要去掉重复数据，则可以使用<code>DISTINCT</code>关键字</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 在查询时对字段进行去重
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">distinc</span><span class="w"> </span><span class="n">sex</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>在实际应用中，还很有可能会需要对某些商品交易量进行排名、对一些数值进行排列或博客文章中按照时间线后进行顺序显示等，这就需要用到<code>ORDER BY</code>这一关键字，它默认为<code>ASC</code>升序排列，可以通过手动设置<code>DESC</code>来实现降序。</p>
<p>同时，有的数据库数据量非常大，一次返回所有的数据比较消耗资源，因此也可以使用<code>LIMIT</code>关键字来约束返回的记录数，同时，也可以实现分页。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="w"> </span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">desc</span><span class="w"> </span><span class="k">limit</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_dql_order_by_limit.png" alt="mysql_dql_order_by_limit"></p>
<h3 id="内置函数">内置函数</h3>
<p>MySQL 也有很多常见的内置函数，可以帮助用户更方便处理各种数据，简化操作，大多数功能都很直观，不作一一说明了</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_functions.png" alt="mysql_functions"></p>
<p>其中值得注意的是，聚合函数是对一组值进行计算并返回单个值。</p>
<h3 id="流程控制">流程控制</h3>
<p>MySQL 有一种类似于编程语言中的 if else 或 switch 的流程控制语句，以实现复杂的应用逻辑</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 选取数据并且把性别以中文标识
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">phone</span><span class="p">,</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">sex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">when</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;男&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">when</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="s2">&#34;女&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">else</span><span class="w"> </span><span class="s2">&#34;未知&#34;</span><span class="w"> </span><span class="k">end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">as</span><span class="w"> </span><span class="n">sex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">contacts</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_contacts_flow_control.png" alt="mysql_contacts_flow_control"></p>
<h3 id="表的连接">表的连接</h3>
<p>不同的表可以通过一定连接条件发生关联，主要有自连接、内连接和外连接三种，其中外连接又分为左外连接、右外连接和全外连接三种，他们的区别如下</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mysql_table_join.png" alt="mysql_table_join"></p>
<p>而自连接是一种特殊的连接方式，通过在逻辑上生成多张表以实现复杂的层次结构，常应用于区域表、菜单表和商品分类表等，语法如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">--- 自连接语法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="n">cloumn</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="p">.</span><span class="k">column</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="k">column</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">B</span><span class="p">.</span><span class="k">column</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="总结">总结</h2>
<p>学完了关系型数据库，那非关系型数据库又是怎样的呢？后续将会对 Redis 这一使用广泛的非关系性数据库进行整理，敬请期待！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.mysql.com">MySQL 官网</a></li>
<li><a href="https://sequelpro.com">Sequel Pro 官网</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>IPFS 本地节点搭建（命令行）</title><link>https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/</link><pubDate>Sat, 27 Mar 2021 18:46:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/</guid><description>前言 上一篇《IPFS 分布式文件存储原理》对于 IPFS 系统的设计理念、功能、工作原理及 IPNS 做了详细的介绍，那么，如何在本地搭建一个 IPFS 节点呢？ 本文在ma</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>上一篇《<a href="https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/">IPFS 分布式文件存储原理</a>》对于 IPFS 系统的设计理念、功能、工作原理及 IPNS 做了详细的介绍，那么，如何在本地搭建一个 IPFS 节点呢？</p>
<p>本文在<code>macOS 11.2.3</code>系统上搭建了一个 IPFS 节点（命令行版本），并对文件上传、下载、网络同步、<code>pin</code>、<code>GC</code>、<code>IPNS</code>等进行了实际操作，以加深对 IPFS 工作原理的理解。</p>
<h2 id="代码实践">代码实践</h2>
<h3 id="安装">安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">wget https://dist.ipfs.io/go-ipfs/v0.8.0/go-ipfs_v0.8.0_darwin-amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -xvzf go-ipfs_v0.8.0_darwin-amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> go-ipfs
</span></span><span class="line"><span class="cl">./install.sh
</span></span><span class="line"><span class="cl">ipfs --version
</span></span></code></pre></div><h3 id="启动">启动</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 启动节点</span>
</span></span><span class="line"><span class="cl">ipfs init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上传文件</span>
</span></span><span class="line"><span class="cl">ipfs add ipfs_init_readme.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上传文件并且只输出哈希值</span>
</span></span><span class="line"><span class="cl">ipfs add -q ipfs_init_readme.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上传目录</span>
</span></span><span class="line"><span class="cl">ipfs add -r <span class="o">[</span>Dir<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看文件</span>
</span></span><span class="line"><span class="cl">ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme
</span></span><span class="line"><span class="cl">ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/quick-start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看自己上传的文件</span>
</span></span><span class="line"><span class="cl">ipfs cat QmaP3QS6ZfBoEaUJZ3ZfRKoBm3GGuhQSnUWtkVCNc8ZLTj
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看图片并输出到文件</span>
</span></span><span class="line"><span class="cl">ipfs cat QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH &gt; ipfsTest.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载文件</span>
</span></span><span class="line"><span class="cl">ipfs get QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH -o ipfsTest.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 压缩并下载文件</span>
</span></span><span class="line"><span class="cl">ipfs get QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH -Cao ipfsTest.png
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ipfs_init_readme.png" alt="ipfs_init_readme"></p>
<h3 id="开启加入服务">开启/加入服务</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看当前节点信息 </span>
</span></span><span class="line"><span class="cl">ipfs id
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看IPFS配置信息</span>
</span></span><span class="line"><span class="cl">ipfs config show
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 开启节点服务器</span>
</span></span><span class="line"><span class="cl">ipfs daemon
</span></span></code></pre></div><p>API 服务，默认在 5001 端口，可以通过 http://localhost:5001/webui 进行访问</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ipfs_webui.png" alt="ipfs_webui"></p>
<p>网关服务，默认在 8080 端口，在浏览器里访问文件需要借助于 IPFS 提供的网关服务，由浏览器先访问到网关，网关去获取 IPFS 网络杀过了的文件。通过 http://localhost:8080/ipfs/[File Hash] 来访问上传到 IPFS 的文件</p>
<h3 id="文件操作">文件操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出文件</span>
</span></span><span class="line"><span class="cl">ipfs files ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建目录</span>
</span></span><span class="line"><span class="cl">ipfs files mkdir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除文件</span>
</span></span><span class="line"><span class="cl">ipfs files rm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拷贝文件</span>
</span></span><span class="line"><span class="cl">ipfs files cp <span class="o">[</span>File Hash<span class="o">]</span> /<span class="o">[</span>Dest Dir<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 移动文件</span>
</span></span><span class="line"><span class="cl">ipfs files mv <span class="o">[</span>File Hash<span class="o">]</span> /<span class="o">[</span>Dest Dir<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 状态</span>
</span></span><span class="line"><span class="cl">ipfs files stat
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 读取</span>
</span></span><span class="line"><span class="cl">ipfs files <span class="nb">read</span>
</span></span></code></pre></div><h3 id="使用-ipns-来解决文件更新问题">使用 IPNS 来解决文件更新问题</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 使用IPNS发布内容以自动更新</span>
</span></span><span class="line"><span class="cl">ipfs name publish <span class="o">[</span>File Hash<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查询节点id指向的Hash</span>
</span></span><span class="line"><span class="cl">ipfs name resolve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 有多个站点需要更新，可以新产生一个秘钥对，使用新的key发布</span>
</span></span><span class="line"><span class="cl">ipfs key gen --type<span class="o">=</span>rsa --size<span class="o">=</span><span class="m">2048</span> mykey
</span></span><span class="line"><span class="cl">ipfs name publish --key<span class="o">=</span>mykey  <span class="o">[</span>File Hash<span class="o">]</span> 
</span></span></code></pre></div><h3 id="pinning">Pinning</h3>
<p>当我们向 IPFS 网络请求文件时，IPFS 会把内容先同步的本地提供服务，使用 Cache 机制处理文件以防止存储空间不断增长，如果文件一段时间未被使用则会被“回收”，Pining 的作用就是确保文件在本地不被“回收”。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># pin一个文件</span>
</span></span><span class="line"><span class="cl">ipfs pin add <span class="o">[</span>File Hash<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查询某一个Hash是否被pin</span>
</span></span><span class="line"><span class="cl">ipfs pin ls <span class="o">[</span>File Hash<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除pin的状态</span>
</span></span><span class="line"><span class="cl">ipfs pin rm -r <span class="o">[</span>File Hash<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># GC操作</span>
</span></span><span class="line"><span class="cl">ipfs repo gc
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>本文主要在本地部署了 IPFS 文件系统并对基本操作进行了尝试，基于<code>macOS 11.2.3</code>和<code>go-ipfs_v0.8.0_darwin-amd64</code>版本，不同系统操作可能会因版本或依赖问题不一样，如有错漏，欢迎交流指正。</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://ipfs.io">IPFS 官网</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>IPFS 分布式存储协议分析与思考</title><link>https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/</link><pubDate>Thu, 25 Mar 2021 16:30:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/</guid><description>前言 最近在做学校的 Case Study 项目，是一个基于Ethereum平台的音乐版权管理项目，其中对于音乐作品、版权证明文件等上传用到了 IPFS 分布式文件存储技术</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近在做学校的 Case Study 项目，是一个基于<code>Ethereum</code>平台的音乐版权管理项目，其中对于音乐作品、版权证明文件等上传用到了 IPFS 分布式文件存储技术，主要是利用其去重的特性来检测侵权行为。对 IPFS 这个系统产生了兴趣，阅读了<a href="https://tech.hyperchain.cn">QTech 平台</a>上的<a href="https://tech.hyperchain.cn/tag/ipfs/">IPFS 系列文章</a>，也查询了一些相关资料，通过本文梳理一下，如有错漏，欢迎交流指正。</p>
<h2 id="概述">概述</h2>
<p>我们日常使用网盘或其他服务时大多都是访问文件所在的特定的服务器（IP 地址），请求文件并下载到本地，通过的是 HTTP 协议，本质上是基于位置寻址的，访问 URL 来得到一层层找到具体的文件，这种方式固然便捷，但是存在一些问题。文件依托于特定的服务器，因此一旦中心化的服务器宕机或者文件被删除了，内容将永久丢失，并且如果离服务器很远/同时访问文件的人很多的话访问速度也会比较慢；而且同样一份文件可能重复存储在不同的服务器中，造成资源的浪费；此外就是存在严重的安全隐患，DDoS、XSS、CSRF 等攻击都可能对文件安全性造成威胁。</p>
<blockquote>
<p>那有没有更好的解决方案呢？</p>
</blockquote>
<p>试想我们把文件存储在一个分布式网络里，每个节点都可以存储文件，用户可以通过访问一个类似目录索引的方式来向最近的节点互相请求文件。这就是 IPFS 星际文件系统的解决思路，它是一个点对点的超媒体文件存储、索引、交换协议，由 Juan Benet 在 2014 年 5 月发起。</p>
<h3 id="特点">特点</h3>
<p>IPFS 想把全世界所有部署了相同文件系统的计算设备链接在一起，构建一个分布式网络来替代传统中心化的服务器模式，每个节点都可以存储文件，用户通过<code>DHT(Distributed Hash Table)</code>分布式哈希表来获取文件，速度更快、更安全，网络安全性更强。</p>
<p>因为通过 IPFS 存储的文件内容是通过分块求 Hash 值存储为地址的，本质上是通过多重哈希来确定文件的地址，这是一种去中心化但是基于内容寻址的方式，通过对数据本身进行加密，生成独一无二的 Hash 以供查找，这种方式下，即使是微小的改变，也会造成 Hash 结果截然不同，因此很容易能够从 Hash 检测内容是否被篡改，甚至不用访问文件本身。</p>
<p>不同于传统的服务器模式，IPFS 是一个统一的网络，因此已经上传的相同内容的文件不会重复存储（可以通过 Hash 值检验），极大地节约了整体网络资源，也更加高效。而且理论上只要节点达到一定规模，文件将永久保存，且同一个文件可以从多个（也更近）的节点下载，通讯效率也会更高。</p>
<p>除此之外，因为是分布式网络进行存储，也可以天然地避免传统 DDoS 等攻击。</p>
<h3 id="功能">功能</h3>
<p>除了文件存储外，IPFS 还有 DHT 组网、Bitswap 文件交换等功能，之后也会单独写博文进行讲解。</p>
<h2 id="工作原理">工作原理</h2>
<p>作为一个文件存储系统，上传文件和下载文件是两个最基本的操作，我们分别讲一下原理。</p>
<h3 id="ipfs-add-命令">IPFS add 命令</h3>
<blockquote>
<p>在 IPFS 系统中执行 add 操作就完成了上传操作，那是怎么上传的呢？</p>
</blockquote>
<p>在 IPFS 文件存储系统中，每当上传一个新文件，系统会将单个文件拆分成若干个 256KB 的 block，每个 block 会有一个专属的 CID 进行标识，这个后面会详细讲；然后计算每一个 block 的 Hash 值，并存储再一个数组中，最后对这个数组求 Hash 得到文件的最终 Hash 值；接着将文件的 Hash 和所有的 blocks Hash 的数组组成成一个对象，也就形成了一种索引结构；最后把文件 block 和这个索引结构全部上传到 IPFS 节点，同步到 IPFS 网络。</p>
<p>文件上传时有两个值得注意的情况：1.文件特别小，如果文件小于 1KB 的话就不浪费一个 block 了，会直接和 Hash 一起上传到 IPFS。2.文件特别大，比如之前上传了一个 1G 的视频，之后又加了几 KB 的字幕文件，这种情况下未变化的 1G 部分是不会重新分配新的空间的，而只会为追加的字母文件部分分配新的 block，再重新上传 Hash。</p>
<p>因此，很好理解的是，即使是不同文件的相同部分也只会存储一份，很多文件的索引会指向同一个 block，所形成的结构就是 MerkleDAG 数据结构。</p>
<p>值得注意的是，当节点执行 add 操作时，会保留到本地 blockstore 中，但不会立刻主动上传到 IPFS 网络中，也就是说，与其连接的节点并不会存储这个文件，除非有某个节点请求过该 block 数据！因此，它并不是一个自动备份数据的分布式数据库。IPFS 这种设计是出于网络带宽、可靠性等方面的考虑。</p>
<p>还有一个细节就是，当节点在执行<code>add</code>命令时，还会广播自己的块信息，并维护一个所有发给这个节点的 block 请求列表，一旦 add 命令添加到数据满足这个列表，就会主动向对应的节点发送数据并且更新列表。</p>
<h3 id="ipfs-get-命令">IPFS get 命令</h3>
<blockquote>
<p>那文件上传后，要怎么查找访问呢？</p>
</blockquote>
<p>这就关系到上文所提到的 IPFS 索引结构是<code>DHT</code>（分布式哈希表），通过对<code>DHT</code>进行访问可以很快访问得到数据。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ipfs_dht.png" alt="ipfs_dht"></p>
<blockquote>
<p>那如果想要查找一个本地没有的数据呢？</p>
</blockquote>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ipfs_get.gif" alt="ipfs_get"></p>
<p>在 IPFS 系统中，所有和当前节点连接的节点会构成一个 swarm 网络，当节点发送一个文件请求(即<code>get</code>)时，首先会在本地的 blockstore 里查找请求的数据，如果没找到的话，就会向 swarm 网络发出一个请求，通过网络中的<code>DHT Routing</code>找到拥有该数据的节点。</p>
<blockquote>
<p>怎么知道网络中哪个（哪些）节点拥有这个请求文件呢？</p>
</blockquote>
<p>如上文<code>add</code>命令所讲的那样，当一个节点加入到 IPFS 网络中后，会告诉其它节点自己存储了什么内容（通过广播<code>DHT</code>），这样每当有用户希望检索的内容正好在这个节点上时，其它节点就会告诉用户要从这个节点索取他想要的内容。</p>
<p>一旦找到拥有这个数据的节点，就会把请求数据反馈回来，这样本地节点会把收到的 block 数据缓存一份到本地的 blockstore 中，这样整个网络中相当于多了一份原数据的拷贝，更多节点请求数据的话，查找就变得更容易，因此数据的不可丢失性也是基于这个原理，只要有一个节点保存着这个数据，就可以被全网获取。</p>
<blockquote>
<p>在项目中，上传的文件可以通过<code>ipfs.io</code>网关直接获取到文件，类似于<code>https://ipfs.io/ipfs/Qm.....</code>这样的网站地址，这个是什么原理呢？</p>
</blockquote>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ipfs_io_get.gif" alt="ipfs_io_get"></p>
<p><code>ipfs.io</code>网关实际上就是一个 IPFS 节点，当我们打开上述这个网络链接的时候，实际上就是向这个节点发送了一次请求，因此<code>ipfs.io</code>网关会帮我们去向拥有这个数据的节点请求这个 block（如果这个文件是自己刚在本地节点通过<code>add</code>命令添加的话就会通过这种方式被上传到 IPFS 网络上），在<code>swarm</code>网络中通过<code>DHT Routing</code>获取到数据后，网关会自己先缓存一份，然后将数据通过 HTTP 协议发给我们，因此，就可以在浏览器直接看到这个文件啦！</p>
<p>而任何其他机器通过浏览器访问这个链接时，因为<code>ipfs.io</code>网关已经缓存了这个文件，再次请求的时候，就不需要向原节点来请求数据了，可以直接从缓存中返回数据给浏览器。</p>
<h3 id="内容标识符-cidcontent-id">内容标识符 CID(Content-ID)</h3>
<p>现在考虑另一个问题，我们常见的图像为<code>.jpg</code>、<code>.png</code>，而常见的视频则是<code>.mp4</code>一样，可以直接从后缀名判断文件类型。通过 IPFS 上传的文件也可以是多种类型，也包含了很多信息，怎么进行分辨呢？</p>
<p>IPFS 早期主要使用<code>base58btc</code>对<code>multihash</code>进行编码，但是在开发 IPLD（主要用来定义数据，给数据建模）的过程中会遇到很多与格式相关的问题，因此使用了一种叫<code>CID</code>的文件寻址格式来对不同格式的数据进行管理，官方的定义为：</p>
<blockquote>
<p><code>CID</code>是一种自描述式的内容寻址的识别符，必须使用加密散列函数来得到内容的地址</p>
</blockquote>
<p>简单来说，<code>CID</code>通过一些机制来对文件所包含的内容进行自描述，包含了版本信息、格式等。</p>
<h4 id="cid-结构">CID 结构</h4>
<p>目前<code>CID</code>有<code>v0</code>和<code>v1</code>两种版本，<code>v1</code>版本的<code>CID</code>由<code>V1Builder</code>生成</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&lt;cidv1&gt; ::<span class="o">=</span> &lt;mb&gt;&lt;version&gt;&lt;mcp&gt;&lt;mh&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># or, expanded:</span>
</span></span><span class="line"><span class="cl">&lt;cidv1&gt; ::<span class="o">=</span> &lt;multibase-prefix&gt;&lt;cid-version&gt;&lt;multicodec-packed-content-type&gt;&lt;multihash-content-address&gt;
</span></span></code></pre></div><p>如上面列举的代码所示，采用的机制叫<code>multipleformats</code>，主要包括：<code>multibase-prefix</code>表示<code>CID</code>编码成字符串，<code>cid-version</code>表示版本变量，<code>multicodec-packed-content-type</code>表示内容的类型和格式（类似于后缀，但是作为标识符的一部分，支持的格式有限，且用户是不能随意修改的），<code>multihash-content-address</code>表示哈希值（让<code>CID</code>可以使用不同的 Hash 函数）。</p>
<p>目前<code>CID</code>支持的<code>multicodec-packed</code>编码有原生的<code>protobuf</code>格式、<code>IPLD CBOR</code>格式、<code>git</code>、比特币和以太坊对象等格式，也在逐步开发支持更多格式。</p>
<p><code>CID</code>代码详解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Cid</span> <span class="kd">struct</span> <span class="p">{</span><span class="nx">str</span> <span class="kt">string</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">V0Builder</span> <span class="kd">struct</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">V1Builder</span> <span class="kd">struct</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Codec</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="nx">MhType</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="nx">MhLength</span> <span class="kt">int</span> <span class="c1">// Default: -1
</span></span></span></code></pre></div><p><code>Codec</code>表示内容的编码类型，如<code>DagProtobuf</code>, <code>DagCBOR</code>等，<code>MhType</code>表示哈希算法，如<code>SHA2_256</code>, <code>SHA2_512</code>, <code>SHA3_256</code>, <code>SHA3_512</code>等，而<code>MhLength</code>则表示生成哈希的长度。</p>
<p>而<code>v0</code>版本的<code>CID</code>由<code>V0Builder</code>生成，以<code>Qm</code>字符串开头，向后兼容，<code>multibase</code>一直为<code>base58btc</code>，<code>multicodec</code>一直为<code>protobuf-mdag</code>，<code>cid-version</code>一直为<code>cidv0</code>，<code>multihash</code>表示为<code>cidv0 ::= &lt;multihash-content-address&gt;</code>。</p>
<h4 id="设计理念">设计理念</h4>
<p>通过<code>CID</code>这种二进制的特性，大大提高了对于文件 Hash 的压缩效率，因此可以直接作为 URL 的一部分进行访问；通过<code>multibase</code>的编码形式（如<code>base58btc</code>）缩短了<code>CID</code>的长度，这样更容易传输；可以表示任意格式、任何哈希函数的结果，十分灵活；可以通过结构中<code>cid-version</code>参数进行编码版本的升级；不受限于历史内容。</p>
<h3 id="ipns">IPNS</h3>
<p>如上文所述，IPFS 中文件内容的改变会造成其哈希值的变化，在实际应用中，如果通过 IPFS 托管网站等需要版本更新迭代的应用，每一次都通过更新后的 Hash 访问很不方便，因此，需要一个映射方案以保证用户体验，这样用户在访问时仅需要访问一个固定地址。</p>
<p><code>IPNS(Inter-Planetary Naming System)</code>就提供了这样的服务，它提供了一个被私钥限定的哈希 ID（通常是 PeerID）来指向具体的 IPFS 文件，文件更新后会自动更新哈希 ID 的指向。</p>
<p>即使哈希值可以固定不变了，但是依然不便于记忆和输入，因此，有了更进一步的解决方案。</p>
<p>IPNS 同样兼容 DNS，可以使用<code>DNS TXT</code>记录域名对应的 IPNS 哈希 ID，就可以域名来替换 IPNS 哈希 ID 来进行访问，从而实现更容易读写和记忆。</p>
<h2 id="总结">总结</h2>
<p>以上就是对 IPFS 分布式存储原理的梳理，它的组件、存储流程细节、GC 机制、数据交换模块 Bitswap、网络以及实际应用场景都有很多值得深入挖掘的部分。</p>
<blockquote>
<p>推荐阅读：趣链科技 QTech 平台《<a href="https://tech.hyperchain.cn/tag/ipfs/">IPFS 系列文章</a>》</p>
</blockquote>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://ipfs.io">IPFS 官网</a></li>
<li><a href="https://tech.hyperchain.cn/ipfs/">原来 IPFS 是这样存储文件的</a>，<em>QTech，趣链科技</em></li>
<li><a href="https://cloud.tencent.com/developer/news/277198">IPFS 到底怎么工作的？</a>，<em>知辉</em></li>
<li><a href="https://learnblockchain.cn/2018/12/12/what-is-ipfs">站在 Web3.0 理解 IPFS 是什么</a>，<em>Tiny 熊，登链社区</em></li>
<li><a href="https://medium.com/@kidinamoto/ipfs-cid-%E7%A0%94%E7%A9%B6-717c4ceb14a0">IPFS CID 研究</a>，<em>Sophie Huang</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Hyperledger Fabric 网络与安全体系浅析</title><link>https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</link><pubDate>Tue, 23 Mar 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</guid><description>前言 上一篇文章《Hyperledger Fabric 架构详解》对Fabric的架构和工作原理进行了详细的解读与分析，那作为一个企业级的区块链系统，它是如</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>上一篇文章《<a href="https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/">Hyperledger Fabric 架构详解</a>》对<code>Fabric</code>的架构和工作原理进行了详细的解读与分析，那作为一个企业级的区块链系统，它是如何根据复杂的业务需求搭建网络，在运行过程中存在哪些安全问题，以及<code>Fabric</code>是如何从机制上进行预防的呢？</p>
<p>本文将通过实例阐释一个简化版的企业<code>Fabric</code>网络是如何构建的，并对其网络与安全体系进行分析，如有错漏，欢迎交流指正。</p>
<h2 id="hyperledger-fabric-网络">Hyperledger Fabric 网络</h2>
<h3 id="hyperledger-fabric-应用场景实例">Hyperledger Fabric 应用场景实例</h3>
<h4 id="业务角色">业务角色</h4>
<p>假设有一个采用<code>Fabric</code>系统的应用场景里。</p>
<p>有 4 个组织<code>R1</code>, <code>R2</code>, <code>R3</code>和<code>R4</code>，<code>R4</code>是网络启动者，<code>R1</code>和<code>R4</code>共同担任网络管理员角色。</p>
<p>系统设置了 2 个通道，分别为<code>C1</code>和<code>C2</code>。<code>R1</code>和<code>R2</code>使用<code>C1</code>通道，<code>R2</code>和<code>R3</code>使用<code>C2</code>通道。</p>
<p>应用<code>A1</code>属于组织<code>R1</code>，于<code>C1</code>通道运行；应用<code>A2</code>属于组织<code>R2</code>，同时于<code>C1</code>通道和<code>C2</code>通道运行；应用<code>A3</code>属于组织<code>R3</code>，于<code>C2</code>通道运行。</p>
<p><code>P1</code>、<code>P2</code>和<code>P3</code>分别是组织<code>R1</code>、<code>R2</code>和<code>R3</code>的节点。</p>
<p>排序节点由<code>O4</code>提供，属于组织<code>R4</code>.</p>
<h4 id="搭建过程">搭建过程</h4>
<p>与真正的商业应用场景相比，角色和商业和逻辑都很简化，但很适合用来理解不同节点和角色之间的功能和交互。接下来，我将一步一步说明网络的搭建过程。</p>
<blockquote>
<p>创建网络并添加网络管理员</p>
</blockquote>
<p>每一个组织需要通过<code>MSP</code>中的 CA 机构颁发的证书才能加入网络，因此，每个节点都需要有相应的 CA。</p>
<p><code>R4</code>作为网络启动者，需要先配置网络并设立<code>O4</code>排序节点！网络创建后，添加<code>R1</code>作为网络管理员，因此，<code>R1</code>和<code>R4</code>可以对网络进行配置（<code>NC4</code>）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_network_example_1.png" alt="fabric_network_example_1"></p>
<blockquote>
<p>定义联盟并创建通道</p>
</blockquote>
<p><code>R1</code>和<code>R2</code>将通过<code>C1</code>进行业务交互，因此需要在网络中定义联盟，因为现在<code>R1</code>和<code>R4</code>都可以对网络进行配置，因此都可以定义联盟。</p>
<p>接着为这个联盟创建通道<code>C1</code>（连接至排序服务<code>O4</code>）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_network_example_2.png" alt="fabric_network_example_2"></p>
<blockquote>
<p>加入节点、部署智能合约与应用</p>
</blockquote>
<p><code>P1</code>节点加入已经建立的通道<code>C1</code>，维护着一个账本<code>L1</code>。</p>
<p>这时候就可以在节点上安装和实例化智能合约了。<code>Fabric</code>的智能合约是链码，把链码存储在节点的文件系统上称为安装智能合约，安装后还需要在特定的通道上启动和实例化链码，至此，应用可以发送交易 proposal 至背书节点了（需要遵守链码设置的背书策略）。</p>
<p>如下图所示，<code>P1</code>节点安装链码<code>S5</code>并在通道<code>C1</code>实例化后，就可以响应来自应用<code>A1</code>的链码调用了;<code>P2</code>节点安装链码<code>S5</code>并在通道<code>C1</code>实例化后，就可以响应来自应用<code>A2</code>的链码调用了。</p>
<p>通道中的每一个节点都是提交节点，可以接收新区块（来自排序节点）进行验证，并提交至账本；而部署了链码的一些节点则可以成为背书节点。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_network_example_4.png" alt="fabric_network_example_4"></p>
<blockquote>
<p>定义新联盟、创建新通道</p>
</blockquote>
<p>在网络中定义新联盟并加入<code>C2</code>通道。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_network_example_5.png" alt="fabric_network_example_5"></p>
<blockquote>
<p>加入新节点并部署智能合约与应用</p>
</blockquote>
<p>值得注意的是，有些节点会同时加入多个通道，在不同的业务中扮演不同的角色，其他流程同上。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_network_example_6.png" alt="fabric_network_example_6"></p>
<blockquote>
<p>网络搭建完成</p>
</blockquote>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_network_example.png" alt="hyperledger_fabric_network_example"></p>
<p><code>Fabric</code>采用权限管理、通道等机制，并通过对不同节点功能分工，提升了系统的运行效率，并保障了复杂业务场景中的安全和隐私；强大的链码和可自定义的背书策略等也保障了系统的拓展性，可以处理复杂的业务逻辑。</p>
<h2 id="hyperledger-fabric-安全分析">Hyperledger Fabric 安全分析</h2>
<h3 id="fabric-安全机制">Fabric 安全机制</h3>
<p><code>Fabric</code>设计了很多机制来保障系统的安全性。</p>
<h4 id="系统配置与成员管理">系统配置与成员管理</h4>
<p>区别于比特币、以太坊等公链，加入<code>Fabric</code>网络需要进行权限验证，<code>Fabric CA</code>为成员管理使用<code>X.509</code>证书机制以保障其权限，避免潜在<code>Spoofing</code>攻击等。</p>
<p>现有的系统成员需要制定加入新成员的规则，比如进行多数投票等；现有成员也需要决定网络和智能合约的更新和改变，这样能够很大程度上防止恶意节点破坏系统安全性；现有节点不能自行升级权限；除此之外，还需要决定系统的通用数据模型等设置。</p>
<p><code>Fabric</code>的网络传输采用<code>TLSv1.2</code>，可以保障数据的安全性；且系统中的操作，如发起交易、背书等都会通过数字签名技术来记录，很容易追溯一些恶意操作。但值得注意的是，排序节点可以获取系统中所有节点的交易数据，因此，排序服务节点的设定对于整个系统的安全性尤其重要，它的公正性会很大程度影响整个系统的运作，甚至决定了整个系统是否值得信任，因此，需要根据业务和系统结构慎重选择。</p>
<p>公链系统中，所有节点都有区块链账本的副本，并且执行智能合约；而在<code>Fabric</code>系统中，业务相关节点会形成节点组，存储与其交易（业务）相关的账本，而通过链码对账本的更新也会被限制在节点组的范围内，从而保障整个系统的稳定性。</p>
<p>智能合约的执行称为交易，对于<code>Fabric</code>系统内的交易，也必须要保持其一致性，往往采用密码学技术来防止交易被篡改，如采用<code>SHA256</code>、<code>ECDSA</code>等检测修改；<code>Fabric</code>采取模块化、可插拔的设计，将交易的执行、验证共识进行分离，因此，可以采取不同的共识机制或规则，不仅能够根据需求选择不同的共识机制，更具拓展性，也能提高系统安全性。</p>
<p>这些配置和规则共同决定了系统的安全性，需要在业务需求、效率和安全性上作权衡。</p>
<h4 id="智能合约安全">智能合约安全</h4>
<p><code>Fabric</code>的链码需要安装在节点上并且实例化，安装链码需要有 CA 的验证，因此要注意权限管理；启动后是运行在独立的 Docker 容器中的，更轻量级，但是因为它能够访问<code>Fabric</code>网络，如果没经过严格的代码审计以及对网络进行隔离，会造成一些恶意后果。</p>
<p><code>Fabric</code>的链码可以用多种通用型的编程语言撰写，例如<code>Go</code>、<code>Java</code>等，这让系统有了更强的拓展性，也更容易接入现有系统和工具，但因为其执行结果是不缺性的，编程语言的一些特性（如随机数、系统时间戳、指针等）可能会造成不同背书节点执行结果不同，造成系统不一致性；此外，因为链码可以访问一些外部的 Web 服务、系统命令、文件系统和第三方库等，也会造成一些潜在的风险。因此，用这些通用语言开发的链码需要相对独立且加强代码审计，以避免一些因编程语言带来的安全风险。</p>
<h4 id="交易隐私">交易隐私</h4>
<p><code>Fabric</code>采用了通道机制来划分整个系统为多个子区块链（账本），只有加入通道的节点才能查看和存储交易信息，但排序节点可以看到。</p>
<blockquote>
<p>那有什么办法在通道中保障一些私有数据的隐私呢？</p>
</blockquote>
<p><code>Fabric</code>提供了一种存储私有数据的方式，使通道中的节点可以选择特定的数据分享对象（节点）。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fabric_security_private_data.png" alt="fabric_security_private_data"></p>
<p>在这种机制下，真实的数据会通过<code>gossip</code>协议发送到指定的节点，数据存放私有数据库中，只有授权节点可以通过链码进行访问，因为这个过程并没有涉及到排序服务，所以排序节点也无法获取。</p>
<p>而在系统内传播、排序与写入账本的数据是经过哈希加密的版本，因此交易仍然可以被各个节点验证，但因为哈希的特性，可以有效保护原数据不被泄漏。</p>
<p>但值得注意的是，如果在背书节点模拟交易过程中需要使用到数据，那需要采取额外的机制来保障数据对于背书节点的可读性和对其他节点的不可见性（如非对称加密等）。</p>
<h2 id="总结">总结</h2>
<p>以上就是对<code>Hyperledger Fabric</code>网络搭建和安全体系分析了，接下来将会开始学习<code>Go</code>和链码的开发，通过项目实战来对其进行深入了解学习！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.cs.hku.hk/index.php/programmes/course-offered?infile=2019/fite3011.html">FITE3011 Distributed Ledger and Blockchain</a>, <em>Allen Au，HKU</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Hyperledger Fabric 系统架构详解</title><link>https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</link><pubDate>Sat, 20 Mar 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</guid><description>前言 因为毕业 Case Study 的项目主要是基于Ethereum公链，也没有面向企业的应用场景，所以之前对Hyperledger Fabric的了解大多只是停</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>因为毕业 Case Study 的项目主要是基于<code>Ethereum</code>公链，也没有面向企业的应用场景，所以之前对<code>Hyperledger Fabric</code>的了解大多只是停留在它的权限管理机制、通道、灵活的智能合约编写等几个特色的概念，对它的架构、各个节点的角色、运行机制等都是一知半解。最近在上 HKU 的<code>&lt;FITE3011 Distributed Ledger and Blockchain&gt;</code>课程，教授对<code>Hyperledger Fabric</code>的工作原理、网络搭建及链码相关的知识做了很详细的讲解，受益匪浅，通过本文来梳理一下，如有错漏，欢迎交流指正。</p>
<h2 id="hyperledger-概述">Hyperledger 概述</h2>
<p>要学习<code>Hyperledger Fabric</code>，先来看看它的母项目<code>Hyperledger</code>是什么。</p>
<p>企业级应用有较复杂的业务逻辑和参与者角色划分，对于业务执行效率、安全性要求很高，并且针对常见的如支付、数据/信息交易等场景，隐私保护也是重中之重，因此，常见的比特币、以太坊等公链并不符合大部分企业应用需求。但是区块链的分布式、不可篡改的历史账本等特性在溯源、跨境电商等场景中又能够避免因各个国家/地区法律法规、货币等造成的复杂操作流程，大大提高效率。因此，针对企业的联盟链也在不断发展。</p>
<p>联盟链严格意义上并不是真正的“去中心化”，它通过引入了权限管理机制（结合企业在现实业务中的角色）来弱化对节点作恶的预防机制，从而能提高效率、应对复杂的业务逻辑。</p>
<p>其中，<code>Hyperledger</code>是由 Linux 基金会维护的一组专注于跨行业分布式技术的开源项目，旨在创建企业级、开源、分布式的分类框架和代码库来支持业务用例，提供中立、开放和社区驱动的基础设施；建立技术社区并推广，开发区块链和共享账本概念验证、使用案例、试验和部署；建立行业标准，鼓励更多企业参与到分布式账本技术的建设和应用中来，形成一个开放的生态体系；教育公众关于区块链科技的市场机会。</p>
<h3 id="设计理念">设计理念</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_design_philosophy.png" alt="hyperledger_design_philosophy"></p>
<p><code>Hyperledger</code>有如下几个核心设计理念：</p>
<ol>
<li>它针对企业具体的业务场景提升效率，并且对溯源等场景有着独特优势，每个企业都可以针对自己的场景维护独立的<code>Hyperledger</code>项目，因此，它不需要像公链一样通过数字货币来激励用户参与区块链系统。</li>
<li>企业的应用场景较为复杂，往往 Hyperledger 只是在其中参与了某个或某些环节，因此与其他现有系统的交互必不可少，因此 Hyperledger 在设计上注重配备完整的 API 以供其他系统调用与交互。</li>
<li><code>Hyperledger</code>的框架结构是模块化、可拓展，企业可以根据具体的业务需求选择不同的模块，避免复杂的业务逻辑和臃肿的系统。</li>
<li>企业应用的安全性是重中之重，尤其是许多应用场景牵扯到高价值交易或敏感数据，因此提供了很多机制来保障安全性（如<code>Fabric</code>的通道机制等）</li>
<li>除了与现有的系统交互外，企业未来的区块链应用中还可能会和很多不同的区块链网络进行交互，因此大部分智能合约/应用应该具备跨区块链网络的可移植性，以形成更复杂和强大的网络。</li>
</ol>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_family.png" alt="hyperledger_family"></p>
<h4 id="框架">框架</h4>
<p><code>Hyperledger</code>下有如下几个项目，其中<code>Fabric</code>目前应用最为广泛，本文也将主要介绍<code>Fabric</code>区块链网络</p>
<ul>
<li>Burrow</li>
<li>Fabric</li>
<li>Grid</li>
<li>Indy</li>
<li>Iroha</li>
<li>Sawtooth</li>
</ul>
<h4 id="工具">工具</h4>
<ol>
<li><code>Hyperledger Cello</code>。主要用于更方便地搭建和管理区块链服务，降低项目框架部署、维护的复杂度；可以用来搭建区块链 BaaS 平台；可以通过 Dashboard 来创建和管理区块链，技术人员可以更方便地进行开发和部署；可以将 SaaS 部署模型引入区块链系统，帮助企业进一步开发框架。</li>
<li><code>Hyperledger Explorer</code>。是一个可视化区块链的操作工具，可以用于创建对用户友好的 Web 应用程序；是首个<code>Hyperledger</code>的区块链浏览器，用户可以查看/调用/部署/查询交易、网络、智能合约、存储等信息。</li>
</ol>
<h2 id="hyperledger-fabric">Hyperledger Fabric</h2>
<p>我们着重来讲讲其中应用最广泛的<code>Fabric</code>项目，它是由 Linux 基金会维护的一个模块化、可拓展的区块链联盟链项目，不依赖任何加密货币，它对有着共同目标（业务需求）但彼此不完全信息的实体之间的业务提供了保护，例如跨境电商、资金交易、溯源等。</p>
<h3 id="架构">架构</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ethereum_architecture_simple.png" alt="ethereum_architecture_simple"></p>
<p>在大部分公链中，架构为<code>Order - Execute - Validate - Update State</code>。如比特币区块链中，如果有一个新交易，会先采用 PoW 机制对 Block 进行排序，然后比特币网络中的每个节点逐个进行验证，最后更新状态。因为需要依序进行验证，这种方式决定了其执行效率相对较低。</p>
<p>而<code>Fabric</code>采用了<code>Execute - Order - Validate - Update State</code>架构。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_architecture.png" alt="hyperledger_fabric_architecture"></p>
<p>收到一笔新的交易后，首先提交至背书节点本地模拟交易执行（并背书），再将已背书交易排序并广播，各个节点对交易进行验证后更新状态。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_architecture_complete.png" alt="hyperledger_fabric_architecture_complete"></p>
<p>正如上述联盟链特性中所述，<code>Fabric</code>网络的加入需要得到许可（身份验证），<code>Fabric</code>网路中的每个节点都有自己的身份。</p>
<p>总的来说，<code>Fabric</code>通过模块化、可插拔的架构来支持企业的复杂业务场景，通过身份验证（绑定现实身份）来弱化节点作恶，使用通道机制大大提升了系统的安全性和隐私保护。</p>
<h4 id="msp-成员服务提供商">MSP 成员服务提供商</h4>
<p>那么，参与<code>Fabric</code>网络的身份是怎样管理的呢？</p>
<p><code>Fabric</code>有一个 MSP(Membership Service Provider)成员管理提供商，它主要用来管理 CA 证书来验证哪些成员是可信任的。<code>Fabric CA</code>模块是独立的，可以管理证书服务，也可以允许第三方 CA 的接入，大大拓展的系统的应用范围。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_ca_structure.png" alt="hyperledger_fabric_ca_structure"></p>
<p>如上图所示，<code>Fabric CA</code>提供了客户端和 SDK 两种方式来和 CA 进行交互，每个<code>Fabric CA</code>都有一个根 CA 或中间 CA，为了进一步提高 CA 的安全性，可以采用集群来搭建中间 CA。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_ca_hierarchy.png" alt="hyperledger_fabric_ca_hierarchy"></p>
<p>更具体一点看 CA 的层级体系，一般是采用根 CA、业务 CA 和用户 CA 三层树结构，所有的下层 CA 会继承上层 CA 的信任体系。根 CA 用来签发业务 CA，业务 CA 用来签发具体的用户 CA（身份认证 CA、交易签名、安全通讯 CA 等）</p>
<h4 id="通道">通道</h4>
<p>上文提到<code>Fabric</code>用 Channel 通道机制来保障交易的安全和隐私性，本质上每一个通道就是一个独立的账本，也是一个独立的区块链，有着不同的世界状态，网络中的一个节点可以同时加入多个通道。这种机制可以很好地划分不同的业务场景，也不用担心交易信息泄漏问题。</p>
<h4 id="链码">链码</h4>
<p><code>Fabric</code>也有类似以太坊的智能合约，称为 Chaincode 链码，智能合约使外部的应用程序可以和<code>Fabric</code>网络中的账本进行交互。不同于<code>Ethereum</code>，<code>Fabric</code>使用 Docker 而不是特定的虚拟机来存放链码，提供了一个安全、轻便的语言执行环境。</p>
<p>链码主要分成系统链码和用户链码两种，系统链码嵌入在系统内，提供对系统进行配置、管理的支持；而用户链码则是运行在单独的 Docker 容器中，提供对上层应用的支持，用户通过链码相关的 API 编写用户链码，即可对账本中状态进行更新操作。</p>
<p>链码经过安装和实例化操作后即可被调用，在安装的时候需要指定具体安装到哪个 Peer 节点（有的节点可以没有链码），实例化时还需要指定通道及背书策略。</p>
<p>链码之间也可以相互调用，从而创建更灵活的应用逻辑。</p>
<h4 id="共识机制">共识机制</h4>
<p><code>Fabric</code>中广义的共识机制包括背书、排序和验证三个环节，狭义的共识是指排序，</p>
<p><code>Fabric</code>区块链网络中，不同参与者之间交易必须按照发生的顺序写到分布式账本中，依赖共识机制，主要有三种：</p>
<ul>
<li>SOLO（只限于开发）</li>
<li>Kafka（一种消息平台）</li>
<li>Raft（相比 Kafka 更中心化）</li>
</ul>
<h4 id="网络协议">网络协议</h4>
<p>那<code>Fabric</code>网络中各个节点的状态分发又是怎么进行的呢？</p>
<p>外界的客户端是通过<code>gRPC</code>来对<code>Fabric</code>网络中的各个节点进行远程调用，而<code>P2P</code>网络中各个节点之间的同步是通过<code>Gossip</code>协议来进行的。</p>
<p><code>Gossip</code>协议主要是用于网络中多个节点之间的数据交换，比较容易实现且容错率很高，原理就是数据发送一方从网络中随机选取若干个节点发送过去，等几个节点接收到这些数据后再随机发送给除了发送方外的若干节点，不断重复，最终所有节点达成一致（复杂度为 LogN）。</p>
<h4 id="分布式账本">分布式账本</h4>
<p>最终所有的交易都会记录到分布式账本中，这也是区块链诸多特性的核心。<code>Fabric</code>中交易可以存储相关业务信息，区块是一组排列后的交易集合，将区块通过密码算法链接起来就是区块链。分布式账本主要记录世界状态（最新的分布式账本状态，一般使用<code>CouchDB</code>以方便查询）和事务日志（世界状态的更新历史，记录区块链结构，使用<code>LevelDB</code>），对账本的每个操作都会记录在日志中，不可篡改。</p>
<h4 id="应用编程接口">应用编程接口</h4>
<p>对于基于<code>Fabric</code>的应用，则主要提供了 SDK 开发工具包和 CLI 命令行两种方式进行交互。</p>
<h3 id="fabric-区块链核心角色">Fabric 区块链核心角色</h3>
<p>首先要提的是<code>Fabric</code>网络中的角色都是逻辑角色，比如 Peer 节点 A 可能既是排序节点，也可能在某些业务中是背书节点，而一个角色也不仅仅由单一节点担任。</p>
<p>接下来介绍一下各个角色的作用和职能。</p>
<p>Clients 客户端主要给交易签名，提交交易 Proposal 给背书节点，接收已经背书后的交易广播给排序节点；背书节点则是本地模拟执行交易 Proposal 验证交易（策略由 Chaincode 制定），签名并返回已背书交易；排序节点则将交易打包为 block 然后广播至各个节点，不参与交易的执行和验证，多个排序节点可以组成 OSN；所有的节点都维护区块链账本。</p>
<h3 id="优势总结">优势总结</h3>
<p><code>Fabric</code>通过将企业应用的各个复杂环节分配到各个逻辑角色节点（背书、排序等），不需要所有节点都承担如排序这样资源消耗较大的操作，消除了网络瓶颈；分配了角色后某些交易只在特定的节点部署和执行，且可以并发执行，大大提升效率和安全性，也隐藏了一些商业逻辑；因此，可以根据不同的业务需要来形成多种灵活的分配方案，极大增强了系统的拓展性。</p>
<p>将共识机制、权限管理、加密机制、账本等模块都设置为可插拔，且不同的链码可以设置不同的背书策略，信任机制更加灵活，这样可以根据业务需要设置自己的高效系统。</p>
<p>成员身份管理的<code>Fabric CA</code>作为单独的项目，能够提供更多功能，也能够与很多第三方 CA 直接进行接入和交互，功能更强大，适合企业复杂的场景。</p>
<p>多通道的特性是不同通道之间的数据彼此隔离，提高了安全性和隐私保护。</p>
<p>链码支持如<code>Java</code>、<code>Go</code>、<code>Node</code>等不同的编程语言，更加灵活，也支持更多第三方拓展应用，降低了业务迁移和维护成本。</p>
<h3 id="fabric-应用开发及交互">Fabric 应用开发及交互</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_application_interact.png" alt="hyperledger_fabric_application_interact"></p>
<p>上图就是作为一个区块链开发者在应用<code>Fabric</code>区块链中的开发和交互流程。</p>
<p>开发者主要负责开发应用和智能合约（链码），应用通过 SDK 与智能合约进行交互，而智能合约的逻辑可以对账本进行<code>get</code>、<code>put</code>、<code>delete</code>等操作。</p>
<h3 id="fabric-工作流程">Fabric 工作流程</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_transaction_flow.png" alt="hyperledger_fabric_transaction_flow"></p>
<p>接下来通过一个完整的交易流来梳理一下<code>Fabric</code>网络的工作原理</p>
<ol start="0">
<li>在所有操作之前，需要向 CA 获取合法身份并且指定通道</li>
<li>首先，Client 提交交易 Proposal（含自己的签名）至背书节点</li>
<li>背书节点接收到交易 Proposal 后用本地状态模拟执行，对交易进行背书、签名并返回（其中包含 Read-Write Set、签名等）</li>
<li>Client 收集到足够的背书后（策略由 Chaincode 制定，如图中示例为得到 2 个背书）提交已背书交易至排序节点（OSN）</li>
<li>排序节点将交易打包成 blocks，排序（不执行或验证交易正确性）并广播至所有节点</li>
<li>所有节点对新 blocks 进行验证并提交至账本</li>
</ol>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hyperledger_fabric_processes.png" alt="hyperledger_fabric_processes"></p>
<p>接下来对每个环节进行一些详细的拆解</p>
<h4 id="执行背书环节">执行/背书环节</h4>
<p>Client 提交交易 proposal 后，背书节点会首先核对 Client 的签名，用本地状态模拟执行，对交易进行签名和 Read-Write Set 回 Clients，R-W Sets 主要包含<code>key</code>, <code>version</code>, <code>value</code>三个属性，Read-Set 包含交易执行中读取的所有变量和其<code>version</code>，对账本进行 write 操作的话<code>version</code>会产生变化，Write-Set 包含所有被编辑的变量及其新值。</p>
<p>背书节点在执行交易时值根据本地区块链的状态检查链码是否正确，执行并返回。</p>
<p>Fabric 支持多种背书策略，Client 在提交至排序节点前会验证是否满足背书要求，值得注意的是如果只做了查询账本操作，Client 不会提交至 OSN。</p>
<p>上文所提到的交易 proposal 主要包括链码、链码的输入值、Client 的签名，而背书节点返回至 Client 的信息则包括返回值、模拟执行结果的 R-W Set 以及背书节点的签名，组合起来则是已背书节点。</p>
<p>背书是相关组织对交易的认可，即相关节点对交易进行签名。对于一个链码交易来说，背书策略是在链码实例化的时候指定的，一笔有效交易必须是背书策略相关组织签名才能生效，本质上<code>Fabric</code>区块链中的交易验证是基于对背书节点的信任，这也是称<code>Fabric</code>并不是严格意义上的去中心化的原因之一。</p>
<p>以下是一个简单的链码执行示例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">SimpleChaincode</span><span class="p">)</span> <span class="nf">InitLedger</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">contractapi</span><span class="p">.</span><span class="nx">TransactionContextInterface</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">product</span> <span class="p">=</span> <span class="nx">Product</span> <span class="p">{</span> <span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;Test Product&#34;</span><span class="p">,</span> <span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;Just a test product to make sure chaincode is running&#34;</span><span class="p">,</span> <span class="nx">CreatedBy</span><span class="p">:</span> <span class="s">&#34;admin&#34;</span><span class="p">,</span> <span class="nx">ProductId</span><span class="p">:</span> <span class="s">&#34;1&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">productAsBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">product</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetStub</span><span class="p">().</span><span class="nf">PutState</span><span class="p">(</span><span class="s">&#34;1&#34;</span><span class="p">,</span> <span class="nx">productAsBytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这个简单示例中，链码的主要操作就是更新了<code>key-value</code>值，经过了这个操作后，<code>version</code>会变化。</p>
<p>执行后返回的 R-W Set 为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">key</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">value</span><span class="p">:</span> <span class="nx">Product</span> <span class="p">{</span> <span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;Test Product&#34;</span><span class="p">,</span> <span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;Just a test product to make sure chaincode is running&#34;</span><span class="p">,</span> <span class="nx">CreatedBy</span><span class="p">:</span> <span class="s">&#34;admin&#34;</span><span class="p">,</span> <span class="nx">ProductId</span><span class="p">:</span> <span class="s">&#34;1&#34;</span> <span class="p">}</span> <span class="err">的</span><span class="nx">Json</span><span class="err">形式</span>
</span></span></code></pre></div><h4 id="排序环节">排序环节</h4>
<p>Client 提交已背书交易至排序节点（排序节点可通过一些共识策略组成 OSN），排序节点接收到交易后，会打包成 blocks 并按照配置中的规则进行排序，在此过程中，只执行排序操作，而不进行任何执行或验证，排序完成后发送至所有节点。</p>
<p>排序服务用来对全网交易达成一致，只负责对交易顺序达成一致，避免了整个网络瓶颈，更容易横向拓展以提升网络效率，目前支持<code>Kafka</code>和<code>Raft</code>两种，<code>Fabric</code>区块链网络的统一/完整性依赖于排序节点的一致性。</p>
<p>Raft 共识机制属于非拜占庭共识机制，使用了领导者和跟随者（Leader 和 Follower）模型，当一个 Leader 被选出，日志信息会从 Leader 向 Follower 单向复制，更容易管理，在设计上允许所有节点都可以称为 Orderer 节点，相比 Kafka 更中心化，其实也允许采用 PBFT 共识机制，但是性能往往很差。</p>
<h4 id="验证环节">验证环节</h4>
<p>当节点接收到由排序节点发送来的区块时，会对区块中的所有交易进行验证并标记是否可信，主要验证两个方面：1.是否满足背书策略。2.交易结构的合法性，是否有状态冲突，如 Read-Set 中的<code>version</code>是否一致等。</p>
<h2 id="总结">总结</h2>
<p>以上就是对<code>Hyperledger Fabric</code>架构的梳理了，虽然取舍了部分去中心化的理念，但是作为一个面向企业应用的开源联盟链，它鼓励了更多企业参与到分布式账本技术的建设和应用中来，现在国内也有很多联盟链的自研平台，如蚂蚁链、趣链等，相信未来会有更多企业参与到这个开放的生态体系！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.cs.hku.hk/index.php/programmes/course-offered?infile=2019/fite3011.html">FITE3011 Distributed Ledger and Blockchain</a>, <em>Allen Au，HKU</em></li>
<li><a href="https://github.com/yingpingzhang/enterprise_blockchain_tutorial">企业级区块链实战教程</a>，<em>张应平</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>COMP7103 Topic 3 Clustering</title><link>https://www.pseudoyu.com/en/2021/03/18/comp7103_topic3/</link><pubDate>Thu, 18 Mar 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/18/comp7103_topic3/</guid><description>COMP7103 Data Mining Topic 3 Clustering Cluster Analysis Finding groups of objects such that the objects in a group will be similar (or related) to one another and different from (or unrelated to) the objects in other groups
Application Understanding Group related documents for browsing, group genes and proteins that have similar functionality, or group stocks with similar price fluctuations Summarization Reduce size of large data sets Types of Clusterings Partitional Clustering A division data objects into non-overlapping subsets (clusters) such that each data object is in exactly one subset Hierarchical clustering A set of nested clusters organized as a hierarchical tree Other Distinctions Between Sets of Clusters Exclusive versus non-exclusive In non-exclusive clusterings, points may belong to multiple clusters Can represent multiple classes or &amp;lsquo;border&amp;rsquo; points Fuzzy versus non-fuzzy In fuzzy clustering, a point belongs to every cluster with some weight between 0 and 1 Weights must sum to 1 Probabilistic clustering has similar characteristics Partial versus complete In some cases, we only want to cluster some of the data Heterogeneous versus homogeneous Cluster of widely different sizes, shapes, and densities Well-separated clusters A cluster is a set of points such that any point in a cluster is closer (or more similar) to every other point in the cluster than to any point not in the cluster</description><content:encoded><![CDATA[<h1 id="comp7103-data-mining">COMP7103 Data Mining</h1>
<h2 id="topic-3-clustering">Topic 3 Clustering</h2>
<h3 id="cluster-analysis">Cluster Analysis</h3>
<p>Finding groups of objects such that the objects in a group will be similar (or related) to one another and different from (or unrelated to) the objects in other groups</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cluster_analysis.png" alt="cluster_analysis"></p>
<h4 id="application">Application</h4>
<ul>
<li>Understanding
<ul>
<li>Group related documents for browsing, group genes and proteins that have similar functionality, or group stocks with similar price fluctuations</li>
</ul>
</li>
<li>Summarization
<ul>
<li>Reduce size of large data sets</li>
</ul>
</li>
</ul>
<h3 id="types-of-clusterings">Types of Clusterings</h3>
<ul>
<li>Partitional Clustering
<ul>
<li>A division data objects into non-overlapping subsets (clusters) such that each data object is in exactly one subset
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/partitional_clustering.png" alt="partitional_clustering"></li>
</ul>
</li>
<li>Hierarchical clustering
<ul>
<li>A set of nested clusters organized as a hierarchical tree
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hierarchical_clustering.png" alt="hierarchical_clustering"></li>
</ul>
</li>
<li>Other Distinctions Between Sets of Clusters
<ul>
<li>Exclusive versus non-exclusive
<ul>
<li>In non-exclusive clusterings, points may belong to multiple clusters</li>
<li>Can represent multiple classes or &lsquo;border&rsquo; points</li>
</ul>
</li>
<li>Fuzzy versus non-fuzzy
<ul>
<li>In fuzzy clustering, a point belongs to every cluster with some weight between 0 and 1</li>
<li>Weights must sum to 1</li>
<li>Probabilistic clustering has similar characteristics</li>
</ul>
</li>
<li>Partial versus complete
<ul>
<li>In some cases, we only want to cluster some of the data</li>
</ul>
</li>
<li>Heterogeneous versus homogeneous
<ul>
<li>Cluster of widely different sizes, shapes, and densities</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="well-separated-clusters">Well-separated clusters</h4>
<p>A cluster is a set of points such that any point in a cluster is closer (or more similar) to every other point in the cluster than to any point not in the cluster</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/wellseparated_clusters.png" alt="wellseparated_clusters"></p>
<h4 id="center-based-clusters">Center-based clusters</h4>
<p>A cluster is a set of objects such that an object in a cluster is closer (more similar) to the “center” of a cluster, than to the center of any other cluster</p>
<p>The center of a cluster is often a centroid, the average of all the points in the cluster, or a medoid, the most “representative” point of a cluster</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/center_based_clusters.png" alt="center_based_clusters"></p>
<h4 id="contiguity-based-clusters">Contiguity-Based clusters</h4>
<p>A cluster is a set of points such that a point in a cluster is closer (or more similar) to one or more other points in the cluster than to any point not in the cluster</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/contiguity_based_clusters.png" alt="contiguity_based_clusters"></p>
<h4 id="density-based-clusters">Density-based clusters</h4>
<p>A cluster is a dense region of points, which is separated by low-density regions, from other regions of high density</p>
<p>Used when the clusters are irregular or intertwined, and when noise and outliers are present</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/density_based_clusters.png" alt="density_based_clusters"></p>
<h4 id="conceptual-clusters">Conceptual Clusters</h4>
<p>Finds clusters that share some common property or represent a particular concept</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/conceptual_clusters.png" alt="conceptual_clusters"></p>
<h3 id="k-means">K-means</h3>
<ul>
<li>Input
<ul>
<li>integer k&gt;0, set S of points in the euclidean space</li>
</ul>
</li>
<li>Output
<ul>
<li>A (partitional) clustering of S</li>
</ul>
</li>
</ul>
<p>Step</p>
<ol>
<li>Select k points in S as the initial centroids</li>
<li>Repeat until the centroids do not change
<ul>
<li>Form k clusters by assigning points to the closest centroids</li>
<li>For each cluster recompute its centroid</li>
</ul>
</li>
</ol>
<p>Feature</p>
<ul>
<li>Initial centroids are often chosen randomly</li>
<li>Centroids are often the mean of the points in the cluster</li>
<li>&lsquo;Closeness&rsquo; is measured by Euclidean distance, cosine similarity, correlation, etc.</li>
</ul>
<h4 id="importance-of-choosing-initial-centroids">Importance of Choosing Initial Centroids</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/choosing_Initial_centroids.png" alt="choosing_Initial_centroids"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/choosing_Initial_centroids_2.png" alt="choosing_Initial_centroids_2"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/choosing_Initial_centroids_3.png" alt="choosing_Initial_centroids_3"></p>
<h4 id="evaluating-k-means-clusterings">Evaluating K-means Clusterings</h4>
<ul>
<li>Most common measure is Sum of Squared Error (SSE)
<ul>
<li>Given two clusterings, we can choose the one with smallest error</li>
<li>Decreasing K might decrease SSE</li>
<li>However, good clusterings with small K might have a lower SSE than poor clusterings with higher K</li>
</ul>
</li>
</ul>
<h4 id="k-means-always-terminates">K-Means Always Terminates</h4>
<ul>
<li>Theorem
<ul>
<li>K-means with Euclidean distance as distance always terminates</li>
<li>Proof follows from the following lemmas</li>
<li>We cannot obtain the same clustering more than once, otherwise we get the same SSE value</li>
</ul>
</li>
<li>Lemma 1
<ul>
<li>The point y that minimizes the SSE in a cluster C is the mean of all points in C</li>
</ul>
</li>
<li>Lemma 2
<ul>
<li>SSE strictly decreases.</li>
</ul>
</li>
<li>Lemma 3</li>
<li>The total number of possible clusterings is finite (&lt; n^k).</li>
</ul>
<h4 id="solutions-to-initial-centroids-problem">Solutions to Initial Centroids Problem</h4>
<ul>
<li>Multiple runs (helps but low success probability)</li>
<li>Sample and use hierarchical clustering to determine initial centroids</li>
<li>Select more than k initial centroids and then select among these initial centroids</li>
<li>Postprocessing</li>
<li>K-Means++</li>
</ul>
<h4 id="handling-empty-clusters">Handling Empty Clusters</h4>
<p><em>Basic K-means algorithm can yield less than k clusters (so called empty clusters)</em></p>
<ul>
<li>Pick the points that contributes most to SSE and move them to empty cluster</li>
<li>Pick the points from the cluster with the highest SSE</li>
<li>If there are several empty clusters, the above can be repeated several times</li>
</ul>
<h4 id="updating-centers-incrementally">Updating Centers Incrementally</h4>
<ul>
<li>In the basic K-means algorithm, centroids are updated after all points are assigned to a centroid</li>
<li>An alternative is to update the centroids after each assignment (incremental approach)</li>
<li>More precisely, let C1 ,C2 ,&hellip;,C k be the current clusters. Reassign all points one by one to the best cluster. Let p in C i be the current point and suppose we re-assign it to Cj . Then, after that, recompute the centroid of C i and Cj
<ul>
<li>Never get an empty cluster</li>
<li>Introduces an order dependency</li>
<li>More expensive</li>
</ul>
</li>
</ul>
<h4 id="pre-processing-and-post-processing">Pre-processing and Post-processing</h4>
<p>Pre-processing</p>
<ul>
<li>Normalize the data</li>
<li>Eliminate outliers</li>
</ul>
<p>Post-processing</p>
<ul>
<li>Eliminate small clusters that may represent outliers</li>
<li>Split &rsquo;loose&rsquo; clusters, i.e., clusters with relatively high SSE</li>
<li>Merge clusters that are ‘close’ and that have relatively low SSE</li>
</ul>
<h4 id="limitations-of-k-means">Limitations of K-means</h4>
<ul>
<li>K-means has problems when clusters are of differing
<ul>
<li>Sizes
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/kmeans_limitations.png" alt="kmeans_limitations"></li>
<li>Densities
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/kmeans_limitations_density.png" alt="kmeans_limitations_density"></li>
<li>Non-globular shapes
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/kmeans_limitations_globular.png" alt="kmeans_limitations_globular"></li>
</ul>
</li>
<li>K-means has problems when the data contains outliers</li>
</ul>
<h4 id="overcoming-k-means-limitations">Overcoming K-means Limitations</h4>
<p>Use many clusters, find parts of clusters, but need to put together</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/overcome_kmeans_limitations_1.png" alt="overcome_kmeans_limitations_1"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/overcome_kmeans_limitations_2.png" alt="overcome_kmeans_limitations_2"></p>
<h3 id="hierarchical-clustering">Hierarchical clustering</h3>
<ul>
<li>Produces a set of nested clusters organized as a hierarchical tree</li>
<li>Can be visualized as a dendrogram
<ul>
<li>A tree like diagram that records the sequences of merges or splits
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/hierarchical_clustering_dendrogram.png" alt="hierarchical_clustering_dendrogram"></li>
</ul>
</li>
</ul>
<h4 id="strengths-of-hierarchical-clustering">Strengths of Hierarchical Clustering</h4>
<ul>
<li>Do not have to assume any particular number of clusters
<ul>
<li>Any desired number of clusters can be obtained by ‘cutting’ the dendogram at the proper level</li>
</ul>
</li>
<li>They may correspond to meaningful taxonomies
<ul>
<li>Example in biological sciences (e.g., animal kingdom, phylogeny reconstruction, &hellip;)</li>
</ul>
</li>
</ul>
<h4 id="two-main-types-of-hierarchical-clustering">Two main types of hierarchical clustering</h4>
<ul>
<li>Agglomerative
<ul>
<li>Start with the points as individual clusters</li>
<li>At each step, merge the closest pair of clusters until only one cluster (or k clusters) left</li>
</ul>
</li>
<li>Divisive
<ul>
<li>Start with one, all-inclusive cluster</li>
<li>At each step, split a cluster until each cluster contains a point (or there are k clusters)</li>
</ul>
</li>
</ul>
<p>Traditional hierarchical algorithms use a similarity or distance matrix</p>
<ul>
<li>Merge or split one cluster at a time</li>
</ul>
<h4 id="agglomerative-clustering-algorithm">Agglomerative Clustering Algorithm</h4>
<p><em>Most popular hierarchical clustering technique</em></p>
<ul>
<li>Let each data point be a cluster</li>
<li>Compute the distance matrix n x n</li>
<li>Repeat
<ul>
<li>Merge the two closest clusters</li>
<li>Update distance matrix</li>
</ul>
</li>
<li>Until only a single cluster remains</li>
</ul>
<p>Procedure</p>
<ol>
<li>Start with clusters of individual points and a distance matrix n x n
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/agglomerative_clustering_algorithm_1.png" alt="agglomerative_clustering_algorithm_1"></li>
<li>After some merging steps, we have some clusters
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/agglomerative_clustering_algorithm_2.png" alt="agglomerative_clustering_algorithm_2"></li>
<li>We want to merge the two closest clusters (C2 and C5) and update the distance matrix
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/agglomerative_clustering_algorithm_3.png" alt="agglomerative_clustering_algorithm_3"></li>
<li>The question is “How do we update the distance matrix
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/agglomerative_clustering_algorithm_4.png" alt="agglomerative_clustering_algorithm_4"></li>
</ol>
<h4 id="how-to-define-inter-cluster-similarity">How to Define Inter-Cluster Similarity</h4>
<ul>
<li>MIN
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/inter_cluster_similarity_1.png" alt="inter_cluster_similarity_1"></li>
<li>MAX
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/inter_cluster_similarity_2.png" alt="inter_cluster_similarity_2"></li>
<li>Group Average
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/inter_cluster_similarity_3.png" alt="inter_cluster_similarity_3"></li>
<li>Distance Between Centroids
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/inter_cluster_similarity_4.png" alt="inter_cluster_similarity_4"></li>
<li>Other methods driven by an objective function
<ul>
<li>Ward’s Method uses squared error</li>
</ul>
</li>
</ul>
<h4 id="problems-and-limitations">Problems and Limitations</h4>
<ul>
<li>Once a decision is made to combine two clusters, it cannot be undone</li>
<li>No objective function is directly minimized</li>
<li>Different schemes have problems with one or more of the following
<ul>
<li>Sensitivity to noise and outliers</li>
<li>Difficulty handling different sized clusters and convex shapes</li>
<li>Breaking large clusters</li>
</ul>
</li>
</ul>
<h3 id="cluster-validity">Cluster Validity</h3>
<p>Numerical measures that are applied to judge various aspects of cluster validity, are classified into the following three types</p>
<ul>
<li>External Index
<ul>
<li>Used to measure the extent to which cluster labels match externally supplied class labels
<ul>
<li>Entropy</li>
</ul>
</li>
</ul>
</li>
<li>Internal Index
<ul>
<li>Used to measure the goodness of a clustering structure without respect to external information
<ul>
<li>Sum of Squared Error (SSE)</li>
</ul>
</li>
</ul>
</li>
<li>Relative Index
<ul>
<li>To compare two different clusterings or clusters
<ul>
<li>An external or internal index is used for this function, e.g., SSE or entropy</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="internal-measures-sse">Internal Measures: SSE</h4>
<ul>
<li>Clusters in more complicated figures aren’t well separated</li>
<li>SSE is good for comparing two clusterings or two clusters (average SSE)</li>
<li>Can also be used to estimate the number of clusters</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/internal_measures_SSE.png" alt="internal_measures_SSE"></p>
<h4 id="external-measures-of-cluster-validity-entropy">External Measures of Cluster Validity: Entropy</h4>
<ul>
<li>Definition: Entropy
<ul>
<li>Entropy measure how uncertain is an event, the larger the entropy the more uncertain is the event</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/external_measures_of_cluster_validity_Entropy.png" alt="external_measures_of_cluster_validity_Entropy"></p>
<p><em>&ldquo;The validation of clustering structures is the most difficult and frustrating part of cluster analysis. Without a strong effort in this direction, cluster analysis will remain a black art accessible only to those true believers who have experience and great courage.&rdquo;</em></p>
<h3 id="k-means-1">K-means++</h3>
<ul>
<li>Initialize the centroids as in Algorithm 1</li>
<li>Run K-means algorithm to improve the clustering</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/kmeans_plus_plus_algorithm1.png" alt="kmeans_plus_plus_algorithm1"></p>
<h4 id="algorithm-comparison">Algorithm Comparison</h4>
<ul>
<li>K-means
<ul>
<li>No guarantees on the quality of the solution</li>
<li>It always terminates</li>
<li>Running time could be exponential but it is OK in practice</li>
</ul>
</li>
<li>K-means++
<ul>
<li>It always terminates</li>
<li>O(log k)-approximation on the quality of the solution</li>
<li>In practice the advantage is noticeable for large k</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>COMP7801 Topic 4 Top-k</title><link>https://www.pseudoyu.com/en/2021/03/06/comp7801_topic4/</link><pubDate>Sat, 06 Mar 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/03/06/comp7801_topic4/</guid><description>Background Multidimensional Data Flat relational tables Multimedia feature vectors Data warehouse data Spatial data Text documents Attribute Types Attributes of multidimensional tuples may have variable types Ordinal (e.g., age, salary) Nominal categorical values (e.g., color, religion) Binary (e.g., gender, owns_property)Basic queries: range, NN, similarity Basic Queries (Range) selection query Returns the records that qualify a (multidimensional) range predicate Example: Return the employees of age between 45 and 50 and salary above $100,000 Distance (similarity) query Returns the records that are within a distance from a reference record.</description><content:encoded><![CDATA[<h2 id="background">Background</h2>
<h3 id="multidimensional-data">Multidimensional Data</h3>
<ul>
<li>Flat relational tables</li>
<li>Multimedia feature vectors</li>
<li>Data warehouse data</li>
<li>Spatial data</li>
<li>Text documents</li>
</ul>
<h3 id="attribute-types">Attribute Types</h3>
<ul>
<li>Attributes of multidimensional tuples may have variable types
<ul>
<li>Ordinal (e.g., age, salary)</li>
<li>Nominal categorical values (e.g., color, religion)</li>
<li>Binary (e.g., gender, owns_property)</li>
</ul>
</li>
<li>Basic queries: range, NN, similarity</li>
</ul>
<h3 id="basic-queries">Basic Queries</h3>
<ul>
<li>(Range) selection query
<ul>
<li>Returns the records that qualify a (multidimensional) range predicate</li>
<li>Example:
<ul>
<li>Return the employees of age between 45 and 50 and salary above $100,000</li>
</ul>
</li>
</ul>
</li>
<li>Distance (similarity) query
<ul>
<li>Returns the records that are within a distance from a reference record.</li>
<li>Example:
<ul>
<li>Find images with feature vectors of Euclidean distance at most ε with the feature vector of a given image</li>
</ul>
</li>
</ul>
</li>
<li>Nearest neighbor (similarity) query
<ul>
<li>Replaces distance bound by ranking predicate</li>
</ul>
</li>
</ul>
<h2 id="top-k-search-methods">Top-k Search Methods</h2>
<ul>
<li>Rank aggregation</li>
<li>Index-based methods</li>
</ul>
<h3 id="top-k-query">Top-k Query</h3>
<ul>
<li>Given a set of objects (e.g., relational tuples),</li>
<li>Returns the k objects with the highest combined score, based on an aggregate function f.</li>
<li>Example:
<ul>
<li>Relational table containing information about restaurants, with attributes(e.g. price, quality, location)</li>
<li>f: sum(-price, quality, -dist(location,my_hotel))‏</li>
<li>attribute value ranges are usually normalized
<ul>
<li>E.g., all values in a (0,1) range</li>
<li>otherwise some attribute may be favored in f</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="top-k-query-variants">Top-k Query Variants</h3>
<ul>
<li>
<p>Apply on single table, or ranked lists of tuples ordered by individual attributes
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Top_k_Query_Variants_1.jpg" alt="Top_k_Query_Variants_1"></p>
</li>
<li>
<p>Ranked inputs in the same or different servers (centralized or distributed data)
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Top_k_Query_Variants_2.jpg" alt="Top_k_Query_Variants_1"></p>
</li>
<li>
<p>Standalone query or operator in a more complex query plan
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Top_k_Query_Variants_3.jpg" alt="Top_k_Query_Variants_3"></p>
</li>
<li>
<p>Incremental retrieval of objects with highest scores (k is not predefined)</p>
</li>
<li>
<p>Top-k joins</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="err"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">House</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="n">School</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="k">location</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="k">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">price</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="err">∗</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">tuition</span><span class="w"> </span><span class="err"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>
<p>Probabilistic/approximate top-k retrieval</p>
</li>
<li>
<p>Random and/or sorted accesses at ranked inputs</p>
</li>
</ul>
<h3 id="top-k-query-evaluation">Top-k Query Evaluation</h3>
<ul>
<li>
<p>Most solutions assume distributive, monotone aggregate functions (e.g. f=sum)</p>
<ul>
<li>distributive: f(x,y,z,w)= f(f(x,y),f(z,w))
<ul>
<li>e.g., A+B+C+D = (A+B) + (C+D)</li>
</ul>
</li>
<li>monotone: if x&lt;y and z&lt;w, then f(x,z)&lt;f(y,w)</li>
</ul>
</li>
<li>
<p>Solutions based on 1-D ordering and merging sorted lists (rank aggregation)</p>
</li>
<li>
<p>Solutions based on multidimensional indexing</p>
</li>
</ul>
<h2 id="rank-aggregation">Rank Aggregation</h2>
<ul>
<li>Solutions based on 1-D ordering and merging sorted lists (rank aggregation)</li>
<li>Assume that there is a total ranking of theobjects for each attributethat can be used in top-kqueries</li>
<li>These sorted inputs canbe accessed sequentiallyand/or by random accesses</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Rank_Aggregation.jpg" alt="Rank_Aggregation"></p>
<h3 id="advantages-and-drawbacks">Advantages and Drawbacks</h3>
<ul>
<li>Advantages：
<ul>
<li>can be applied on any subset of inputs (arbitrary subspace)</li>
<li>appropriate for distributed data</li>
<li>appropriate for top-k joins</li>
<li>easy to understand and implement</li>
</ul>
</li>
<li>Drawbacks:
<ul>
<li>slower than index-based methods</li>
<li>require inputs to be sorted</li>
</ul>
</li>
</ul>
<h3 id="ta-threshold-algorithm">TA: Threshold Algorithm</h3>
<h4 id="introduction">Introduction</h4>
<ul>
<li>Iteratively retrieves objects and their atomic scores from the ranked inputs in a round-robin fashion.</li>
<li>For each encountered object x, perform random accesses to the inputs where x has not been seen.</li>
<li>Maintain top-k objects seen so far.</li>
<li>T = f($l_1$, . . . , $l_m$) is the score derived when applying the aggregation function to the last atomic scores seen at each input. If the score of the k-th object is no smaller than T, terminate.</li>
</ul>
<h4 id="example-of-tak1fsum">Example of TA(k=1,f=sum)</h4>
<ul>
<li><strong>STEP 1</strong>
<ul>
<li>top-1 is c, with score 2.0</li>
<li>T=sum(0.9,0.9,0.9)=2.7</li>
<li>T&gt;top-1, we proceed to another round of accesses</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/TA_Step_1.jpg" alt="TA_Step_1"></p>
<ul>
<li><strong>STEP 2</strong>
<ul>
<li>top-1 is b, with score 2.2</li>
<li>T=sum(0.8,0.8,0.9)=2.5</li>
<li>T&gt;top-1, we proceed to another round of accesses</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/TA_Step_2.jpg" alt="TA_Step_2"></p>
<ul>
<li><strong>STEP 3</strong>
<ul>
<li>top-1 is b, with score 2.2</li>
<li>T=sum(0.6,0.6,0.8)=2.0</li>
<li>T≤top-1, terminate and output (b,2.2)</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/TA_Step_3.jpg" alt="TA_Step_3"></p>
<h4 id="properties-of-ta">Properties of TA</h4>
<ul>
<li>Used as a standard module for merging ranked lists in many applications</li>
<li>Usually finds the result quickly</li>
<li>Depends on random accesses, which can be expensive</li>
<li>random accesses are impossible in some cases
<ul>
<li>e.g., an API allows to access objects incrementally by ranking score, but does not provide the score of a given object</li>
</ul>
</li>
</ul>
<h3 id="nra-no-random-accesses">NRA: No Random Accesses</h3>
<h4 id="introduction-1">Introduction</h4>
<ul>
<li>Iteratively retrieves objects and their atomic scores from the ranked inputs in a round-robin fashion.</li>
<li>For each object x seen so far at any input maintain:
<ul>
<li>f_x_ub: upper bound for x’s aggregate score (f_x)</li>
<li>f_x_lb: lower bound for x’s aggregate score (f_x)</li>
</ul>
</li>
<li>W_k = k objects with the largest f^lb.</li>
<li>If the smallest f^lb in W_k is at least the largest f_x_ub of any object x not in W_k, then terminate and report W_k as top-k result.</li>
</ul>
<h4 id="example-of-nrak1fsum">Example of NRA(k=1,f=sum)</h4>
<ul>
<li><strong>STEP 1</strong></li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/NRA_Step_1.jpg" alt="NRA_Step_1"></p>
<ul>
<li><strong>STEP 2</strong></li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/NRA_Step_2.jpg" alt="NRA_Step_2"></p>
<ul>
<li><strong>STEP 3</strong></li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/NRA_Step_3.jpg" alt="NRA_Step_3"></p>
<ul>
<li><strong>STEP 4</strong></li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/NRA_Step_4.jpg" alt="NRA_Step_4"></p>
<h4 id="nra-properties">NRA Properties</h4>
<ul>
<li>More generic than TA, since it does not depend on random accesses</li>
<li>Can be cheaper than TA, if random accesses are very expensive</li>
<li>NRA accesses objects sequentially from all inputs and updates the upper bounds for all objects seen so far unconditionally.
<ul>
<li>Cost: O(n) per access (the expected distinct number of objects accessed so far is O(n))</li>
<li>No input list is pruned until the algorithm terminates</li>
</ul>
</li>
</ul>
<h3 id="lara-lattice-based-rank-aggregation">LARA: LAttice-based Rank Aggregation</h3>
<ul>
<li>LARA: An efficient NRA implementation</li>
<li>Based on 3 observations about the top-k candidates</li>
<li>Operates differently in the two (growing, shrinking) phases</li>
<li>Takes its name from the lattice used in the shrinking phase</li>
<li>Extendable to various top-k query variants</li>
</ul>
]]></content:encoded></item><item><title>COMP7801 Topic 3 Spatial Networks</title><link>https://www.pseudoyu.com/en/2021/02/27/comp7801_topic3/</link><pubDate>Sat, 27 Feb 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/27/comp7801_topic3/</guid><description>Background Network Distance In many real applications accessibility of objects is restricted by a spatial network Examples Driver looking for nearest gas station Mobile user looking for nearest restaurant Shortest path distance used instead of Euclidean distance SP(a,b) = path between a and b with the minimum accumulated length Challenges Euclidean distance is no longer relevant R-tree may not be useful, when search is based on shortest path distance Graph cannot be flattened to a one-dimensional space Special storage and indexing techniques for graphs are required Graph properties may vary directed vs.</description><content:encoded><![CDATA[<h3 id="background">Background</h3>
<h4 id="network-distance">Network Distance</h4>
<ul>
<li>In many real applications accessibility of objects is restricted by a spatial network
<ul>
<li>Examples
<ul>
<li>Driver looking for nearest gas station</li>
<li>Mobile user looking for nearest restaurant</li>
</ul>
</li>
</ul>
</li>
<li><strong>Shortest path distance</strong> used instead of Euclidean distance</li>
<li>SP(a,b) = path between a and b with the minimum accumulated length</li>
</ul>
<h4 id="challenges">Challenges</h4>
<ul>
<li>Euclidean distance is no longer relevant
<ul>
<li>R-tree may not be useful, when search is based on shortest path distance</li>
</ul>
</li>
<li>Graph cannot be flattened to a one-dimensional space
<ul>
<li>Special storage and indexing techniques for graphs are required</li>
</ul>
</li>
<li>Graph properties may vary
<ul>
<li>directed vs. undirected</li>
<li>length, time, etc. as edge weights</li>
</ul>
</li>
</ul>
<h3 id="modeling-and-storing-spatial-networks">Modeling and Storing Spatial Networks</h3>
<h4 id="modeling-spatial-networks">Modeling Spatial Networks</h4>
<ul>
<li>Adjacency matrix only appropriate for dense graphs</li>
<li>Spatial networks are sparse: use adjacency lists instead</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Modeling_Spatial_Networks.png" alt="Modeling_Spatial_Networks"></p>
<h4 id="storing-large-spatial-networks">Storing Large Spatial Networks</h4>
<ul>
<li>Problem: adjacency lists representation may not fit in memory if graph is large</li>
<li>Solution:
<ul>
<li>partition adjacency lists to disk blocks (based on proximity)</li>
<li>create B+-tree index on top of partitions (based on node-id)</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Storing_Large_Spatial_Network.png" alt="Storing_Large_Spatial_Network"></p>
<h3 id="shortest-path-search">Shortest Path Search</h3>
<ul>
<li>Given a graph G(V,E), and two nodes s,t in V, find the shortest path from s to t</li>
<li>A classic algorithmic problem</li>
<li>Studied extensively since the 1950’s</li>
<li>Several methods:
<ul>
<li>Dijkstra’s algorithm</li>
<li>A*-search</li>
<li>Bi-directional search</li>
</ul>
</li>
</ul>
<h4 id="dijkstras-shortest-path-search">Dijkstra’s Shortest Path Search</h4>
<ul>
<li>idea: incrementally explore the graph around s, visitingnodes in distance order to suntil t is found (like NN)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Dijkstra_1.png" alt="Dijkstra_1"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Dijkstra_2.png" alt="Dijkstra_2"></p>
<h4 id="algorithm">Algorithm</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Dijkstra_Algorithm.png" alt="Dijkstra_Algorithm"></p>
<h4 id="example">Example</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Dijkstra_Example.png" alt="Dijkstra_Example"></p>
<h4 id="illustrating">Illustrating</h4>
<ul>
<li>Find the shortest path between a and b.</li>
<li>Worst-case performance O(|E| + |V|log|V| )</li>
</ul>
<h3 id="a-search">A*-search</h3>
<h4 id="description">Description</h4>
<ul>
<li>
<p>Dijkstra’s search explores nodes around s without a specific search direction until t is found</p>
</li>
<li>
<p>Idea: improve Dijkstra’s algorithm by directing search towards t</p>
</li>
<li>
<p>Due to triangular inequality, Euclidean distance is a lower bound of network distance</p>
</li>
<li>
<p>Use Euclidean distance to lower bound network distance based on known information:</p>
<ul>
<li>Nodes are visited in increasing SPD(s,v)+dist(v,t) order
<ul>
<li>SPD(s,v): shortest path distance from s to v (computed by Dijkstra)</li>
<li>dist(v,t): Euclidean distance between v and t</li>
</ul>
</li>
<li>Original Dijkstra visits nodes in increasing SPD(s,v) order</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A_Star_1.png" alt="A_Star_1"></p>
<h4 id="example-1">Example</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/A_Star_Example.png" alt="A_Star_Example"></p>
<h4 id="illustrating-1">Illustrating</h4>
<ul>
<li>Find the shortest path between s and t.
<ul>
<li>f(p) = Dijkstra_dist(s, p) + Euclidean_dist(p, t)</li>
</ul>
</li>
</ul>
<h3 id="bi-directional-search">Bi-directional search</h3>
<ul>
<li>Dijkstra’s search explores nodes around s without a specific search direction until t is found</li>
<li>Idea: search can be performed concurrently from s and from t (backwards)</li>
<li>The shortest path tree of s and the (backward) shortest path tree of t are computed in concurrently
<ul>
<li>One queue Q_s for forward and one queue Q_t for backward search</li>
<li>Node visits are prioritized based on min(SPD(s,v), SPD(v,t))</li>
<li>If v already visited from s and v is in Qt, then candidate shortest path: p(s,v)+p(v,t)  (if v already visited from t and v in Q_s symmetric)</li>
<li>If v is visited by both s and t terminate search; report best candidate shortest path</li>
</ul>
</li>
</ul>
<h4 id="example-2">Example</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Bi_Directional_Example.png" alt="Bi_Directional_Example"></p>
<h3 id="discussions">Discussions</h3>
<ul>
<li>A* and bi-directional search can be combined to powerful search techniques</li>
<li>A* can only be applied if lower distance bounds are available</li>
<li>All versions of Dijkstra’s search require non-negative edge weights
<ul>
<li>Bellman-Ford is an algorithm for arbitrary negative edges</li>
</ul>
</li>
</ul>
<h2 id="spatial-queries-over-spatial-networks">Spatial queries over spatial networks</h2>
<h3 id="introduction">Introduction</h3>
<h4 id="sourcedestination-on-edges">Source/Destination on Edges</h4>
<ul>
<li>We have assumed that points s and t are nodes of the network</li>
<li>In practice s and t could be arbitrary points on edges
<ul>
<li>Mobile user locations</li>
</ul>
</li>
<li>Solve problem by introducing 2 more nodes</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Source_Destination_on_Edges.png" alt="Source_Destination_on_Edges"></p>
<h4 id="spatial-queries-over-spatial-networks-1">Spatial Queries over Spatial Networks</h4>
<ul>
<li>Data:
<ul>
<li>A (static) spatial network (e.g., city map)</li>
<li>A (dynamic) set of spatial objects</li>
</ul>
</li>
<li>Spatial queries based on network distance:
<ul>
<li>Selections. Ex: find gas stations within 10km driving distance from here</li>
<li>Nearest neighbor search. Ex: find k nearest restaurants from present position</li>
<li>Joins. Ex: find pairs of restaurants and hotels at most 100m from each other</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Spatial_Queries_over_Spatial_Networks.png" alt="Spatial_Queries_over_Spatial_Networks"></p>
<h4 id="methodology">Methodology</h4>
<ul>
<li>Store (and index) the spatial network
<ul>
<li>Graph component (indexes connectivity information)</li>
<li>Spatial component (indexes coordinates of nodes, edges, etc.)</li>
</ul>
</li>
<li>Store (and index) the sets of spatial objects
<ul>
<li>Ex., one spatial relation for restaurants, one spatial relation for hotels, one relation for mobile users, etc.</li>
</ul>
</li>
<li>Given a spatial location p, use spatial component of network to find the network edge containing p</li>
<li>Given a network edge, use network component to traverse neighboring edges</li>
<li>Given a neighboring edge, use spatial indexes to find objects on them</li>
</ul>
<h3 id="evaluation-of-spatial-selections-1">Evaluation of Spatial Selections (1)</h3>
<ul>
<li>Query: find all objects in spatial relation R, within network distance ε from location q</li>
<li>Method:
<ul>
<li>Use spatial index of network (R-tree indexing network edges) to find edge n_1n_2, which includes q</li>
<li>Use adjacency index of network (graph component) and apply Dijkstra’s algorithm to progressively retrieve edges that are within network distance ε from location q</li>
<li>For all these edges apply a spatial selection on the R-tree that indexes R to find the results</li>
</ul>
</li>
</ul>
<h4 id="example-3">Example</h4>
<ul>
<li>
<p>Example: Find restaurants at most distance 10 from q</p>
</li>
<li>
<p>Step 1: find network edge which contains q</p>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_Spatial_Selections_1.png" alt="Evaluation_of_Spatial_Selections_1"></p>
<ul>
<li>Step 2: traverse network to find all edges (or parts of them within distance 10 from q)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_Spatial_Selections_2.png" alt="Evaluation_of_Spatial_Selections_2"></p>
<ul>
<li>Step 3: find restaurants that intersect the subnetwork computed at step 2</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_Spatial_Selections_3.png" alt="Evaluation_of_Spatial_Selections_3"></p>
<h3 id="evaluation-of-spatial-selections-2">Evaluation of Spatial Selections (2)</h3>
<h4 id="description-1">Description</h4>
<ul>
<li>Query: find all objects in spatial relation R, within network distance ε from location q</li>
<li>Alternative method based on Euclidean bounds:
<ul>
<li>Assumption: Euclidean distance is a lower-bound of network distance:
<ul>
<li>dist(v,u) ≤ SPD(v,u), for any v,u</li>
</ul>
</li>
<li>Use R-tree on R to find set S of objects such that for each o in S: dist(q,o) ≤ ε</li>
<li>For each o in S:
<ul>
<li>find where o is located in the network (use Network R-tree)</li>
<li>compute SPD(q,o) (e.g. use A*)</li>
<li>If SPD(q,o) ≤ ε then output o</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="example-4">Example</h4>
<ul>
<li>
<p>Example: Find restaurants at most distance 10 from q</p>
</li>
<li>
<p>Step 1: find restaurants for which the Euclidean distance to q is at most 10: S={r1,r2,r3}</p>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_Spatial_Selections_Example_1.png" alt="Evaluation_of_Spatial_Selections_Example_1"></p>
<ul>
<li>Step 2: for each restaurant in S, compute SPD to q and verify if it is indeed a correct result</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_Spatial_Selections_Example_2.png" alt="Evaluation_of_Spatial_Selections_Example_2"></p>
<h3 id="evaluation-of-nn-search-1">Evaluation of NN search (1)</h3>
<ul>
<li>Query: find in spatial relation R the nearest object to a given location q</li>
<li>Method:
<ul>
<li>Use spatial index of network (R-tree indexing network edges) to find edge n_1n_2, which includes q</li>
<li>Use adjacency index of network (graph component) and apply Dijkstra’s algorithm to progressively retrieve edges in order of their distance to q</li>
<li>For each edge apply a spatial selection on the R-tree that indexes R to find any objects</li>
<li>Keep track of nearest object found so far; use its shortest path distance to terminate network browsing</li>
</ul>
</li>
</ul>
<h4 id="example-5">Example</h4>
<ul>
<li>Example: Find nearest restaurant to q</li>
<li>Step: in ppt 31</li>
</ul>
<h3 id="evaluation-of-nn-search-2">Evaluation of NN search (2)</h3>
<ul>
<li>Query: find in spatial relation R the nearest object to a given location q</li>
<li>Alternative method based on Euclidean bounds:
<ul>
<li>Assumption: Euclidean distance lower-bounds network distance:
<ul>
<li>dist(v,u) ≤ SPD(v,u), for any v,u</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Evaluation_of_NN_search.png" alt="Evaluation_of_NN_search"></p>
<h3 id="spatial-join-queries">Spatial Join Queries</h3>
<h4 id="description-2">Description</h4>
<ul>
<li>Query: find pairs (r,s), such that r in relation R, s in relation S, and SPD(r,s)≤ε</li>
<li>Methods:
<ul>
<li>For each r in R, do an ε-distance selection queries for objects in S (Index Nested Loops)</li>
<li>For each pair (r,s), such that Euclidean dist(r,s)≤ε compute SPD(r,s) and verify SPD(r,s)≤ε</li>
</ul>
</li>
</ul>
<h3 id="notes-on-query-evaluation-based-on-network-distance">Notes on Query Evaluation based on Network Distance</h3>
<ul>
<li>For each query type, there are methods based on network browsing and methods based on Euclidean bounds</li>
<li>Network browsing methods are fast if network edges are densely populated with points of interest
<ul>
<li>A limited network traversal can find the result fast</li>
</ul>
</li>
<li>Methods based on Euclidean bounds are good if the searched POIs are sparsely distributed in the network
<ul>
<li>Few verifications with exact SP searches are required</li>
<li>Directed SP search (e.g. using A*) avoids visiting empty parts of the network</li>
</ul>
</li>
</ul>
<h2 id="advanced-indexing-techniques-for-spatial-networks">Advanced indexing techniques for spatial networks</h2>
<h3 id="shortest-path-materialization-and-indexing-in-large-graphs">Shortest Path Materialization and Indexing in Large Graphs</h3>
<ul>
<li>Dijkstra’s algorithm and related methods could be very expensive on very large graphs</li>
<li>(Partial) materialization of shortest paths in static graphs can accelerate search</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Shortest_Path_Materialization_and_Indexing_in_Large_Graphs.png" alt="Shortest_Path_Materialization_and_Indexing_in_Large_Graphs.png"></p>
<h3 id="hierarchical-path-materialization">Hierarchical Path Materialization</h3>
<ul>
<li>Idea: Partition graph G into G_1,G_2,G_3,&hellip; based on connectivity and proximity of nodes</li>
<li>Every edge of G goes to exactly one G_i</li>
<li>Border nodes belong to more than one G_i’s</li>
<li>For each G_i compute and materialize SPs between every pair of nodes in G_i (matrix M_i)
<ul>
<li>Partitions are small enough for materialization space overhead to be low</li>
</ul>
</li>
<li>Compute and materialize SPs between every pair of border nodes (matrix B)
<ul>
<li>If border nodes too many, hierarchically partition them into 2nd-level partitions</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Hierarchical_Path_Materialization.png" alt="Hierarchical_Path_Materialization"></p>
<h4 id="algorithm-1">algorithm</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Hierarchical_Path_Materialization_algorithm.png" alt="Hierarchical_Path_Materialization_algorithm"></p>
<h4 id="illustrating-2">Illustrating</h4>
<ul>
<li>Good partitioning if:
<ul>
<li>small partitions</li>
<li>few combinations examined for SP search</li>
</ul>
</li>
<li>Real road networks:
<ul>
<li>Non-highway nodes in local partitions</li>
<li>Highway nodes become border nodes</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Hierarchical_Path_Materialization_Illustration.png" alt="Hierarchical_Path_Materialization_Illustration"></p>
<h3 id="compressing-materialized-paths">Compressing Materialized Paths</h3>
<ul>
<li>Distance matrix with successors has O(n_2) space cost</li>
<li>Motivation: reduce space by grouping targets based on common successors</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Compressing_Materialized_Paths.png" alt="Compressing_Materialized_Paths"></p>
<h4 id="algorithm-2">algorithm</h4>
<ul>
<li>Create and encode one space partitioning defined by targets of the same successor</li>
<li>For each node s, index Is a set of &lt;succ,R&gt; pairs:
<ul>
<li>succ: a successor of s</li>
<li>R: a continuous region, such that for each t in R, the successor of s in SP(s,t) is succ</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Compressing_Materialized_Paths_Algorithm.png" alt="Compressing_Materialized_Paths_Algorithm"></p>
<ul>
<li>To compute SP(s,t) for a given s, t:
<ol>
<li>SP=s</li>
<li>Use spatial index Is to find &lt;succ,R&gt;, such that t in R</li>
<li>SP = SP + (s,succ)</li>
<li>If succ = t, report SP and terminate</li>
<li>Otherwise s=succ; Goto step 2</li>
</ol>
</li>
</ul>
<h2 id="summary">Summary</h2>
<ul>
<li>Indexing and search of spatial networks is different than spatial indexing
<ul>
<li>Shortest path distance is used instead of Euclidean distance, to define range queries, nearest neighbor search, and spatial joins</li>
</ul>
</li>
<li>Spatial networks could be too large to fit in memory
<ul>
<li>Disk-based index for adjacency lists is used</li>
</ul>
</li>
<li>Several shortest path algorithms</li>
<li>Spatial queries can be evaluated using Euclidean bounds</li>
<li>Advanced indexing methods for shortest path search on large graphs</li>
</ul>
]]></content:encoded></item><item><title>COMP7103 Topic 2 Association Rules</title><link>https://www.pseudoyu.com/en/2021/02/25/comp7103_topic2/</link><pubDate>Thu, 25 Feb 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/25/comp7103_topic2/</guid><description>COMP7103 Data Mining Topic 2 Association Rules Market-Basket Model A general many-many mapping (association) between two kinds of things
A large set of items, e.g., things sold in a supermarket A large set of baskets, each of which is a small set of the items, e.g., the things one customer buys on one day Frequent Itemsets Support Support for itemset I (s(I)) = the number of baskets containing all items in I</description><content:encoded><![CDATA[<h1 id="comp7103-data-mining">COMP7103 Data Mining</h1>
<h2 id="topic-2-association-rules">Topic 2 Association Rules</h2>
<h3 id="market-basket-model">Market-Basket Model</h3>
<p>A general many-many mapping (association) between two kinds of things</p>
<ul>
<li>A large set of items, e.g., things sold in a supermarket</li>
<li>A large set of baskets, each of which is a small set of the items, e.g., the things one customer buys on one day</li>
</ul>
<h3 id="frequent-itemsets">Frequent Itemsets</h3>
<h4 id="support">Support</h4>
<p>Support for itemset I (s(I)) = the number of baskets containing all items in I</p>
<p>Given a support threshold s, sets of items that appear in at least s baskets are called frequent itemsets</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/frequent_itemsets.png" alt="frequent_itemsets"></p>
<h4 id="monotonicity">Monotonicity</h4>
<p>For any sets of items I and any set of items J, it holds that</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/association_rules_monotonicity.png" alt="association_rules_monotonicity"></p>
<h3 id="applications">Applications</h3>
<ul>
<li>given that many people buy beer and diapers together
<ul>
<li>Run a sale on diapers; raise price of beer</li>
<li>Only useful if many buy diapers &amp; beer</li>
</ul>
</li>
<li>Items that appear together too often could represent plagiarism</li>
<li>Unusual words appearing together in a large number of documents</li>
</ul>
<h3 id="association-rules">Association Rules</h3>
<p>If-then rules I → j about the contents of baskets, I is a set of items and j is an item</p>
<ul>
<li>i → j means
<ul>
<li>if a basket contains all the items in I then it is likely to contain j</li>
</ul>
</li>
</ul>
<h4 id="confidence">Confidence</h4>
<p>The probability of j given I</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/association_rules_confidence.png" alt="association_rules_confidence"></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/association_rules_confidence_example.png" alt="association_rules_confidence_example"></p>
<h4 id="finding-association-rules">Finding Association Rules</h4>
<p>find all association rules with support ≥ s and confidence ≥ c</p>
<h4 id="computation-model">Computation Model</h4>
<ul>
<li>Data is kept in raw files rather than in a database system
<ul>
<li>Stored on disk</li>
<li>Stored basket-by-basket</li>
</ul>
</li>
<li>The true cost of mining disk-resident data is usually the number of disk I/O’s</li>
<li>In practice, association-rule algorithms read data in passes – all baskets read in turn</li>
<li>we measure the cost by the number of passes an algorithm takes</li>
</ul>
<h3 id="association-rules-algorithms">Association Rules Algorithms</h3>
<h4 id="naïve-algorithm">Naïve Algorithm</h4>
<ul>
<li>Read file once, counting in main memory the occurrences of each pair
<ul>
<li>From each basket of n items, generate its n (n -1)/2 pairs by two nested loops</li>
</ul>
</li>
<li>Fails if (#items)^2 exceeds main memory</li>
</ul>
<h4 id="a-priori-algorithm">A-Priori Algorithm</h4>
<ul>
<li>A two-pass approach called a-priori limits the need for main memory</li>
<li>Key idea: monotonicity
<ul>
<li>If a set of items appears at least s times, so does every subset</li>
<li>For pairs: if item i does not appear in s baskets, then no pair including i can appear in s baskets</li>
</ul>
</li>
<li>Process
<ul>
<li>Pass 1
<ul>
<li>Read baskets and count in main memory the occurrences of each item (Requires only memory proportional to #items)
<ul>
<li>Items that appear at least s times are the frequent items</li>
</ul>
</li>
</ul>
</li>
<li>Pass 2
<ul>
<li>Read baskets again and count in main memory only those pairs both of which were found in pass 1 to be frequent
<ul>
<li>To count number of item pairs use a hash function</li>
<li>Requires memory proportional to square of frequent items only, plus a list of the frequent items, plus space for hashing</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/APriori_Algorithm.png" alt="APriori_Algorithm"></p>
<ul>
<li>One pass for each k</li>
<li>Needs room in main memory to count each candidate k -set</li>
<li>For typical market-basket data and reasonable support (e.g., 1%), k = 2 requires the most memory</li>
</ul>
<h4 id="pcy-algorithm">PCY Algorithm</h4>
<ul>
<li>Main observation: during pass 1 of A-priori, most memory is idle</li>
<li>Use that memory to keep additional info to improve storage during pass 2 of A-priori</li>
<li>Passes &gt; 2 are the same as in A-Priori</li>
<li>Process
<ul>
<li>Pass 1
<ul>
<li>Use a hash function which bucketizes item pairs, that is, maps them to integers in [1,k]</li>
<li>Each bucket i in [1,k] is associated with a counter ci</li>
<li>During pass 1, as we examine a basket (e.g. {m,b,d,o})
<ul>
<li>update counters of single items</li>
<li>Generate all item pairs for that basket, hash each of them and add 1 to the corr. counter</li>
</ul>
</li>
</ul>
</li>
<li>Pass 2
<ul>
<li>Count all pairs {i, j } that meet the conditions for being a candidate pair
<ul>
<li>Both i and j are frequent items</li>
<li>The pair {i, j }, hashes to a frequent bucket</li>
</ul>
</li>
<li>Ignore all pairs belonging to non-frequent buckets (do not use a counter for them)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="simple-algorithm">Simple Algorithm</h4>
<ul>
<li>Take a random sample of the market baskets
<ul>
<li>give a full pass on the data and keep a basket in main memory with probability p</li>
<li>A random sample is the best representative of a dataset</li>
<li>Keeping only the first baskets might not contain iPhones for example</li>
<li>If we cannot have a sample large enough then
<ul>
<li>Remove false positives with one more pass</li>
</ul>
</li>
</ul>
</li>
<li>Run A-priori or one of its improvements in main memory, so you don’t pay for disk I/O each time you give a pass on the data
<ul>
<li>Be sure you leave enough space for counts</li>
</ul>
</li>
<li>Adjust the support threshold s accordingly</li>
</ul>
<h4 id="son-algorithm">SON Algorithm</h4>
<ul>
<li>Two passes</li>
<li>No false positives or false negatives</li>
<li>Divide the dataset into chunks, where each chunk contains a subset of baskets</li>
<li>Process
<ul>
<li>Pass 1
<ul>
<li>Divide the dataset into chunks, where each chunk contains a subset of baskets</li>
<li>Let pi such that the ith chunk contains a fraction pi of the dataset</li>
<li>For each chunk i compute all frequent itemsets with support p i x s and store them on disk. This is the set of candidates for next pass</li>
</ul>
</li>
<li>Pass 2
<ul>
<li>Read all frequent itemsets found in the previous pass (candidates)</li>
<li>For each of them count the number of occurrences and output only those with support at least s</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>Ethereum 核心技术解读</title><link>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</link><pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</guid><description>前言 比特币作为一种去中心化的数字货币，是极其成功的，但受限于比特币脚本（非图灵完备，只能处理一些简单的逻辑），并不能处理很复杂的业务。而Et</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>比特币作为一种去中心化的数字货币，是极其成功的，但受限于比特币脚本（非图灵完备，只能处理一些简单的逻辑），并不能处理很复杂的业务。而<code>Ethereum</code>引入了智能合约，使去中心化的概念能够应用于更丰富的应用场景，因此也被称为区块链 2.0。本文将对以太坊核心技术进行解读，如有错漏，欢迎交流指正。</p>
<h2 id="ethereum-系统">Ethereum 系统</h2>
<p>2014 年 1 月，俄罗斯开发者 Vitalik Buterin 发布了以太坊白皮书并成立团队，旨在创造一个集成更通用的脚本语言的区块链平台。其中一位成员 Dr. Gavin Wood 发布了一份黄皮书，涉及<code>Ethereum Virtual Machin(EVM)</code>以太坊虚拟的相关技术，这就是<code>Ethereum</code>的诞生。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ethereum_overview.png" alt="ethereum_overview"></p>
<p>简单来说，<code>Ethereum</code>是一个开源的去中心化系统，使用区块链来存储系统状态变化，因此也被称为“世界计算机”；它支持开发者在区块链上部署运行不可变的程序，称为智能合约，因此可以支持广泛的应用场景；它使用数字货币<code>Ether</code>来衡量系统资源消耗，激励更多人参与<code>Ethereum</code>系统建设。</p>
<h3 id="去中心化应用-dapp">去中心化应用 DApp</h3>
<p>狭义来说，DApp 其实就是一个集成了用户界面、支持智能合约、运行于以太坊区块链上的应用。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ethereum_architecture.png" alt="ethereum_architecture"></p>
<p>如上图所示，<code>Ethereum</code>应用实例部署在区块链网络上（智能合约运行于区块链虚拟机中），而 Web 程序只需要通过<code>Web3.js</code>对区块链网络进行<code>RPC</code>远程调用，这样用户就可以通过浏览器（DApp 浏览器或 MetaMask 等插件工具）访问去中心化服务应用了。</p>
<h3 id="账本">账本</h3>
<p><code>Ethereum</code>区块链是一个去中心化的账本（数据库），网络中的所有交易都会存储在区块链中，所有节点都要本地保存一份数据，并且确保每一笔交易的可信度；所有的交易都是公开且不可篡改的，网络中的所有节点都可以查看和验证。</p>
<h3 id="账户">账户</h3>
<p>当我们需要登录一个网站或系统（比如邮箱）时，往往需要一个帐号和一个密码，密码通过加密算法以暗文的形式存储在中心化的数据库中。然而，以太坊是一个去中心化的系统，那是怎么生成账户的呢？</p>
<p>和比特币系统原理类似</p>
<ol>
<li>首先生成一个仅有自己知道的私钥，假设为<code>sk</code>，采用<code>ECDSA(Elliptic Curve Digital Signature Algorithm)</code>椭圆曲线算法生成对应的公钥<code>pk</code></li>
<li>采用<code>keccak256</code>算法对公钥<code>pk</code>求哈希值</li>
<li>截取后 160 位作为以太坊的地址</li>
</ol>
<p>用户的私钥和地址一起组成了以太坊的账户，可以存储余额、发起交易等（比特币的余额是通过计算所有的<code>UTXO</code>得到的，而不是像以太坊一样存储在账户中）。</p>
<p>其实<code>Ethereum</code>账户分为两种类型，上述方式生成的叫<code>Externally Owned Accounts(EOA)</code>，外部账户，也就是常规用户拥有的账户，主要是用来发送/接收<code>Ether</code>代币或者向智能合约发送交易（即调用智能合约）。</p>
<p>而另一种则是<code>Contract Accounts</code>，合约账户，不同于外部账户，这种账户是没有对应的私钥的，而是在部署合约的时候生成的，存储智能合约代码。值得注意的是，合约账户必须要被外部账户或者其他合约调用才能够发送或接收<code>Ether</code>，而不能自己主动执行交易。</p>
<h3 id="钱包">钱包</h3>
<p>存储和管理<code>Ethereum</code>账户的软件/插件称为钱包，提供了诸如交易签名、余额管理等功能。钱包生成主要有两种方式，非确定性随机生成或根据随机种子生成。</p>
<h3 id="gas">Gas</h3>
<p><code>Ethereum</code>网络上的操作也需要“手续费”，称为<code>Gas</code>，在区块链上部署智能合约以及转账都需要消耗一定单位的<code>Gas</code>，这也是鼓励矿工参与<code>Ethereum</code>网络建设的激励机制，从而使整个网络更加安全、可靠。</p>
<p>每个交易都可以设置相应的<code>Gas</code>量和<code>Gas</code>的价格，设置较高的<code>Gas</code>费则往往矿工会更快处理你的交易，但为了预防交易多次执行消耗大量<code>Gas</code>费，可以通过<code>Gas Limit</code>来设置限制。<code>Gas</code>相关信息可以通过 <a href="https://etherscan.io/gastracker">Ethereum Gas Tracker</a> 工具进行查询。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">If START_GAS * GAS_PRICE &gt; caller.balance, halt
</span></span><span class="line"><span class="cl">Deduct START_GAS * GAS_PRICE from caller.balance
</span></span><span class="line"><span class="cl">Set <span class="nv">GAS</span> <span class="o">=</span> START_GAS
</span></span><span class="line"><span class="cl">Run code, deducting from GAS
</span></span><span class="line"><span class="cl">For negative values, add to GAS_REFUND
</span></span><span class="line"><span class="cl">After termination, add GAS_REFUND to caller.balance
</span></span></code></pre></div><h3 id="智能合约">智能合约</h3>
<p>上文提到，<code>Ethereum</code>区块链不仅仅存储交易信息，还会存储与执行智能合约代码。</p>
<p>智能合约控制应用和交易逻辑，<code>Ethereum</code>系统中的智能合约采用专属<code>Solidity</code>语言，语法类似于<code>JavaScript</code>，除此之外，还有<code>Vyper</code>、<code>Bamboo</code>等编程语言。智能合约代码会被编译为字节码并部署至区块链中，一旦上链则不可以再编辑。<code>EVM</code>作为一个智能合约执行环境，能够保障执行结果的确定性。</p>
<h4 id="智能合约示例众筹">智能合约示例：众筹</h4>
<p>让我们想象一个更复杂的场景，假设我要众筹 10000 元开发一个新产品，通过现有众筹平台需要支付不菲的手续费，而且很难解决信任问题，于是，可以通过一个众筹的 DApp 来解决这个问题。</p>
<p>先为众筹设置一些规则</p>
<ol>
<li>每个想参与众筹的人可以捐款 10-10000 元的金额</li>
<li>如果目标金额达成了，金额会通过智能合约发送给我（即众筹发起人）</li>
<li>如果目标在一定时间内（如 1 个月）没有达成，众筹的资金会原路返回至众筹用户</li>
<li>也可以设置一些规则，比如一周后，如果目标金额没有达成，用户可以申请退款</li>
</ol>
<p>因为这些众筹条款是通过智能合约实现并部署在公开的区块链上的，即使是发起者也不能篡改条款，且任何人都可以查看，解决了信任问题。</p>
<p>完整代码可以点击这里查看：<a href="https://www.toshblocks.com/solidity/complete-example-crowd-funding-smart-contract/">Demo</a></p>
<h3 id="交易">交易</h3>
<p>在<code>Ethereum</code>中，一个典型的交易是怎么样的呢？</p>
<ol>
<li>开发者部署智能合约至区块链</li>
<li>DApp 实例化合约、传入相应值以执行合约</li>
<li>DApp 对交易进行数字签名</li>
<li>本地对交易进行验证</li>
<li>广播交易至网络中</li>
<li>矿工节点接收交易并进行验证</li>
<li>矿工节点确认可信区块后广播至网络中</li>
<li>本地节点与网络进行同步，接收新区块</li>
</ol>
<h3 id="架构">架构</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ethereum_architecture_simple.png" alt="ethereum_architecture_simple"></p>
<p><code>Ethereum</code>采用的是一种<code>Order - Execute - Validate - Update State</code>的系统架构。在这种架构下，当产生一笔新的交易，矿工会进行<code>PoW</code>工作量证明机制的运算；验证完成后，将区块通过<code>gossip</code>协议广播至网络中；网络中的其他节点接收到新区块后，也会对区块进行验证；最终，提交至区块链，更新状态。</p>
<p>具体来看，<code>Ethereum</code>系统有共识层、数据层、应用层等核心组件，其交互逻辑如下：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ethereum_architecture_concrete.png" alt="ethereum_architecture_concrete"></p>
<p>如上图所示，<code>Ethereum</code>数据由<code>Transaction Root</code>和<code>State Root</code>组成。<code>Transaction Root</code>是所有交易组成的树，包含<code>From</code>、<code>To</code>、<code>Data</code>、<code>Value</code>、<code>Gas Limit</code>和<code>Gas Price</code>；而<code>State Root</code>则是所有账户组成的树，包含<code>Address</code>、<code>Code</code>、<code>Storage</code>、<code>Balance</code>和<code>Nonce</code>。</p>
<h2 id="总结">总结</h2>
<p>以上就是对<code>Ethereum</code>核心技术的一些解读，智能合约的引入给区块链的应用带来了更多可能性，但仍有很多安全性、隐私性和效率问题需要考虑。针对复杂的企业级应用场景，联盟链是更好的选择，后续将会对<code>Hyperledger Fabric</code>进行详尽的分析，敬请期待！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology</a>, <em>Professor S.M. Yiu, HKU</em></li>
<li><a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree</a>, <em>Udacity</em></li>
<li><a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用</a>，<em>肖臻，北京大学</em></li>
<li><a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战</a>，<em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技</em></li>
<li><a href="https://www.zastrin.com/courses/ethereum-primer/lessons/1-5">Ethereum Architecture</a>, <em>zastrin</em></li>
<li><a href="https://www.toshblocks.com/solidity/complete-example-crowd-funding-smart-contract/">Learn Solidity: Complete Example: Crowd Funding Smart Contract</a>, <em>TOSHBLOCKS</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>比特币核心技术解读</title><link>https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/</link><pubDate>Wed, 17 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/</guid><description>前言 在上一篇文章《区块链基础知识与关键技术》里对区块链的基础知识和关键技术进行了梳理，而比特币是区块链最典型的应用，本文将对比特币核心技术进</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>在上一篇文章《<a href="https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/">区块链基础知识与关键技术</a>》里对区块链的基础知识和关键技术进行了梳理，而比特币是区块链最典型的应用，本文将对比特币核心技术进行解读，如有错漏，欢迎交流指正。</p>
<h2 id="比特币系统">比特币系统</h2>
<p>比特币是在 2009 年由中本聪发明的一个数字货币，主要是为了反抗中心化的银行体系，因为其精巧的系统设计和安全性，价值也在迅速提升。同时，因为它并不与真实世界的身份绑定，具备强大的匿名性，也被用于非法交易、洗钱、勒索等恶意行为，引起了一些争议。</p>
<p>作为一个去中心化的区块链系统，所有人都可以访问，也可以在本地维护一个节点参与到比特币网络中，下文也会应用<code>Bitcoin Core</code>客户端在本地维护一个节点。</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/bitcoin_network_nodes.png" alt="bitcoin_network_nodes"></p>
<p>节点分为全节点和轻节点两种，早期所有的节点都是全节点，但随着数据量越来越大，运行在手机或平板等设备上的比特币客户端不需要存储整个区块链的信息，称为<code>Simplified Payment Verification(SPV)</code>节点，也叫轻节点。</p>
<p><code>Bitcoin Core</code>客户端就是一个全节点，下文也会具体讲述。全节点一直在线，维护着完整的区块链信息；因为其内存里维护着完整的<code>UTXO</code>集合，所以通过验证整个区块链的区块和交易信息（从创世区块到最新区块）来验证交易的合法性；也会决定哪些交易会被打包到区块中；验证交易即挖矿，可以决定沿着哪条链继续挖，在出现等长的分叉时，也会选择哪一个分叉；同时监听别的矿工挖出来的区块，验证合法性。</p>
<p>轻节点不需要一直在线，也不需要保留整个区块链（数据量庞大），只需要保留每个区块的块头；且只需要保存与自己有关的区块，而不需要保存链上全部交易；因为并没有保存全部信息，无法验证大多数交易的合法性和网上发布的新区块的正确性，只能检验与自己有关的区块；可以通过<code>Merkle Proof</code>验证一笔交易存在，但不能确认一笔交易不存在；可以验证挖矿的难度，因为保存在块头中。</p>
<blockquote>
<p>下面通过一个示例来讲解一下全节点和轻节点的交易验证方式。</p>
</blockquote>
<p>假如要验证一个位于 block 300,000 的交易 T，全节点会查验全部 300,000 个区块（直到创世区块），建立一个完整<code>UTXO</code>的数据库来确保这个交易没有被花费；而轻节点则会通过<code>Merkle Path</code>来链接所有和交易 T 相关的区块，然后等待 300,001 至 300,006 个区块来进行确认，从而验证交易的合法性。</p>
<h3 id="区块链结构">区块链结构</h3>
<p>区块链是由顺序链接起来的区块组成的一种数据结构，可以存于单文件或者数据库中，<code>Bitcoin Client</code>使用 Google 的<code>LevelDB</code>数据库存储数据。每一个区块都指向前一个区块，任何一个区块进行了修改的话，其所有后面的区块都会受到影响，所以想要篡改一个区块的话需要同时篡改之后的所有区块，这需要大量的算力，往往成本大于收益，因此极大地保障了安全性。</p>
<p>区块链结构包含区块<code>Block Size (4 bytes)</code>、<code>Block Header</code>、<code>Transaction Counter(1-9 bytes)</code>和<code>Transaction</code>几个核心组成部分。</p>
<p>区块链的块头大小为 80 bytes，存储着<code>Version(4 bytes)</code>、<code>Previous Block Hash(32 bytes)</code>、<code>Merkle Tree Root(32 bytes)</code>、<code>Timestamp(4 bytes)</code>、<code>Difficulty Target(4 bytes)</code>和<code>Nonce(4 bytes)</code>。</p>
<p>每一个区块的哈希值通过对区块头进行两次哈希运算，即<code>SHA256(SHA256(Block Header))</code>，并不存在区块链结构中，而是由每个节点接收到区块后计算得到，是独一无二的；此外，<code>Block Height</code>也可以作为区块的标识符。</p>
<h4 id="merkle-tree">Merkle Tree</h4>
<p><code>Merkle Tree</code>默克尔树是区块链中很重要的一个数据结构，主要通过哈希算法来验证较大数据集（也是通过双重哈希的方式<code>SHA256(SHA256(Block Header))</code>），结构如下图所示：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/merkle_tree_example.png" alt="merkle_tree_example"></p>
<p>通过<code>Merkle Tree</code>的方式可以很快地验证一个交易存在于某个区块中（算法复杂度为<code>LogN</code>），例如，如果要验证一个交易 K 存在于区块中，只需要访问很少的节点</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/merkle_proof_example.png" alt="merkle_proof_example"></p>
<p>因为比特币网络中存在大量交易，这种方式能够极大提高效率，如下图所示：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/merkle_proof_efficiency.png" alt="merkle_proof_efficiency"></p>
<p>因为轻节点（例如手机上的比特币钱包）不保存整个区块链数据，通过<code>Merkle Tree</code>结构可以很方便地查找交易，轻节点会构造一个<code>Bloom filter</code>布隆过滤器来得到与自身相关的交易：</p>
<ol>
<li>首先，初始化布隆过滤器为空值，获取钱包中的所有地址，创建一个检索模式来匹配与这个交易输出相关的地址，将检索模式加入布隆过滤器；</li>
<li>然后布隆过滤器被发送至各个节点（通过<code>filterload</code>消息）；</li>
<li>节点收到后会发送一个包含符合条件的区块头和符合交易的<code>Merkle Path</code>的<code>merkleblock</code>消息和一个包含过滤结果的<code>tx</code>消息。</li>
</ol>
<p>过程中，轻节点会使用<code>Merkle Path</code>来链接交易与区块，并通过区块头来组成区块链，从而能够验证交易存在于区块链中。</p>
<p>使用布隆过滤器会返回符合筛选条件的结果，也会存在着一些误报，因此返回了很多不相关的结果，也能够在轻节点向其他节点请求相关地址时保护了隐私性。</p>
<h3 id="比特币网络">比特币网络</h3>
<p>比特币系统运行在一个 P2P 点对点网络上，节点之间是平等的，没有身份、权限的区别；没有中心化的服务器，网络也没有层级区分。</p>
<p>每个节点都要维护一个等待上链的交易的集合，每个区块大小为 1M，因此需要几秒才能够穿到大多数的节点。假设一个节点监听到了 A-&gt;B 的交易，会将其写入集合，如果同时又发现了一个 A-&gt;C 的双花攻击，则不会再写入，而如果监听到同样一笔 A-&gt;B 的交易或者同一个币来源的 A-&gt;C 的交易，则会将该集合中 A-&gt;B 的交易删除。</p>
<h3 id="比特币共识协议">比特币共识协议</h3>
<p>比特币作为一个人人都可以参与的开发系统，需要解决恶意节点的威胁，解决思路为工作量证明机制，也就是算力投票机制，当产生一笔新交易，广播新的数据记录，全网执行共识算法，即矿工挖矿来验证记录，即求解随机数，率先解出难题的矿工获得记账权，产生新区块，然后对外广播新区块，其他节点验证通过后加至主链。</p>
<h3 id="钱包">钱包</h3>
<p>作为一个数字货币系统，比特币有自己的钱包系统，主要由私钥、公钥和钱包地址三个部分组成。</p>
<blockquote>
<p>生成钱包地址的过程如下：</p>
</blockquote>
<ol>
<li>采用<code>ECDSA(Elliptic Curve Digital Signature Algorithm)</code>椭圆曲线算法，利用私钥生成对应的公钥</li>
<li>公钥很长且难以输入和记忆，因此再通过<code>SHA256</code>和<code>RIPEMD160</code>算法得到一个公钥哈希值</li>
<li>最后再用<code>Base58Check</code>进行处理，得到一个可读性较强的钱包地址</li>
</ol>
<h3 id="交易过程">交易过程</h3>
<p>有了钱包（和资产）后，就可以开始交易了。我们来通过一个典型的比特币交易来理解这一流程：</p>
<p>A 和 B 都拥有一个比特币钱包地址（可以用 Bitcoin Client 生成，原理如上），假设 A 要给 B 转账 5 个 BTC，A 需要得到 B 的钱包地址，然后用自己的私钥对<code>A-&gt;B转账5个BTC</code>这笔交易签名（因为 A 的私钥仅有自己知道，所以拥有私钥则是拥有钱包资产的归属权）；然后发布这笔交易，在比特币系统中发起交易需要支付小额矿工费作为交易手续费；矿工会开始验证这笔交易的合法性，得到六个确认后交易就可以被比特币账本所接受，整个验证过程大约 10 分钟。</p>
<blockquote>
<p>矿工为什么要消耗大量算力来验证交易呢？</p>
</blockquote>
<p>矿工在验证过程中可以得到出块奖励和矿工费，出块奖励会四年递减，因此，后期主要激励是矿工费。</p>
<blockquote>
<p>为什么验证要 10 分钟呢？</p>
</blockquote>
<p>比特币其实并不是绝对安全的，新交易容易受到一些恶意攻击，而通过控制挖矿难度把验证过程控制在 10 分钟左右则可以很大程度上阻止恶意攻击，这只是一种概率上的保证。</p>
<blockquote>
<p>比特币系统中怎么避免双重花费呢？</p>
</blockquote>
<p>比特币采用了一种叫<code>UTXO(Unspent Transaction Outputs)</code>的概念，当一个用户收到一笔 BTC 交易时，会计入<code>UTXO</code>中。</p>
<p>在这个示例中，A 想要给 B 转账 5 个 BTC，A 的这 5 个 BTC 可能来自于两个<code>UTXO</code>(2 BTC + 3 BTC)，因此 A 在转账给 B 时，矿工需要检验的是这两笔<code>UTXO</code>在这笔交易之前有没有被花掉，如果检测已经被花费了，则交易不合法。</p>
<p>下图很好地阐释了多笔交易的流向和<code>UTXO</code>的相关概念</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/btc_utxo_example.png" alt="btc_utxo_example"></p>
<p>此外，<code>UTXO</code>有一个很重要的特性，不可分割，假如 A 有 20 个 BTC，他想转账 5 个 BTC 给 B，那交易会先将 20 个 BTC 作为输入，然后产生两个输出，一个向 B 转账 5 个 BTC，一个返还给 A 剩下的 15 个 BTC，因此，A 又拥有了一笔价值为 15 BTC 的 <code>UTXO</code>；如果单个<code>UTXO</code>不够支付，则可以组合多个形成输入，但总额一定要大于交易额。</p>
<blockquote>
<p>矿工怎么验证交易发起者有足够的余额呢？</p>
</blockquote>
<p>这个问题看起来很简单，第一反应是像支付宝这样查询一下余额是否足够就可以。但比特币是一种基于交易的账本模式，并没有帐户概念，因此并不能直接查询余额，要想知道一个帐户的剩余资产，则需要回顾以前所有的交易，并且找到所有<code>UTXO</code>并相加。</p>
<h3 id="交易模型">交易模型</h3>
<blockquote>
<p>上文讲了一个交易是怎么发生的，那比特币交易由哪些部分组成呢？</p>
</blockquote>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/blockchain_bitcoin_script_detail.png" alt="blockchain_bitcoin_script_detail"></p>
<p>如图，最开始的部分是<code>Version</code>，表示版本。</p>
<p>然后是 Input 相关的信息：<code>Input Count</code>表示数量，<code>Input Info</code>表示输入的内容，也就是<code>Unlocking Script</code>，主要用于核对输入来源、输入是否可用以及其他输入的细节。</p>
<ul>
<li><code>Previous output hash</code> - 所有输入都能追溯回一个输出，这指向包含将在该输入中花费的 UTXO，该 UTXO 的哈希值在这里以相反的顺序保存</li>
<li><code>Previous output index</code> - 一个交易可以有多个由它们的索引号引用的<code>UTXO</code>，第一个索引是 0</li>
<li><code>Unlocking Script Size</code> - <code>Unlocking Script</code>的字节大小</li>
<li><code>Unlocking Script</code> - 满足<code>UTXO Unlocking Script</code>的哈希</li>
<li><code>Sequence Number</code> - 默认为<code>ffffffff</code></li>
</ul>
<p>接着是 Output 相关的信息，<code>Output Count</code>表示数量，<code>Output Info</code>表示输出的内容，也就是<code>Locking Script</code>,主要用于记录输出了多少比特币，未来支出的条件以及输出的细节。</p>
<ul>
<li><code>Amount</code> - 以 Satoshis(最小的比特币单位)表示的输出比特币数量，10^8 Satoshis = 1 比特币</li>
<li><code>Locking Script Size</code> - 这是 Locking Script 的字节大小</li>
<li><code>Locking Script</code> - 这是 Locking Script 的哈希，它指定了使用此输出必须满足的条件</li>
</ul>
<p>最后是<code>Locktime</code>，表示一个交易可以被最早添加到区块链的时间/块，如果小于 500 million 的话直接读取块高度，而如果大于 500 million 则读取时间戳。</p>
<h3 id="比特币脚本">比特币脚本</h3>
<p>在交易中有提到<code>Unlocking script</code>和<code>Locking script</code>，那什么是比特币脚本呢？</p>
<p>比特币脚本是记录在每个交易中的指令列表，当脚本被执行时可以检验交易是否有效、比特币是否可以使用等。一个典型的脚本如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&lt;sig&gt; &lt;pubKey&gt; OP_DUP OP_HASH160 &lt;pubKeyHash&gt; OP_EQUALVERIFY OP_CHECKSIG
</span></span></code></pre></div><p>比特币脚本是基于栈从左至右执行的，使用<code>Opcodes</code>对数据进行操作，在上面这个脚本语言中，&lt;&gt;包含的是要被推入 stack 的数据，没有&lt;&gt;包括、以 OP_ 为前缀的是操作符（OP 可省略），脚本也可以嵌入数据永久记录在链上（不超过 40 bytes），所记录的数据不会影响<code>UTXO</code>。</p>
<p>在交易中，<code>&lt;sig&gt; &lt;pubKey&gt;</code>是<code>Unlocking script</code>，<code>OP_DUP OP_HASH160 &lt;pubKeyHash&gt; OP_EQUALVERIFY OP_CHECKSIG</code>部分是<code>Locking script</code>。</p>
<p>跟大多数编程语言相比，比特币脚本是非图灵完备的，没有循环或复杂的流程控制，执行起来很简单，不论在哪里执行结果都是确定性的，也不会保存状态，且脚本与脚本之间是相互独立的。因为以上特征，虽然比特币脚本相对安全，但没办法处理很复杂的逻辑，因此不适合用来处理一些复杂的业务，<code>Ethereum</code>所提供的智能合约就在这一点上实现了创新性的突破，因此诞生了很多去中心化应用。</p>
<h3 id="挖矿">挖矿</h3>
<p>在上文对整个交易过程中提到了挖矿，接下来我们详细讲一下。</p>
<p>有的节点为了得到出块奖励和矿工费，赚取收益，因此会对交易进行验证，称为矿工挖矿。出块奖励由<code>coinbase</code>创建，每四年会递减，从 2009 年的 25 个，到现在已经减少为 6.5 个。</p>
<p>挖矿其实是一个不断尝试随机数以达到某个设定目标值的过程，如小于某个 target 值，这个难度是人为设置来调整验证时间、提升安全性的，而不是解决数学难题。</p>
<p>矿工们会不断尝试这个值，成功率很低，但是尝试次数可以很多，因此，算力强的节点有成比例的优势，更容易解出难题。</p>
<blockquote>
<p>那挖矿难度为什么要进行调整呢？</p>
</blockquote>
<p>因为在比特币系统中，出块时间太短容易出现分叉，如果分叉过多则会影响系统达成共识，危害系统安全性。比特币系统通过难度调整把出块速度稳定在 10 分钟左右，从而防止交易被算改。</p>
<blockquote>
<p>挖矿难度是如何调整的呢？</p>
</blockquote>
<p>系统会在每产生 2016 个区块时（约两周）调整一次目标阈值，存在块头中，全网所有节点需要遵从新的难度进行挖矿，如果恶意节点不调整代码中的 target 的话，诚实的矿工则不会认可</p>
<p>目标阈值 = 目标阈值 * (产生 2016 个区块的实际时间 / 产生 2016 个区块的预计时间)</p>
<p>比特币诞生之初，矿工很少，挖矿难度也较低，大多都是用家用电脑（CPU）直接挖矿；随着越来越多的人参与到比特币生态中，挖矿的难度也越来越高，慢慢开始用一些算力较强的 GPU 进行挖矿，也有一些专用的<code>ASIC(Application Specific Integrated circuit)</code>专用挖矿芯片以及矿机随着市场需求逐步诞生；而现在也出现了很多大型矿池，集合了全网大量算力进行集中挖矿。</p>
<p>在这种大型矿池系统中，<code>Pool Manager</code>担任了全节点的作用，而集合的大量矿工会一起计算哈希值，最后通过工作量证明机制来分配收益。但算力过于集中容易产生一些中心化风险，如某个大型矿池达到了全网 51% 以上算力的话就可以对交易进行回滚或者对某些交易进行抵制等。</p>
<h3 id="分叉">分叉</h3>
<p>比特币系统中，也会有未达成一致性意见的情况发生，称为分叉。分叉是主要分为两种类型，一种是状态分叉，往往是一些节点故意进行的；另一种称为协议分叉，也就是说对比特币协议产生了一些分歧。</p>
<p>协议分叉又可以分为两种类型，一种叫硬分叉，也就是对于协议的部分内容产生了不可兼容的修改，比如将比特币的块大小由 1M 调整为 4M，这种分叉方式是永久的，从某个节点开始形成了两条平行发展的链，比如<code>Bitcoin Classic</code>，形成了两种币。</p>
<p>另一种则叫软分叉，比如还是调整比特币的块大小，但是从 1M 调整为 0.5M，这样调整后，就会出现新节点挖小区块，旧的节点挖大的区块的情况，软分叉是非永久性的，比较典型的例子是对 coinbase 的内容进行修改以及<code>P2SH(Pay to Script Hash)</code>产生的分叉。</p>
<h2 id="bitcoin-core-客户端">Bitcoin Core 客户端</h2>
<p><code>Bitcoin Core</code>是比特币的实现，又被称为<code>Bitcoin-QT</code>或<code>Satoshi-client</code>，可以通过这个客户端连接至比特币网络、验证区块链、发送与接收比特币等。有<code>Mainnet</code>、<code>Testnet</code>和<code>Regnet</code>三个网络，可以进行切换。</p>
<p>提供了一个<code>Debug Console</code>来与比特币区块链直接进行交互，常见操作如下：</p>
<blockquote>
<p>Blockchain</p>
</blockquote>
<ul>
<li>getblockchaininfo: 返回有关区块链处理的各种状态信息</li>
<li>getblockcount: 返回区块链中的块数</li>
<li>verifychain: 验证区块链数据库</li>
</ul>
<blockquote>
<p>Hash</p>
</blockquote>
<ul>
<li>getblockhash: 返回所提供的区块哈希值</li>
<li>getnetworkhashps: 基于指定数量的最近块，返回每秒网络哈希数</li>
<li>getbestblockhash: 返回最佳块的哈希值</li>
</ul>
<blockquote>
<p>Blocks</p>
</blockquote>
<ul>
<li>getblock: 返回块信息的详细信息</li>
<li>getblockheader: 返回有关区块头信息</li>
<li>generate: 立即将指定数量的块挖矿到钱包中的一个地址</li>
</ul>
<blockquote>
<p>Wallet</p>
</blockquote>
<ul>
<li>getwalletinfo: 返回一个对象，该对象包含有关钱包状态的各种信息</li>
<li>listwallets: 返回当前加载的钱包列表</li>
<li>walletpassphrasechange: 更改钱包密码</li>
</ul>
<blockquote>
<p>Mempool</p>
</blockquote>
<ul>
<li>getmempoolinfo: 返回内存池活动状态的详细信息</li>
<li>getrawmempool: 返回内存池中的所有交易详细信息</li>
<li>getmempoolentry: 返回给定交易的内存池数据</li>
</ul>
<blockquote>
<p>Transaction</p>
</blockquote>
<ul>
<li>getchaintxstats: 计算关于链中交易总数和速率的统计数据</li>
<li>getrawtransaction: 返回原始交易数据</li>
<li>listtransactions: 返回给定帐户的交易列表</li>
</ul>
<blockquote>
<p>Signature</p>
</blockquote>
<ul>
<li>signrawtransaction: 签署原始交易的输入</li>
<li>signmessage: 使用地址的私钥对信息进行签名</li>
<li>dumpprivkey: 获取私钥</li>
</ul>
<blockquote>
<p>Network</p>
</blockquote>
<ul>
<li>getnetworkinfo: 返回 P2P 网络的状态信息</li>
<li>getpeerinfo: 返回每个连接网络节点的数据</li>
<li>getconnectioncount: 返回节点的连接数</li>
</ul>
<blockquote>
<p>Mining</p>
</blockquote>
<ul>
<li>getmininginfo: 返回包含挖掘相关信息的对象</li>
<li>getblocktemplate: 返回构造块所需的数据</li>
<li>prioritisetransaction: 以较高或较低的优先级接受交易进入挖掘的块</li>
</ul>
<h2 id="总结">总结</h2>
<p>以上就是对比特币核心技术的一些解读，主要从它的基础原理和数据模型层面进行了一些深入了解，通过对比特币的学习，能够很好地理解区块链的设计理念和运行机制，接下来将会对被称为区块链 2.0 的以太坊进行学习和分析，敬请期待！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology</a>, <em>Professor S.M. Yiu, HKU</em></li>
<li><a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree</a>, <em>Udacity</em></li>
<li><a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用</a>，<em>肖臻，北京大学</em></li>
<li><a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战</a>，<em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>区块链基础知识与关键技术</title><link>https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/</link><pubDate>Fri, 12 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/</guid><description>前言 最近在上 HKU 的&amp;lt;COMP7408 Distributed Ledger and Blockchain Technology&amp;gt;课程，对区块链的基础概念有了更系统的认知，结合之前上过的北京大学</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近在上 HKU 的<code>&lt;COMP7408 Distributed Ledger and Blockchain Technology&gt;</code>课程，对区块链的基础概念有了更系统的认知，结合之前上过的北京大学肖臻老师《<a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用</a>》公开课，深知区块链知识体系之庞大，打算更新系列文章对区块链、比特币、以太坊等进行系统的知识梳理，如有错漏，欢迎交流指正。</p>
<h2 id="区块链中的密码学原理">区块链中的密码学原理</h2>
<p>区块链和密码学紧密相关，如比特币采用的核心的公私钥加密技术、数字签名、哈希等，包括很多共识算法也是基于复杂的密码学概念，因此，在开始学习区块链之前，要先了解几个核心的密码学概念，从而能够更深入理解其在区块链体系中的应用。</p>
<h3 id="哈希函数">哈希函数</h3>
<p>哈希函数是把一个任意长度的源数据经过一系列算法变成一个固定长度输出值的方法，概念很简单，但其具备的几个特性使它被各个领域广泛应用。</p>
<p>可以访问这个 <a href="https://andersbrownworth.com/blockchain/hash">Demo</a> 体验一下哈希函数的工作原理（以<code>SHA256</code>为例）！</p>
<p>第一个特性是单向不可逆性。将一个输入 x 进行哈希运算得到值 H(x)，这一过程很容易，但是如果给定一个值 H(x)，几乎不可能逆推得到 x 的取值，这一特性很好地保护了源数据。</p>
<p>第二个特性是抗碰撞性。给定一个值 x 和另一个值 y，如果 x 不等于 y，那 H(x) 几乎不可能等于 H(y)，并非完全不可能，但是几率非常低，因此，一个数据的 Hash 值几乎是唯一的，这可以很好地用于身份验证等场景。</p>
<p>第三个特性是哈希计算不可预测。很难根据现有条件推导出哈希值，但是很容易检验是否正确，这一机制主要应用于<code>PoW</code>挖矿机制中。</p>
<h3 id="加密解密">加密/解密</h3>
<p>加密机制主要分为对称加密和非对称加密两类。</p>
<p>对称加密机制是两方用同一个密钥来进行信息的加密和解密，很方便，效率也很高，但是密钥的分发存在很大的风险，如果通过网络等方式进行分发，很容易会出现密钥泄漏，从而导致信息泄漏。</p>
<p>非对称加密机制主要指的是公私钥加密机制，每个人通过算法生成一对密钥，称为公钥和私钥，如果 A 想发送一个信息给 B，可以用 B 的公钥对文件进行加密，将加密后的信息发给 B，这个过程中，即使信息被截获或出现泄漏，也不会暴露源文件，所以可以用任何方式进行传播，当 B 收到加密文件后，用自己的私钥进行解密，从而获取文件内容。B 的私钥没有经过任何渠道进行传播，仅自己知道，所以具备极高的安全性。</p>
<p>在现实应用中，对很大的文件进行非对称加密效率较低，所以一般采用一种组合机制：假设 A 想发送一个大文件 D 给 B，则先将文件 D 用一个密钥 K 进行对称加密，再用 B 的公钥对密钥 K 进行非对称加密。A 将加密后的密钥 K 和文件 D 发送给 B，期间即使被截获或泄漏，因为没有 B 的私钥，所以无法得到密钥 K，也就无法访问文件 D。B 收到加密后的文件和密钥后，则先用自己的私钥解密得到密钥 K，再用密钥 K 对文件 D 进行解密，从而获取文件内容。</p>
<h3 id="数字签名">数字签名</h3>
<p>数字签名是非对称加密机制的另一种用法，上文讲到每个人拥有一对生成的公钥和私钥，在加密/解密应用中，是用公钥进行加密，用私钥进行解密，而数字签名机制刚好相反，假设一个文件持有者用自己的私钥对文件进行加密，其他人可以用他的公钥进行解密，如果得到结果则可以证明文件的归属权。</p>
<p>数字签名机制最典型的应用就是比特币区块链网络中，用私钥证明自己对比特币的归属权，对交易进行签名，其他人则可以用公钥来验证交易是否合法，整个过程无需暴露自己的私钥，保障了资产的安全。</p>
<h2 id="区块链基本概念">区块链基本概念</h2>
<p>随着历史的发展，人们的记账方式从单式记账，发展到复式记账、数字记账，最后到分布式记账，因为传统的中心化数字记账则往往依赖于某个或某些组织的可信度，存在一些信任风险，而区块链技术本质上就是一种分布式账本技术，一群人共同维护着一个去中心化的数据库，通过共识机制来共同记账。区块链很容易追溯历史记录，而因为去中心化信任机制的存在，也几乎不可篡改（或者是篡改的成本远远大于收益）。</p>
<p>相比于传统的数据库，区块链只有增加和查询两种操作，所有的操作历史记录都会准确地保存在账本中且不可变，具备很高的透明度和安全性，当然，代价就是所有节点必须通过一些机制达成共识（因此效率较低，不适合实时性的操作），而且因为每个节点都要永久保存历史记录，会占据很大的存储空间。</p>
<h3 id="应用场景">应用场景</h3>
<blockquote>
<p>那怎么判断一个公司/业务是否适合采用区块链作为解决方案呢？</p>
</blockquote>
<ol>
<li>是否需要数据库？</li>
<li>是否需要共享写入</li>
<li>是否需要多方达成信任？</li>
<li>是否能够脱离第三方机构运作？</li>
<li>是否能够脱离权限机制运作？</li>
</ol>
<p>区块链作为一个分布式数据库，主要做的还是信息存储的工作，只是通过其各类机制，在不需要第三方机构介入的前提下让有共同需求但并不互相信任的实体之间也能以相对较低的代价达成一致，从而满足需求，除此之外，系统还有加密认证、高透明度等特性，能够满足一些业务需求。而如果所涉及到的数据不能公开/数据量非常大/需要外部服务来存储数据，或者是业务规则经常发生变化，那区块链就并不适合作为其解决方案。</p>
<blockquote>
<p>因此，在以上的标准下，有如下一些需求很适合区块链作为其解决方案：</p>
</blockquote>
<ol>
<li>需要建立一个共享的数据库，且有多方参与</li>
<li>参与业务的各方没有建立信任</li>
<li>现有业务信任一个或者多个信任机构</li>
<li>现有业务有加密认证的业务需求</li>
<li>数据需要集成到不同的数据库且业务数字化和一致性的需求迫切</li>
<li>对于系统参与者有统一的规则</li>
<li>多方决策是透明的</li>
<li>需要客观的、不可改变的记录</li>
<li>非实时性处理业务</li>
</ol>
<p>但其实在很多应用场景里，企业需要在去中心化和效率之间做一些权衡，且有时候很多复杂的业务对透明度、规则都有不同的需求，因此，基于复杂的商业化需求，也有“联盟链”这样的解决方案，能够更好地与现有的系统结合，以满足业务需求。</p>
<h2 id="区块链类型">区块链类型</h2>
<p>区块链也有不同的类型，主要有私有链、公有链、联盟链三种。</p>
<p>私有链主要是应用于某一个特定领域或者只是在某一个企业运行的区块链，主要是用于解决信任问题，如跨部门协作等场景，一般不需要外部机构来访问数据。</p>
<p>公有链则是公开的交易，往往用于一些需要交易/数据公开的业务，如认证、溯源、金融等场景，比如比特币、以太坊和<code>EOS</code>等。</p>
<p>联盟链最大的特征是节点需要验证权限才能参与到区块链网络中，而认证一般都是与其现实角色所关联的，因此，联盟链也具有中心化的属性，但效率、拓展性和交易隐私则大大提升了，满足了企业级应用的需求，其中最广泛使用的就是<code>Hyperledger Fabric</code>了。值得一提的是，联盟链往往不需要代币来作为激励，而是将参与的各个节点作为记账节点，通过区块链机制实现跨部门之间的业务协同所带来的经济效益作为内部激励，是一种更健康、更符合企业应用的方式。</p>
<p>长期来看的话，公有链和联盟链在技术上也会逐渐趋于融合，即使是同一个业务，可以将需要信任的数据放在共有链上，而一些行业数据和私有的数据则可以放在联盟链上，通过权限管理来保障交易隐私。</p>
<h2 id="区块链基本框架">区块链基本框架</h2>
<blockquote>
<p>那一个区块链究竟由哪些部分组成呢？</p>
</blockquote>
<ol>
<li>区块</li>
<li>区块链</li>
<li>P2P 网络</li>
<li>共识机制</li>
<li>&hellip;</li>
</ol>
<h3 id="区块">区块</h3>
<p>区块链就是由一个个区块组成的生态系统，每一个区块中包含了前一个区块链的哈希值、时间戳、<code>Merkle Root</code>、<code>Nonce</code>以及区块数据几个部分，比特币的区块大小为 1 MB。可以访问这个 <a href="https://andersbrownworth.com/blockchain/block">Demo</a> 来体验一下一个区块的生成过程。</p>
<p>因为每个区块都包含前一个区块的哈希值，根据前文所述的哈希性质，哪怕是极其微小的改变哈希值也会截然不同，因此很容易检测某个区块是否被篡改；Nonce 值则主要是用于调整挖矿难度，可以把时间控制在 10 分钟左右，以保障安全性。</p>
<h3 id="区块链">区块链</h3>
<p>所有的区块串联起来就形成了区块链，是一个存储着网络中所有交易历史记录的账本，因为每一个区块都包含着上一个区块的哈希信息（比如比特币系统是将上一个区块的块头取两次哈希），因此如果有交易发生变化则会造成区块链断裂，有一个小 <a href="https://andersbrownworth.com/blockchain/blockchain">Demo</a> 很好地演示了这一过程，大家可以体验一下！</p>
<h3 id="p2p-网络">P2P 网络</h3>
<p>P2P 网络是用于不同用户之间共享信息和资源的一种分布式网络，是一种分布式网络，网络中的每个人都能够得到一份信息备份，而且都有访问权限；而中心化网络是所有人都连接至一个（或一组）中心化网络；去中心化网络是有多个这样的中心网络，但没有一个单点网络可以拥有所有的信息。下图很好地解释了它们之间的区别：</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/blockchain_network.png" alt="blockchain_network"></p>
<h3 id="共识机制">共识机制</h3>
<p>区块链网络是由多个网络节点组成的，其中每个节点都存有一份信息备份，那它们是如何对交易达成一致的呢？也就是说，它们作为独立的节点，需要有一种机制来保障互相信任，这就是共识机制。</p>
<p>常用的共识机制有<code>PoW(Proof of Work)</code>工作量证明，<code>PoS(Proof of Stake)</code>权益证明，<code>DPoS(Delegated Proof of Stake</code>委任权益证明，<code>DBFT(Delegated Byzantine Fault Tolerance)</code>等。</p>
<p>比特币/以太坊主要采用的是工作量证明机制，通过算力比拼来增加恶意节点的作恶成本。通过动态调整挖矿的难度来让一笔交易时间控制在 10 分钟左右（6 个确认），但随着比特币挖矿越来越火热，消耗资源越来越多，对环境造成破坏；有些矿池拥有大量资源，也会造成一些中心化的风险。</p>
<p>权益证明机制则是通过权益（一般是代币）持有者进行投票来达成共识。这种机制不需要像工作量证明一样进行大量的算力比拼，但是也有一些风险，称为<code>Nothing at Stake</code>问题，很多权益持有者会在所有区块都投注并从中获利。为了解决这个问题，系统设置了一些规则，如对同时在多个链创建区块的用户/在错误链上创建区块的用户设置一些惩罚机制。目前以太坊正在向这种共识机制转变。</p>
<p><code>EOS</code>则采用了委任权益证明，选出一些代表性的节点来进行投票，这种方式目的是优化社区投票的效率和结果，但带来了一些中心化的风险。</p>
<p><code>DBFT</code>共识机制则是通过对节点分配不同的角色来达成共识，这样可以很大程度降低开销和避免分叉，但是也有核心角色作恶的风险。</p>
<h2 id="区块链安全与隐私">区块链安全与隐私</h2>
<h3 id="安全">安全</h3>
<p>区块链作为一个较新的技术，也存在很多安全隐患，如对数字货币交易所的攻击、智能合约漏洞、对共识协议的攻击、对网络流量（互联网 ISP）的攻击以及上传恶意数据等。比较著名的案例有 Mt.Gox 事件、以太坊 DAO 事件等，因此，对区块链的安全风险也是区块链的重要研究方向。</p>
<p>可以从协议、加密方案、应用、程序开发和系统等角度进行风险分析，提高区块链应用的安全性。例如在以太坊区块链中，可以对<code>Solidity</code>编程语言、<code>EVM</code>和区块链本身进行一些分析。</p>
<p>如智能合约中的一种叫低成本攻击的方式，就是通过识别以太坊网络中较低<code>Gas</code>费用的操作，重复执行以破坏整个网络。</p>
<p>对于安全问题，构建一个通用的代码检测器来检查恶意代码将会是一个更通用的解决方案。</p>
<h3 id="隐私">隐私</h3>
<p>在讲区块链概念的时候，提到了它很重要的一个特征，隐私性。也就是说，所有人都能看到链上的交易细节和历史记录，这一特性主要应用在食品、药物等供应链环节，但是对于一些金融场景，如个人账户余额、交易信息，则容易造成一些隐私风险。</p>
<blockquote>
<p>那有哪些技术能够应用于这些存在高价值、敏感信息的隐私保护呢？</p>
</blockquote>
<p>硬件层面，可以采用可信的执行环境，采用一些安全硬件，如<code>Intel SGX</code>，很大程度保障了隐私；网络可以采用多路径转发以避免从节点的 ip 地址推算出真实身份。</p>
<p>在技术层面，混币技术可以把很多交易进行一些混合，这样不容易找出对应的交易发送方和接收方；盲签技术可以保障第三方机构不能将参与交易的双方联系起来；环签用于保障交易签名的匿名性；零知识证明则可以应用于一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的以外的人和信息；同态加密可以保护原数据，给定 E(x)和 E(y)，可以很容易计算出某些关于 x, y 的加密函数值（同态运算）；基于属性的加密（<code>Attribute-based Encryption, ABE</code>）则为各个节点添加一些属性/角色，实现权限控制，从而保护隐私。</p>
<p>值得注意的是，即使一笔交易生成多个 inputs 和 outputs，这些 inputs 和 outputs 的地址也可能被人关联；除此之外，地址账户和现实世界中的真实身份也可能产生关联。</p>
<h2 id="总结">总结</h2>
<p>以上就是对区块链基础知识的一些梳理，主要从概念和原理层面进行了一些学习，后续还会更新对比特币、以太坊、<code>Hyperledger Fabric</code>等典型应用的分析与思考，并对 IPFS、跨链、NFT 等热门技术进行一些探究，敬请期待！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology</a>, <em>Professor S.M. Yiu, HKU</em></li>
<li><a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree</a>, <em>Udacity</em></li>
<li><a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用</a>，<em>肖臻，北京大学</em></li>
<li><a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战</a>，<em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技</em></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>用 OKR 的方式梳理自己的学习计划</title><link>https://www.pseudoyu.com/en/2021/02/11/learning_plan_okr/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/11/learning_plan_okr/</guid><description>用一句话形容理想情况下，自己想要达到的状态 具体目标范围：提升编程技术能力 时间周期：2 个月 描述：我想要成为一名具备过硬的编程能力的开发者，并对</description><content:encoded><![CDATA[<h2 id="用一句话形容理想情况下自己想要达到的状态">用一句话形容理想情况下，自己想要达到的状态</h2>
<ul>
<li><strong>具体目标范围</strong>：提升编程技术能力</li>
<li><strong>时间周期</strong>：2 个月</li>
<li><strong>描述</strong>：我想要成为一名具备过硬的编程能力的开发者，并对技术有持续学习的开放心态 <em><strong>— 目标 O</strong></em></li>
</ul>
<h2 id="寻找关键词拆解状态为目标">寻找关键词，拆解状态为目标</h2>
<h3 id="我需要提升解决的部分">我需要提升解决的部分</h3>
<ul>
<li>过硬的编程能力</li>
<li>持续学习的开放心态</li>
</ul>
<h3 id="想要达到的程度">想要达到的程度</h3>
<ul>
<li>能够通过技术创造价值</li>
<li>对技术有热爱和追求</li>
<li>B 站 Up 主“是落拓呀”的持续学习状态</li>
</ul>
<h2 id="制定每一个关键词目标的指标">制定每一个关键词/目标的指标</h2>
<ul>
<li><strong>过硬的编程能力</strong>：能够满足目前香港/内地区块链公司，如蚂蚁链、腾讯区块链、杭州趣链科技等目标公司的技术面试要求，并主导完成 1-2 个完整的项目，深入技术细节 <strong>— KR1</strong></li>
<li><strong>持续学习的开放心态</strong>：提升对于热门区块链技术平台（Ethereum、Hyperledger）与 Java 后端技术的理解与学习，并完成多篇原创技术博客 <strong>— KR2</strong></li>
</ul>
<h2 id="填充每一个关键指标的-todo-list">填充每一个关键指标的 todo list</h2>
<h3 id="过硬的编程能力">过硬的编程能力</h3>
<ol>
<li>每天按照分类与难度刷 LeetCode 算法题
<ol>
<li>白天刷 5-10 题</li>
<li>晚上按照节奏复习之前刷过的题的思路</li>
<li>看关于算法框架思路的书籍，完善</li>
</ol>
</li>
<li>完成区块链音乐版权项目毕业设计
<ol>
<li>每天至少 2 小时学习 Ethereum 智能合约编写相关</li>
<li>按照项目进度进行开发</li>
<li>与导师和同学定期交流，优化项目</li>
<li>调研市场上区块链产品，思考运营与商业化相关</li>
</ol>
</li>
<li>完成开源项目 RPC 框架的学习
<ol>
<li>每天至少 1 小时学习课程并实践代码</li>
<li>撰写关于 RPC 框架原理和核心知识点的技术博文</li>
<li>将此作为亮点项目，添加至简历并与同学进行模拟面试</li>
</ol>
</li>
<li>针对 GitHub 与一些书籍的面试经验，学习掌握计算机基础面试知识，和同学每周模拟面试，现场写算法题并讲解，找到问题并提出建议</li>
<li>参加春招面试，积攒面试经验查漏补缺，总结心得</li>
<li>和落拓学长交流区块链学习心得和路径，寻求建议</li>
</ol>
<h3 id="持续学习的开放心态">持续学习的开放心态</h3>
<ol>
<li>完成学校 COMP7408 区块链与分布式账本课程（共计 30 学时，每周一节 3 小时的课程）
<ol>
<li>每周一晚上参加线下课程</li>
<li>课程第二天花 3-6 小时整理当周课程的知识点与拓展部分</li>
<li>每周 2-3 小时将课程中的理论部分通过代码实践</li>
<li>每天至少 3 天对之前所有知识点进行复习和查漏补缺（每次 30 分钟左右）</li>
</ol>
</li>
<li>Udacity 区块链开发课程并整理笔记（共计约 40 学时）
<ol>
<li>每天至少 2 小时学习课程并实践代码</li>
<li>每天至少 3 天对之前所有知识点进行复习和查漏补缺（每次 30 分钟左右）</li>
<li>阶段性对课程里的项目进行详细整理，添加至简历并针对面试进行准备</li>
</ol>
</li>
<li>每天学习间隙整理基础理论知识，并了解一些前沿技术和产品</li>
<li>完成 CSDN 关于 Spring Boot 和其他框架的入门视频并整理</li>
<li>完成 Udacity 关于 Java 开发相关框架的介绍并进行项目实践</li>
<li>结合自己的理解与学习笔记，撰写针对特定技术的原创博客</li>
<li>定期和目前从事区块链的同学进行交流讨论，补充项目经验至简历与面试准备</li>
</ol>
]]></content:encoded></item><item><title>COMP7801 Topic 2 Spatial Data Management</title><link>https://www.pseudoyu.com/en/2021/02/06/comp7801_topic2/</link><pubDate>Sat, 06 Feb 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/06/comp7801_topic2/</guid><description>Spatial Data Management Concepts Spatial Data
Location data Check-in service Online Maps Location-based services Location tracking Traffic Data Spatial Databases
PostgreSQL with PostGIS Neo4J-spatial HadoopGIS Ingres GeoMesa Spatial Data Management
Spatial Database Systems Manage large collections of multidimensional objects (2D/3D) A spatial object Contains (at least) one spatial attributes that describes its location and/or geometry A spatial relation Is an organized collection of spatial objects of the same entity Spatial Data Representation</description><content:encoded><![CDATA[<h2 id="spatial-data-management">Spatial Data Management</h2>
<h3 id="concepts">Concepts</h3>
<p><strong>Spatial Data</strong></p>
<ul>
<li>Location data
<ul>
<li>Check-in service</li>
<li>Online Maps</li>
<li>Location-based services</li>
</ul>
</li>
<li>Location tracking</li>
<li>Traffic Data</li>
</ul>
<p><strong>Spatial Databases</strong></p>
<ul>
<li>PostgreSQL with PostGIS</li>
<li>Neo4J-spatial</li>
<li>HadoopGIS</li>
<li>Ingres</li>
<li>GeoMesa</li>
</ul>
<p><strong>Spatial Data Management</strong></p>
<ul>
<li>Spatial Database Systems
<ul>
<li>Manage large collections of multidimensional objects (2D/3D)</li>
</ul>
</li>
<li>A spatial object
<ul>
<li>Contains (at least) one spatial attributes that describes its location and/or geometry</li>
</ul>
</li>
<li>A spatial relation
<ul>
<li>Is an organized collection of spatial objects of the same entity</li>
</ul>
</li>
</ul>
<h3 id="spatial-data">Spatial Data</h3>
<p><strong>Representation</strong></p>
<ul>
<li>Points (Cities in large-scale map)</li>
<li>Extent (rivers, forest, etc.)
<ul>
<li>Vector (approximation by geometric objects)</li>
<li>Raster (A set of pixels in the grid)</li>
</ul>
</li>
</ul>
<p><strong>Application</strong></p>
<ul>
<li>Spatial data
<ul>
<li>GIS</li>
<li>Segemented images</li>
<li>Components of CAD constructs or VLSI circuit</li>
<li>Stars on the sky</li>
<li>&hellip;</li>
</ul>
</li>
<li>Spatial database
<ul>
<li>Users of mobile devices</li>
<li>Geographers, life scientists</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h4 id="features-of-spatial">Features of spatial</h4>
<ul>
<li>Dimensionality
<ul>
<li>There is no total ordering of objects in the multidimensional space that preserves spatial proximity</li>
</ul>
</li>
<li>Complex spatial extent</li>
<li>No standard definitions of spatial operations and algebra</li>
</ul>
<p>Relationa indexes (like B+ trees) and query processing methods (sort-merge join, hash-join) are not applicable</p>
<p>Spatial access methods (SAMs) for spatial data have to be defined</p>
<ul>
<li>Index spatial objects</li>
<li>Facilitate efficient processing of simple spatial query types (e.g. range queries)</li>
</ul>
<h3 id="spatial-relationships">Spatial Relationships</h3>
<p>A spatial relationship associates two objects according to their relative location and extent in space. Sometimes also called &ldquo;spatial relations&rdquo;.</p>
<p>Can refer to a database relation which stores spatial objects.</p>
<p><strong>Classification</strong></p>
<ul>
<li>Topological relationships</li>
<li>Distance relationships</li>
<li>Directional relationships</li>
</ul>
<h4 id="topological-relationships">Topological relationships</h4>
<p>Each object is characterized by the space it occupies in the universe (A set of pixels).</p>
<p>A set of relationsips between their boundaries and interiors</p>
<ul>
<li>Boundary</li>
<li>Interior (some may not have, points, line segments, etc.)</li>
</ul>
<p><strong>A hierarchy of relations</strong></p>
<ul>
<li>intersect (or overlaps)
<ul>
<li>equals</li>
<li>inside</li>
<li>contains</li>
<li>adjacent</li>
</ul>
</li>
<li>disjoint</li>
</ul>
<h4 id="distance-relationships">Distance relationships</h4>
<p>Associate two objects based on their geometric (Euclidean distance), and it&rsquo;s usually abstracted into human mind.</p>
<p>Distance relationships are expressed either explicitly or by some abstract distance class.</p>
<h4 id="directional-relationships">Directional relationships</h4>
<p>Associates two object based on their relative orientation according to a global reference system.</p>
<h3 id="spatial-queries">Spatial Queries</h3>
<p>Applied on one (or more) spatial relations to retrieve objects staisfying some spatial relationships</p>
<ul>
<li>Nearest neighbor query</li>
<li>Spatial join</li>
<li>Range query
<ul>
<li>Spatial selction</li>
<li>window query</li>
</ul>
</li>
</ul>
<h3 id="spatial-query-processing">Spatial Query Processing</h3>
<p>Evaluating spatial relationships on geometric data is slow.</p>
<p>A spatial object is approximated by its minimum bounding rectangle (MBR)</p>
<p><strong>Process</strong></p>
<ol>
<li>Filter: The MBR is tested against the query predicate</li>
<li>Refinement: The exact geometry of objects that pass the filter step is tested for qualification</li>
</ol>
<h3 id="spatial-access-methods-sams">Spatial Access Methods (SAMs)</h3>
<p><strong>The problem of indexing spatial data</strong></p>
<ul>
<li>No dynamic access method with good theoretical worst-case guarantees for range queries</li>
</ul>
<p>SAMs aim at the minimization of the expected cost.</p>
<ul>
<li>Indexing of multidimensional points</li>
</ul>
<h4 id="point-access-methods">Point access methods</h4>
<p>Divide the apce into disjoint partitions and group the points according to the regions they belong</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/point_access_methods.png" alt="point_access_methods"></p>
<p>Not effective for extended objects (may need to be clipped into several parts which leads to data redundancy and affects performance negatively).</p>
<p>Object clipping can be avoided if we allow the regions of object to overlap.</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/object_clipping.png" alt="object_clipping"></p>
<p><strong>Optimization</strong></p>
<ul>
<li>Group the objects below into 3 groups of 4 objects each such that the MBRs of the groups have the minimum overlap</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/overlap_region.png" alt="overlap_region"></p>
<ul>
<li>Hard optimization problem</li>
</ul>
<h3 id="the-r-tree">The R-tree</h3>
<p><strong>Concept</strong></p>
<ul>
<li>Group object MBRs to disk blocks hierarchically</li>
<li>Each group of object is a leaf of the tree</li>
<li>The MBRs of the leaf nodes are grouped to form nodes at the next level</li>
<li>Grouping is recursively applied at each level until a single group (the root) is formed</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/R_Tree_example.png" alt="R_Tree_example"></p>
<p><strong>Elements</strong></p>
<ul>
<li>Leaf node entries: &lt;MBR, object-id&gt;, all leaves are in same level</li>
<li>Non-leaf node entries: &lt;MBR, ptr&gt;, pointing to entries</li>
<li>Root: have at least two children</li>
<li>Non-root node parameters
<ul>
<li>M</li>
<li>m</li>
<li>m &lt;= M/2</li>
<li>Usually m = 0.4 M</li>
</ul>
</li>
</ul>
<h4 id="range-searching-using-an-r-tree">Range searching using an R-tree</h4>
<p>Range_query (query W, R-tree node n)</p>
<ul>
<li>If n is not a leaf node
<ul>
<li>For each index entry e in n such that e.MBR intersects W
<ul>
<li>Visit node n&rsquo; pointed  by e.ptr</li>
<li>Range_query (W, n')</li>
</ul>
</li>
</ul>
</li>
<li>If n is a leaf
<ul>
<li>For each index entry e in n such that e.MBR intersects W
<ul>
<li>Visit object o pointed by e.object-id</li>
<li>Test range query against exact geometry of o; If o intersects W, report o</li>
</ul>
</li>
</ul>
</li>
<li>May follow multiple paths during search</li>
<li>Different search predicates are used for different realtionships with W</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/range_search.png" alt="range_search"></p>
<h4 id="construction-of-the-r-tree">Construction of the R-tree</h4>
<ul>
<li>Dynamically constructed/maintained</li>
<li>Insertions/deletions interleave with search operations
<ul>
<li>Insertion similiar to B+ Tree, but with special optimization algorithms
<ul>
<li>Choose the path where a new MBR is inserted</li>
<li>Split overflow nodes</li>
</ul>
</li>
<li>Underflows in deletions
<ul>
<li>Deleting the underflow leaf node</li>
<li>Re-insert the remaining entries</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="r-tree">R*-tree</h3>
<p>Only different in the insertion algorithm (compared to R-tree), aiming at constructing a tree of high quality</p>
<p><strong>A good tree</strong></p>
<ul>
<li>nodes with small MBRs</li>
<li>nodes with small overlap</li>
<li>nodes that look like squares</li>
<li>nodes as full as possible</li>
</ul>
<h3 id="optimization">Optimization</h3>
<ul>
<li>Minimize the area covered by an index rectangle (small area means small dead space)</li>
<li>Minimize overlap between node MBRs (Minimizes the number of traversed paths)</li>
<li>Minimize the margins of node MBRs (Square-like nodes, smaller number of intersections for a random query, better structure)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/margin_minimization.png" alt="margin_minimization"></p>
<ul>
<li>Optimize the storage utilization
<ul>
<li>Nodes in tree should be filled as much as possible</li>
<li>Minimizes tree height and potentially decreases dead space</li>
</ul>
</li>
<li>Insertion heuristics (Select the path)
<ul>
<li>Least MBR enlargement after insertion
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/MBR_enlargement.png" alt="MBR_enlargement"></li>
<li>Least MBR overlap after insertion
<img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/MBR_overlap.png" alt="MBR_overlap"></li>
</ul>
</li>
</ul>
<h3 id="node-spliting">Node Spliting</h3>
<p><strong>Determine the split axis</strong></p>
<ul>
<li>For each axis (i.e. x and y axis)
<ul>
<li>Sum=0;</li>
<li>sort entries by the lower value, then by upper value</li>
<li>for each sorting (e.g. lower value)
<ul>
<li>for k=m to M+1-m</li>
<li>place first k entries in group A, and the remaining ones in group B</li>
<li>
<ul>
<li>Sum = Sum + margin(A) + margin(B)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Choose axis with the minimum Sum</li>
</ul>
<p><strong>Distribute entries along axis</strong></p>
<ul>
<li>Along the split axis, choose the distribution with minimum overlap</li>
<li>If there are multiple groupings with minimal overlap choose &lt;A,B&gt; such that area(A)+area(B) is minimized</li>
</ul>
<h4 id="insertion-heuristics-forced-reinsert">Insertion heuristics: Forced Reinsert</h4>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/forced_reinsert.png" alt="forced_reinsert"></p>
<ul>
<li>Forced Reinsert
<ul>
<li>When R*-tree node n overflows, instead of splitting n immediately, try to see if some entries in n could possibly fit better in another node</li>
<li>Find the 30% furthest entries from the center of the group</li>
<li>Re-insert them to the tree (not to be repeated if another overflow occurs)</li>
</ul>
</li>
<li>Slightly more expensive, but better tree structure:
<ul>
<li>less overlap</li>
<li>more space is utilized (more full nodes)</li>
</ul>
</li>
</ul>
<h3 id="bulk-loading-r-trees">Bulk-loading R-trees</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/bulk_loading_R_tree.png" alt="bulk_loading_R_tree"></p>
<p>Given a static set S of rectangles, build an R-tree that indexes S.</p>
<ul>
<li>Method 1: iteratively insert rectangles into an initially empty tree
<ul>
<li>Feature
<ul>
<li>tree reorganization is slow</li>
<li>tree nodes are not as full as possible: more space occupied for the tree</li>
</ul>
</li>
</ul>
</li>
<li>Method 2 (x-sorting): bulk-load the rectangles into the tree using some fast (sort or hash-based) process
<ul>
<li>sort rectangles using the x-coordinate of their center</li>
<li>pack M consecutive rectangles in leaf nodes</li>
<li>build tree bottom-up</li>
<li>Feature
<ul>
<li>R-tree is built fast</li>
<li>good space utilization</li>
<li>results in leaf nodes that are have long stripes as MBRs</li>
</ul>
</li>
</ul>
</li>
<li>Method 3 (Hilbert sorting): use a space-filling curve to order the rectangles
<ul>
<li>much better structure, but still the nodes have large overlap</li>
</ul>
</li>
<li>Method 4 (sort-tile-recursive): Sort using one axis first and then groups of sqrt(n) rectangles using the other axis
<ul>
<li>Usually the best structure compared to other bulk-loading methods</li>
</ul>
</li>
</ul>
<h3 id="k-nearest-neighbor-search">K Nearest Neighbor Search</h3>
<p>Given a spatial relation R, a query object q, and a number k &lt;|R|, find the k-nearest neighbors of q in R.</p>
<p>We can have more than one k-NN sets (with multiple possible equidistant furthest points in them).</p>
<h4 id="distance-measures-and-mbrs">Distance measures and MBRs</h4>
<p>Distances between MBRs lower-bound the distances between the corresponding objects</p>
<p>dist(MBR(oi),MBR(oj)) ≤ dist(oi, oj)</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/distance_mbr.png" alt="distance_mbr"></p>
<p>Distances between R-tree node MBRs lower-bound the distances between the entries in them</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/min_distance_mbr.png" alt="min_distance_mbr"></p>
<p>The distance between a query object q and an R-tree node MBR lower-bounds the distances between q and the objects indexed under this node</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/q_distance_mbr.png" alt="q_distance_mbr"></p>
<h4 id="depth-first-nn-search-using-an-r-tree">Depth-first NN search using an R-tree</h4>
<ol>
<li>Start from the root and visit the node nearest to q</li>
<li>Continue recursively, until a leaf node nl is visited.</li>
<li>Find the NN of q in nl.</li>
<li>Continue visiting other nodes after backtracking as long there are nodes closer to q than the current NN.</li>
</ol>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/DFNNS_code.png" alt="DFNNS_code"></p>
<ul>
<li>Large space can be pruned by avoiding visiting R-tree nodes and their sub-trees</li>
<li>Should order the entries of a node in increasing distance from q to maximize potential for a good NN found fast</li>
<li>Can be easily adapted for k-NN search</li>
<li>Requires at most one tree path to be currently in memory – good for small memory buffers
<ul>
<li>Characteristic of all depth-first search algorithms</li>
<li>Recall that the range search algorithm is also DF</li>
</ul>
</li>
<li>However, does not visit the least possible number of nodes</li>
<li>Also, not incremental – more on this later&hellip;</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/DFNNS_example.png" alt="DFNNS_example"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">1. visit root
</span></span><span class="line"><span class="cl">dist<span class="o">(</span>q,M1<span class="o">)</span>&lt;dist<span class="o">(</span>q,oNN<span class="o">)</span>
</span></span><span class="line"><span class="cl">must visit node M1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2. visit M1
</span></span><span class="line"><span class="cl">dist<span class="o">(</span>q,m1<span class="o">)</span>&lt;dist<span class="o">(</span>q,oNN<span class="o">)</span>
</span></span><span class="line"><span class="cl">must visit node m1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">3. visit m1
</span></span><span class="line"><span class="cl">check a,b,c
</span></span><span class="line"><span class="cl">found new NN:
</span></span><span class="line"><span class="cl"><span class="nv">oNN</span> <span class="o">=</span> a, dist<span class="o">(</span>q,oNN<span class="o">)</span> <span class="o">=</span> sqrt<span class="o">(</span>5<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">4. backtrack to M1
</span></span><span class="line"><span class="cl">check m2dist<span class="o">(</span>q,m2<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &gt;<span class="o">=</span> sqrt<span class="o">(</span>5<span class="o">)</span>:
</span></span><span class="line"><span class="cl">No need to visit node m2
</span></span><span class="line"><span class="cl">check m3dist<span class="o">(</span>q,m3<span class="o">)</span> <span class="o">=</span> sqrt<span class="o">(</span>5<span class="o">)</span> &gt;<span class="o">=</span> sqrt<span class="o">(</span>5<span class="o">)</span>:
</span></span><span class="line"><span class="cl">No need to visit node m3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">5. backtrack to root
</span></span><span class="line"><span class="cl">check M2dist<span class="o">(</span>q,M2<span class="o">)</span> <span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span> &lt; sqrt<span class="o">(</span>5<span class="o">)</span>:
</span></span><span class="line"><span class="cl">must visit node M2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">6. visit M2
</span></span><span class="line"><span class="cl">check m4dist<span class="o">(</span>q,m4<span class="o">)</span> <span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span> &lt; sqrt<span class="o">(</span>5<span class="o">)</span>:
</span></span><span class="line"><span class="cl">must visit node m4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">7. visit m4
</span></span><span class="line"><span class="cl">check i,j,k
</span></span><span class="line"><span class="cl">found new NN:
</span></span><span class="line"><span class="cl"><span class="nv">oNN</span> <span class="o">=</span> k, dist<span class="o">(</span>q,oNN<span class="o">)</span> <span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">8. backtrack to M2
</span></span><span class="line"><span class="cl">check m5dist<span class="o">(</span>q,m5<span class="o">)</span> &gt;<span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span>:
</span></span><span class="line"><span class="cl">No need to visit node m5
</span></span><span class="line"><span class="cl">check m6dist<span class="o">(</span>q,m6<span class="o">)</span> &gt;<span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span>:
</span></span><span class="line"><span class="cl">No need to visit node m6
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">9. backtrack to root
</span></span><span class="line"><span class="cl">check M3dist<span class="o">(</span>q,M3<span class="o">)</span> &gt;<span class="o">=</span> sqrt<span class="o">(</span>2<span class="o">)</span>:
</span></span><span class="line"><span class="cl">No need to visit node M3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">10. backtrack from root
</span></span><span class="line"><span class="cl">Algorithm terminates
</span></span><span class="line"><span class="cl"><span class="nv">oNN</span> <span class="o">=</span>k with dist<span class="o">(</span>q,oNN<span class="o">)=</span> sqrt<span class="o">(</span>2<span class="o">)</span> found
</span></span></code></pre></div><h4 id="best-first-nn-search">Best-first NN search</h4>
<p>Put all entries in a priority queue and always “open” the closest one, independently of the node that contains it.</p>
<p>Thus the best (i.e., closest) entry is always visited first.</p>
<ul>
<li>A more efficient algorithm (given large enough memory)</li>
<li>Optimal in the number of R-tree nodes visited for a given query q</li>
<li>Uses a priority queue to organize seen entries and prioritize the next node to be visited</li>
<li>Adaptable for k-NN search and incremental NN search</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/BFNNS_code.png" alt="BFNNS_code"></p>
<ul>
<li>In the previous example, we have visited fewer nodes compared to DF-NN algorithm
<ul>
<li>Only nodes whose MBR intersect the disk centered at q with radius the real NN distance are visited (see if you can you prove this)</li>
</ul>
</li>
<li>The algorithm can be adapted for incremental NN search
<ul>
<li>After having found the NN can we easily (incrementally) find the next NN without starting search from the beginning?
<ul>
<li>put objects on the heap</li>
<li>never prune, but wait until an object comes out</li>
</ul>
</li>
</ul>
</li>
<li>The algorithm can be used for k-NN search
<ul>
<li>use a second heap to organize the NN found so far (same can be done for DF-NN)</li>
<li>no need if we just use the inc. version of the algorithm</li>
</ul>
</li>
<li>&hellip; but: The heap can grow very large until the algorithm terminates</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/BFNNS_example.png" alt="BFNNS_example"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Step 1: put all entries of root on heap Q
</span></span><span class="line"><span class="cl"><span class="nv">Q</span> <span class="o">=</span> M1<span class="o">(</span>1<span class="o">)</span>, M2<span class="o">(</span>sqrt<span class="o">(</span>2<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>8<span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 2: get closest entry <span class="o">(</span>top element of Q<span class="o">)</span>:
</span></span><span class="line"><span class="cl">M1<span class="o">(</span>1<span class="o">)</span>. Visit node M1. Put all entries of
</span></span><span class="line"><span class="cl">visited node on heap Q
</span></span><span class="line"><span class="cl"><span class="nv">Q</span> <span class="o">=</span> M2<span class="o">(</span>sqrt<span class="o">(</span>2<span class="o">))</span>, m1<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>8<span class="o">))</span>, m2<span class="o">(</span>3<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 3: get closest entry <span class="o">(</span>top element of Q<span class="o">)</span>:
</span></span><span class="line"><span class="cl">M2<span class="o">(</span>sqrt<span class="o">(</span>2<span class="o">))</span>. Visit node M2. Put all entries of
</span></span><span class="line"><span class="cl">visited node on heap Q
</span></span><span class="line"><span class="cl"><span class="nv">Q</span> <span class="o">=</span>m4<span class="o">(</span>sqrt<span class="o">(</span>2<span class="o">))</span>, m1<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>8<span class="o">))</span>, m2<span class="o">(</span>3<span class="o">)</span>, 	m5<span class="o">(</span>sqrt<span class="o">(</span>13<span class="o">))</span>, m5<span class="o">(</span>sqrt<span class="o">(</span>17<span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 4: get closest entry <span class="o">(</span>top element of Q<span class="o">)</span>:
</span></span><span class="line"><span class="cl">m4<span class="o">(</span>sqrt<span class="o">(</span>2<span class="o">))</span>. Visit node m4. m4 is a leaf node, so update NN <span class="k">if</span> some object in m4 is closer than the current NN:
</span></span><span class="line"><span class="cl"><span class="nv">oNN</span> <span class="o">=</span> k, dist<span class="o">(</span>q,oNN<span class="o">)=</span> sqrt<span class="o">(</span>2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">Q</span> <span class="o">=</span>m1<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>, M3<span class="o">(</span>sqrt<span class="o">(</span>8<span class="o">))</span>, m2<span class="o">(</span>3<span class="o">)</span>, 	m5<span class="o">(</span>sqrt<span class="o">(</span>13<span class="o">))</span>, m5<span class="o">(</span>sqrt<span class="o">(</span>17<span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 5: get closest entry <span class="o">(</span>top element of Q<span class="o">)</span>:
</span></span><span class="line"><span class="cl">m1<span class="o">(</span>sqrt<span class="o">(</span>5<span class="o">))</span>. Since sqrt<span class="o">(</span>5<span class="o">)</span> &gt;<span class="o">=</span> dist<span class="o">(</span>q,oNN<span class="o">)=</span> sqrt<span class="o">(</span>2<span class="o">)</span>, search stops and oNN is returned as the NN of q
</span></span></code></pre></div><p><strong>incremental NN search</strong></p>
<ul>
<li>Example 1: find the nearest large city (&gt;10,000 residents) to my current position
<ul>
<li>Solution 1:
<ul>
<li>find all large cities</li>
<li>apply NN search on the result</li>
<li>could be slow if many such cities</li>
<li>also R-tree may not be available for large cities only</li>
</ul>
</li>
<li>Solution 2:
<ul>
<li>incrementally find NN and check if the large city requirement is satisfied; if not get the next NN</li>
</ul>
</li>
</ul>
</li>
<li>Example 2: find the nearest hotel; see if you like it; if not get the next one; see if you like it; &hellip;</li>
</ul>
<h3 id="spatial-joins">Spatial Joins</h3>
<p>Most algorithms focus on the efficient processing of the filter step.</p>
<p>Most spatial predicates on actual objects reduce to intersection of MBRs in the filter step. Thus all algorithms consider mainly the intersect predicate.</p>
<p><strong>Types</strong></p>
<ul>
<li>intersection joins</li>
<li>Semi-join: Find the cities that intersect a river</li>
<li>Similarity join: Find pairs of hotels, restaurants close to each other (with distance smaller than 100m)</li>
<li>Closest pairs: Find the closest pair of hotels, restaurants</li>
<li>All-NN: For each hotel find the nearest restaurant</li>
<li>Iceberg distance join: Find hotels close to at least 10 restaurants</li>
</ul>
<p><strong>Three categories of spatial join algorithms</strong></p>
<ul>
<li>Both inputs are indexed (e.g., synchronized tree traversal)</li>
<li>One input is indexed (e.g., indexed nested loops)</li>
<li>Neither input is indexed (e.g., spatial hash join)</li>
</ul>
<h4 id="r-tree-intersection-join">R-tree (Intersection) Join</h4>
<p>Applies on two R-trees of spatial relations R and S</p>
<p>Node MBRs at the high level of the trees can prune object combinations to be checked</p>
<p>This pseudo-code version assumes that the trees have same height</p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/R_tree_join_code.png" alt="R_tree_join_code"></p>
<p><strong>Example</strong></p>
<ul>
<li>run for root(RA), root(RB)</li>
<li>for every intersecting pair there (e.g., A1, B1) run recursively for pointed nodes</li>
<li>intersecting pairs of leaf nodes are qualifying object MBR pairs</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/R_tree_join_example.png" alt="R_tree_join_example"></p>
<h4 id="optimization-1">Optimization</h4>
<p><strong>space restriction</strong></p>
<ul>
<li>If an entry in n1 does not intersect the MBR of n2 it may not intersect any entry in n2.</li>
<li>Perform two scans in n1 and n2 to prune such entries</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/R_tree_join_optimization.png" alt="R_tree_join_optimization"></p>
<p><strong>plane sweep</strong></p>
<ul>
<li>Sort entries in both nodes on their lower-x value (lower bound of x-projection)</li>
<li>Sweep a line to find fast all entry pairs that qualify x-intersection
<ul>
<li>for each of them check y-intersection</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/R_tree_join_optimization2.png" alt="R_tree_join_optimization2"></p>
<ul>
<li>Worst-case sub-optimal. But very effective on the average</li>
<li>Worst-case optimal algorithms require advanced data structures for y-intersection. Large hidden constants, thus high cost for this problem size</li>
<li>Can be used with other spatial join algorithms</li>
</ul>
<p><strong>R-tree join</strong></p>
<ul>
<li>The most efficient algorithm (assuming that the relations are indexed)</li>
<li>Cannot be used for non-indexed inputs</li>
<li>unless we build on-the-fly R-trees</li>
<li>Comes with some I/O scheduling techniques for minimizing the page accesses</li>
</ul>
<h4 id="joining-non-indexed-inputs">Joining non-indexed inputs</h4>
<p><strong>Spatial hash join</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/spatial_hash_join.png" alt="spatial_hash_join"></p>
<p><strong>Partition based spatial merge join</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/spatial_merge_join.png" alt="spatial_merge_join"></p>
<p><strong>Indexed Nested Loops</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/indexed_nest_loops.png" alt="indexed_nest_loops"></p>
<p><strong>Seeded tree join and Bulk-load and Match build an on-the-fly R-tree</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/seeded_tree_join.png" alt="seeded_tree_join"></p>
<p><strong>Slot-index spatial join applies hash-join using the entries of a high R-tree level</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/slot_index_spatial_join.png" alt="slot_index_spatial_join"></p>
<h3 id="the-refinement-step">The refinement step</h3>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/refinement_step.png" alt="refinement_step"></p>
<ul>
<li>Step 1: find MBR pairs that intersect</li>
<li>Step 2: compare some more detailed approximations to make conclusions (a.k.a. geometric filter)
<ul>
<li>conservative approximations
<ul>
<li>e.g., convex hull</li>
</ul>
</li>
<li>progressive approximation
<ul>
<li>e.g., maximum enclosed rectangle</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/refinement_detailed_approximations.png" alt="refinement_detailed_approximations"></p>
<ul>
<li>Step 3: if still join predicate inconclusive, perform expensive refinement step
<ul>
<li>can be processed by computational geometry algorithms</li>
</ul>
</li>
<li>Multi-step processing (R-tree join as example)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/refinement_multi_step.png" alt="refinement_multi_step"></p>
]]></content:encoded></item><item><title>COMP7801 Topic 1b Database Indexing</title><link>https://www.pseudoyu.com/en/2021/01/30/comp7801_topic1b/</link><pubDate>Sat, 30 Jan 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/01/30/comp7801_topic1b/</guid><description>Database Indexing Concepts Indexing mechanisms used to speed up access to desired data Search Key An attribute or a set of attributes used to look up records in a file An index file consists of records (called index entries) of the form search key - pointer Index files are typically much smaller than the original file Two basic kinds of indices Ordered indices: search keys are stored in sorted order Hash indices: search keys are distributed across &amp;ldquo;buckets&amp;rdquo; using a &amp;ldquo;hash function&amp;rdquo; Good Index Index quality is evaluated by several factors Access types supported by the index efficiently records with a specified value in the attribute (equality query) or records with an attribute value falling in a specified range of values (range query) Access time – query response time Insertion time – data record insertion time Deletion time – data record deletion time Space overhead – size of the index file Classification of Indexes Primary index In a sequentially ordered file, the index whose search key specifies the sequential order of the file Secondary index an index whose search key specifies an order different from the sequential order of the file Also called non-clustered index Dense index Index record appears for every search-key value in the file Sparse Index Contains index records for only some search-key values Applicable when records are sequentially ordered on search-key Less space and less maintenance overhead for insertions and deletions Generally slower than dense index for locating records Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block Primary and Secondary Indices Secondary indices have to be dense Indices offer substantial benefits when searching for records Index is much smaller than relation file (cheap scan) Index can be ordered (fast search) When a file is modified, every index on the file must be updated Updating indices imposes overhead on database modification Indexes should be used with care Sequential scan using primary index is efficient, but a sequential scan using a secondary index is expensive Each record access may fetch a new block from disk Multilevel Index If index does not fit in memory, access becomes expensive To reduce number of disk accesses to index records, treat 1st level of index kept on disk as a sequential file and construct a sparse index on it outer index – a sparse index on 1st-level index file inner index – the 1st-level index file If even outer index is too large to fit in main memory, yet another level of index can be created, and so on B+-Tree Index Files A dynamic, multi-level index Advantage automatically reorganizes itself with small local changes, in the face of insertions and deletions Reorganization of entire file is not required to maintain performance Disadvantage of B+-trees Extra insertion and deletion overhead, space overhead Advantages of B+-trees outweigh disadvantages, and they are used extensively Basic Properties Disk-based tree structure every node of the tree is a block and has an address (block-id) on the disk Multiway tree each node has multiple children (between n/2 and n, where n/2 is the order or degree of the tree) Therefore, at least 50% of the space in a node is guaranteed to be occupied (this rule may not apply to tree root) Balanced tree all paths from the root to a leaf have the same length guarantees good search performance (to be seen later) Disjoint partition of attribute domain into ranges each sub-tree indexes a range in the attribute domain the entries of a directory node define the separators between domain intervals leaf nodes store index entries and pointers to the relation file Non-Leaf Nodes in B+-Trees Each non-leaf node contains up to n-1 search key values and up to n pointers All non-leaf nodes (except root) contain at least n/2 pointers (n/2 is sometimes called the minimum fan-out or degree) Non leaf nodes form a multi-level sparse index on the leaf nodes.</description><content:encoded><![CDATA[<h2 id="database-indexing">Database Indexing</h2>
<h3 id="concepts">Concepts</h3>
<ul>
<li>Indexing mechanisms used to speed up access to desired data</li>
<li>Search Key
<ul>
<li>An attribute or a set of attributes used to look up records in a file</li>
</ul>
</li>
<li>An index file consists of records (called index entries) of the form <code>search key - pointer</code></li>
<li>Index files are typically much smaller than the original file</li>
<li>Two basic kinds of indices
<ul>
<li>Ordered indices:  search keys are stored in sorted order</li>
<li>Hash indices:  search keys are distributed across &ldquo;buckets&rdquo; using a &ldquo;hash function&rdquo;</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/indexing_example.png" alt="indexing_example"></p>
<h3 id="good-index">Good Index</h3>
<ul>
<li>Index quality is evaluated by several factors
<ul>
<li>Access types supported by the index efficiently
<ul>
<li>records with a specified value in the attribute (equality query)</li>
<li>or records with an attribute value falling in a specified range of values (range query)</li>
</ul>
</li>
<li>Access time – query response time</li>
<li>Insertion time – data record insertion time</li>
<li>Deletion time – data record deletion time</li>
<li>Space overhead – size of the index file</li>
</ul>
</li>
</ul>
<h3 id="classification-of-indexes">Classification of Indexes</h3>
<ul>
<li>Primary index
<ul>
<li>In a sequentially ordered file, the index whose search key specifies the sequential order of the file</li>
</ul>
</li>
<li>Secondary index
<ul>
<li>an index whose search key specifies an order different from the sequential order of the file</li>
<li>Also called non-clustered index</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/classification_of_indexing.png" alt="classification_of_indexing"></p>
<ul>
<li>Dense index
<ul>
<li>Index record appears for every search-key value in the file</li>
</ul>
</li>
<li>Sparse Index
<ul>
<li>Contains index records for only some search-key values</li>
<li>Applicable when records are sequentially ordered on search-key</li>
<li>Less space and less maintenance overhead for insertions and deletions</li>
<li>Generally slower than dense index for locating records</li>
<li>Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/classification_of_indexing_2.png" alt="classification_of_indexing_2"></p>
<h4 id="primary-and-secondary-indices">Primary and Secondary Indices</h4>
<ul>
<li>Secondary indices have to be dense</li>
<li>Indices offer substantial benefits when searching for records
<ul>
<li>Index is much smaller than relation file (cheap scan)</li>
<li>Index can be ordered (fast search)</li>
</ul>
</li>
<li>When a file is modified, every index on the file must be updated
<ul>
<li>Updating indices imposes overhead on database modification</li>
<li>Indexes should be used with care</li>
</ul>
</li>
<li>Sequential scan using primary index is efficient, but a sequential scan using a secondary index is expensive
<ul>
<li>Each record access may fetch a new block from disk</li>
</ul>
</li>
</ul>
<h3 id="multilevel-index">Multilevel Index</h3>
<ul>
<li>If index does not fit in memory, access becomes expensive</li>
<li>To reduce number of disk accesses to index records, treat 1st level of index kept on disk as a sequential file and construct a sparse index on it
<ul>
<li>outer index – a sparse index on 1st-level index file</li>
<li>inner index – the 1st-level index file</li>
</ul>
</li>
<li>If even outer index is too large to fit in main memory, yet another level of index can be created, and so on</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/multilevel_index_example.png" alt="multilevel_index_example"></p>
<h3 id="b-tree-index-files">B+-Tree Index Files</h3>
<ul>
<li>A dynamic, multi-level index</li>
<li>Advantage
<ul>
<li>automatically reorganizes itself with small local changes, in the face of insertions and deletions</li>
<li>Reorganization of entire file is not required to maintain performance</li>
</ul>
</li>
<li>Disadvantage of B+-trees
<ul>
<li>Extra insertion and deletion overhead, space overhead</li>
</ul>
</li>
<li>Advantages of B+-trees outweigh disadvantages, and they are used extensively</li>
</ul>
<h4 id="basic-properties">Basic Properties</h4>
<ul>
<li>Disk-based tree structure
<ul>
<li>every node of the tree is a block and has an address (block-id) on the disk</li>
</ul>
</li>
<li>Multiway tree
<ul>
<li>each node has multiple children (between n/2 and n, where n/2 is the order or degree of the tree)</li>
<li>Therefore, at least 50% of the space in a node is guaranteed to be occupied (this rule may not apply to tree root)</li>
</ul>
</li>
<li>Balanced tree
<ul>
<li>all paths from the root to a leaf have the same length</li>
<li>guarantees good search performance (to be seen later)</li>
</ul>
</li>
<li>Disjoint partition of attribute domain into ranges
<ul>
<li>each sub-tree indexes a range in the attribute domain</li>
<li>the entries of a directory node define the separators between domain intervals</li>
<li>leaf nodes store index entries and pointers to the relation file</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_Example.png" alt="B_Plus_Tree_Example"></p>
<h4 id="non-leaf-nodes-in-b-trees">Non-Leaf Nodes in B+-Trees</h4>
<ul>
<li>Each non-leaf node contains up to n-1 search key values and up to n pointers</li>
<li>All non-leaf nodes (except root) contain at least n/2 pointers (n/2 is sometimes called the minimum fan-out or degree)</li>
<li>Non leaf nodes form a multi-level sparse index on the leaf nodes.  For a non-leaf node with m pointers
<ul>
<li>All the search-keys in the subtree to which P1 points are less than K1</li>
<li>For 2 &lt;= i &lt;= n – 1, all the search-keys in the subtree to which Pi points have values greater than or equal to Ki–1 and smaller than Km–1</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_Non_Leaf_Node.png" alt="B_Plus_Tree_Non_Leaf_Node"></p>
<h4 id="leaf-node-in-a-b-tree">Leaf Node in a B+-Tree</h4>
<ul>
<li>Contains between (n-1)/2 and n-1 entries</li>
<li>Each index entry is a search key value + a record-id</li>
<li>If Li, Lj are leaf nodes and i &lt; j, Li’s search-key values are all smaller than Lj’s search-key values</li>
<li>Each leaf node is linked with a pointer to the next node</li>
</ul>
<h4 id="observations">Observations</h4>
<ul>
<li>Since the inter-node connections are done by pointers, &ldquo;logically&rdquo; close blocks need not be “physically” close
<ul>
<li>Nodes of the tree are dynamically created/deleted, so we cannot guarantee physical closeness</li>
</ul>
</li>
<li>The non-leaf levels of the B+-tree form a hierarchy of sparse indices</li>
<li>The B+-tree contains a relatively small number of levels (logarithmic in the size of the main file), thus searches can be conducted efficiently</li>
<li>Insertions and deletions to the main file can be handled efficiently (in logarithmic time)</li>
</ul>
<h4 id="queries">Queries</h4>
<ul>
<li>
<p>Find all records with a search-key value of k</p>
<ul>
<li>Start with the root node
<ul>
<li>Examine the node for the smallest search-key value &gt; k</li>
<li>If such a value exists, assume it is Ki.  Then follow Pi to the child node. (E.g. P2 is for keys in  K1 &lt;= Keys &lt; K2 )</li>
<li>Otherwise k &gt;= Kn–1, where there are n pointers in the node.  Then follow Pn to the child node</li>
</ul>
</li>
<li>If the node reached by following the pointer above is not a leaf node, repeat the above procedure on the node, and follow the corresponding pointer</li>
<li>Eventually reach a leaf node.  If for some i, key Ki = k  follow pointer Pi  to the desired record.  Else no record with search-key value k exists</li>
</ul>
</li>
<li>
<p>In processing a query, a path is traversed in the tree from the root to some leaf node</p>
</li>
<li>
<p>If there are K search-key values in the file, the path is not longer than log(n/2)(K). (The degree of a node is no less than n/2)</p>
</li>
<li>
<p>A node has generally the same size of a disk block, typically 4 kilobytes, and n is typically around 100 (40 bytes per index entry)</p>
</li>
<li>
<p>With 1 million search key values and n/2 = 50, at most log50(1,000,000) = 4 nodes are accessed in a lookup</p>
</li>
<li>
<p>Contrast this with a balanced binary tree with 1 million search key values — around 20 nodes are accessed in a lookup</p>
<ul>
<li>(log2(1,000,000) ~= 20)</li>
<li>above difference is significant since every node access may need a disk I/O, costing around 10 milliseconds!</li>
</ul>
</li>
<li>
<p>Similar result for a binary search of an ordered sequential file</p>
</li>
</ul>
<h4 id="range-queries">Range Queries</h4>
<ul>
<li>Find all records with a search-key value between k and m (k&lt;m)
<ul>
<li>Start with the root node
<ul>
<li>Examine the node for the smallest search-key value &gt; k</li>
<li>If such a value exists, assume it is Kj
<ul>
<li>Then follow Pi to the child node</li>
</ul>
</li>
<li>Otherwise k &gt;= Kn–1, where there are n pointers in the node
<ul>
<li>Then follow Pn to the child node.</li>
</ul>
</li>
</ul>
</li>
<li>If the node reached by following the pointer above is not a leaf node, repeat the above procedure on the node, and follow the corresponding pointer</li>
<li>Eventually reach a leaf node.  If for some i, k &lt;= Ki &lt;= m follow pointer Pi  to the desired record. Continue with next entry Ki+1, while Ki+1 &lt;= m. If at end of leaf node follow pointer to next node, until Ki &gt;m or end of index</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_Range_Query.png" alt="B_Plus_Tree_Range_Query"></p>
<h4 id="insertion">Insertion</h4>
<ul>
<li>Find the leaf node in which the search-key value to be inserted  would appear</li>
<li>If the search-key value is already there in the leaf node, record is added to file and if necessary one more pointer is associated with the search key value</li>
<li>If the search-key value is not there, then add the record to the main file. Then
<ul>
<li>If there is room in the leaf node, insert (key-value, pointer) pair in the leaf node</li>
<li>Otherwise, split the node (along with the new (key-value, pointer) entry) as discussed in the next slides</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_Insertion.png" alt="B_Plus_Tree_Insertion"></p>
<h4 id="splitting">Splitting</h4>
<ul>
<li>Splitting a node
<ul>
<li>take the (search-key value, pointer) pairs (including the one being inserted) in sorted order.  Place the first n/2 in the original node, and the rest in a new node</li>
<li>let the new node be p, and let k be the least key value in p.  Insert (k,p) in the parent of the node being split. If the parent is full, split it and propagate the split further up</li>
</ul>
</li>
<li>The splitting of nodes proceeds upwards till a node that is not full is found.  In the worst case the root node may be split increasing the height of the tree by 1</li>
<li>Non-leaf node splitting
<ul>
<li>Overflown node has n+1 pointers and n values</li>
<li>Leave first n/2 key values and n/2+1 pointers to original node</li>
<li>Move last n/2 key values and n/2+1 pointers to new node</li>
<li>insert (middle key value, pointer to new node) to parent node</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_splitting.png" alt="B_Plus_Tree_splitting"></p>
<h4 id="deletion">Deletion</h4>
<ul>
<li>Find the record to be deleted, and remove it from the relation file</li>
<li>Remove (search-key value, record-id) of deleted record from the leaf node of the B+-tree</li>
<li>If the node has too few entries due to the removal, and the entries in the node and a sibling fit into a single node, then
<ul>
<li>Insert all the search-key values in the two nodes into a single node (the one on the left), and delete the other node. (Deletion triggers a merge)</li>
<li>Delete the pair (Ki–1, Pi), where Pi is the pointer to the deleted node, from its parent, recursively using the above procedure</li>
</ul>
</li>
<li>Otherwise, if the node has too few entries due to the removal, and the entries in the node and a sibling does not fit into a single node, then
<ul>
<li>Redistribute the pointers between the node and a sibling such that both have more than the minimum number of entries. (Deletion and rebalancing)</li>
<li>Update the corresponding search-key value in the parent of the node</li>
</ul>
</li>
<li>The node deletions may cascade upwards until a node which has n/2 or more pointers is found.  If the root node has only one pointer after deletion, it is deleted and the sole child becomes the root</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/B_Plus_Tree_deletion.png" alt="B_Plus_Tree_deletion"></p>
<h3 id="static-hashing">Static Hashing</h3>
<ul>
<li>A bucket is a unit of storage containing one or more records (a bucket is typically a disk block)</li>
<li>In a hash file organization we obtain the bucket of a record directly from its search-key value using a hash function</li>
<li>Hash function h is a function from the set of all search-key values K to the set of all bucket addresses B</li>
<li>Hash function is used to locate records for access, insertion as well as deletion</li>
<li>Records with different search-key values may be mapped to the same bucket; thus entire bucket has to be searched sequentially to locate a record. (Collision)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/indexing_hashing.png" alt="indexing_hashing"></p>
<h4 id="hash-function">Hash Function</h4>
<ul>
<li>Worst case has function maps all search-key values to the same bucket; this makes access time proportional to the number of search-key values in the file</li>
<li>An ideal hash function is uniform, i.e., each bucket is assigned the same number of search-key values from the set of all possible values</li>
<li>Ideal hash function is random, so each bucket will have the same number of records assigned to it irrespective of the actual distribution of search-key values in the file</li>
<li>Typical hash functions perform computation on the internal binary representation of the search-key
<ul>
<li>For example, for a string search-key, the binary representations of all the characters in the string could be added and the sum modulo the number of buckets could be returned</li>
</ul>
</li>
</ul>
<h4 id="handling-of-bucket-overflows">Handling of Bucket Overflows</h4>
<ul>
<li>Bucket overflow can occur because of
<ul>
<li>Insufficient buckets</li>
<li>Skew in distribution of records.  This can occur due to two reasons
<ul>
<li>multiple records have same search-key value</li>
<li>chosen hash function produces non-uniform distribution of key values</li>
</ul>
</li>
</ul>
</li>
<li>Although the probability of bucket overflow can be reduced, it cannot be eliminated; it is handled by using overflow buckets</li>
<li>Overflow chaining / closed hashing – the overflow buckets of a given bucket are chained together in a linked list</li>
</ul>
<h4 id="hash-indices">Hash Indices</h4>
<ul>
<li>Hashing can be used not only for file organization, but also for index-structure creation</li>
<li>A hash index organizes the search keys, with their associated record pointers, into a hash file structure</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/Hash_Index.png" alt="Hash_Index"></p>
<h4 id="deficiencies-of-static-hashing">Deficiencies of Static Hashing</h4>
<ul>
<li>In static hashing, function h maps search-key values to a fixed set of B of bucket addresses
<ul>
<li>Databases grow with time.  If initial number of buckets is too small, performance will degrade due to too much overflows</li>
<li>If file size at some point in the future is anticipated and number of buckets allocated accordingly, significant amount of space will be wasted initially</li>
<li>If database shrinks, again space will be wasted</li>
<li>One option is periodic re-organization of the file with a new hash function, but it is very expensive.</li>
</ul>
</li>
<li>These problems can be avoided by using techniques that allow the number of buckets to be modified dynamically (dynamic hashing)</li>
</ul>
]]></content:encoded></item><item><title>COMP7103 Topic 1 Introduction</title><link>https://www.pseudoyu.com/en/2021/01/28/comp7103_topic1/</link><pubDate>Thu, 28 Jan 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/01/28/comp7103_topic1/</guid><description>COMP7103 Data Mining Topic 1 Introduction Decision-Support System (DSS)
A decision-support system (DSS) is a system that assists decision makers to make important decisions for an organization or business KDD and data mining are important components in many DSS&amp;rsquo;s Data and Knowledge
Data A collecion of facts about certain group of objects Pattern Certain characteristics of data that are frequently observed Knowledge Some general rules about the objects Data Warehouse</description><content:encoded><![CDATA[<h1 id="comp7103-data-mining">COMP7103 Data Mining</h1>
<h2 id="topic-1-introduction">Topic 1 Introduction</h2>
<p><strong>Decision-Support System (DSS)</strong></p>
<ul>
<li>A decision-support system (DSS) is a system that assists decision makers to make important decisions for an organization or business</li>
<li>KDD and data mining are important components in many DSS&rsquo;s</li>
</ul>
<p><strong>Data and Knowledge</strong></p>
<ul>
<li>Data
<ul>
<li>A collecion of facts about certain group of objects</li>
</ul>
</li>
<li>Pattern
<ul>
<li>Certain characteristics of data that are frequently observed</li>
</ul>
</li>
<li>Knowledge
<ul>
<li>Some general rules about the objects</li>
</ul>
</li>
</ul>
<p><strong>Data Warehouse</strong></p>
<ul>
<li>An integration of various departmental databases (organization-wide data)</li>
<li>Avoids overloading local operational databases</li>
<li>A convenient place where KDD and data mining applications are performed</li>
<li>Provide data mining algorithms an easy access to the required data</li>
<li>Wrappers
<ul>
<li>Extract</li>
<li>Transform</li>
</ul>
</li>
<li>Can also be used to support other DSS tools, e.g. On-Line Analytical Processing (OLAP) - analyze large amount of data, Online Transaction Processing (OLTP)</li>
</ul>
<p><strong>Data Mining and KDD</strong></p>
<ul>
<li>KDD (Knowledge Discovery in Databases)
<ul>
<li>A process of discovering useful knowledge from big collection of data</li>
</ul>
</li>
<li>Data Mining
<ul>
<li>A step within the KDD process in which interesting patterns are found. Some of these patterns are then interpreted and transformed into useful knowledge.</li>
</ul>
</li>
</ul>
<p><em>Data Mining is a step in the whole KDD process</em></p>
<p><em>KDD is a process of identifying patterns in data and deriving knowledge from them</em></p>
<ul>
<li>valid</li>
<li>novel</li>
<li>potentially useful</li>
<li>understandable</li>
</ul>
<p><strong>Data Mining</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/data_mining_system.png" alt="data_mining_system"></p>
<p><strong>Databases</strong></p>
<ul>
<li>Bottom layer of the architecture</li>
<li>Contains data sources (raw data)</li>
</ul>
<p><em>Traditional Database usually only provides the functions of storing and retrieving facts</em></p>
<p><em>The knowledge resulting from data mining should carry certain degree of predictive ability or descriptive (explanatory) ability (or both)</em></p>
<p><strong>Data Mining Engine</strong></p>
<ul>
<li>Applies data mining algorithms on data</li>
<li>Provides multiple functionality</li>
</ul>
<p><strong>Evaluation Module</strong></p>
<ul>
<li>Allow users to specify what is/isn&rsquo;t interesting</li>
</ul>
<p><strong>Knowledge Base</strong></p>
<ul>
<li>Capture domain specific knowledge</li>
<li>Stores the rules generated by data mining</li>
</ul>
<p><strong>Graphical User Interface</strong></p>
<ul>
<li>Presents mined patterns and rules to users in an easy-to-visualize way</li>
<li>Provides feedback mechanisms for the users to specify the criteria of interestingness</li>
<li>Provides a query language or query interface for users to select and retrieve</li>
</ul>
<p><strong>Challenges of Data Mining</strong></p>
<ul>
<li>Technical
<ul>
<li>Scalability</li>
<li>Dimensionality</li>
<li>Data stream</li>
</ul>
</li>
<li>Data
<ul>
<li>Complex and heterogeneous data</li>
<li>Data quality</li>
</ul>
</li>
<li>Privacy
<ul>
<li>Data ownership and distribution</li>
<li>Privacy preservation</li>
</ul>
</li>
<li>Results
<ul>
<li>Interpretation of patterns</li>
</ul>
</li>
</ul>
<p><strong>The KDD Process</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/kdd_process.png" alt="kdd_process"></p>
<ul>
<li>Step 1: Goal Setting
<ul>
<li>Understand your application domain</li>
<li>Obtain prior known knowledge</li>
</ul>
</li>
<li>Step 2: Data Collection
<ul>
<li>Characteristics</li>
<li>Where to find</li>
<li>How to store</li>
</ul>
</li>
<li>Step 3: Data Cleaning and Preprocessing
<ul>
<li>Missing data</li>
<li>Incorrect data (noise)</li>
<li>Outliers</li>
</ul>
</li>
<li>Step 4: Data Reduction and Transformation (or Preparation)
<ul>
<li>Compact data into a form</li>
<li>Improve data mining algorithms</li>
</ul>
</li>
<li>Step 5: Data Mining
<ul>
<li>Pick a data mining model</li>
<li>Pick a data mining algorithm</li>
<li>Apply the algorithm to the data</li>
</ul>
</li>
<li>Step 6: Result Evaluation
<ul>
<li>Check the results and goals</li>
<li>Refine and re-run (if not)</li>
</ul>
</li>
<li>Step 7: Knowledge Consolidation
<ul>
<li>Document</li>
<li>Report</li>
</ul>
</li>
</ul>
<p><strong>Iterative and Interactive</strong></p>
<ul>
<li>Some steps of the process need to be refined, and the whole process be repeated</li>
<li>Certain amount of human involvement is needed to monitor and to fine tune the steps</li>
</ul>
<p><strong>Prediction</strong></p>
<ul>
<li>Uses database records that describe information about past behavior to automatically generate a model (or rule) that can predict future behavior</li>
</ul>
<p><strong>Description</strong></p>
<ul>
<li>Derive patterns that summarize the underlying relationships in data and to describe the characteristics of data</li>
</ul>
<p><strong>OLAP (On-Line Analytical Processing)</strong></p>
<ul>
<li>View data in a multi-dimensional model (a data cube)</li>
<li>Fast aggregation</li>
<li>Summarization</li>
</ul>
<p><em>Example</em></p>
<ul>
<li>Selection -&gt; Group-by -&gt; Summarization</li>
</ul>
<p><strong>Classification</strong></p>
<p><em>Supervised learning</em></p>
<ul>
<li>Goal
<ul>
<li>Unseen records should be assigned a class (accuracy)</li>
</ul>
</li>
<li>Approach
<ul>
<li>Given a training set</li>
<li>Learn classifier</li>
<li>Find a model</li>
<li>Test the model using test set</li>
</ul>
</li>
</ul>
<p><em>Example</em></p>
<ul>
<li>Direct Marketing
<ul>
<li>Reduce cost of mailing by targeting a set of consumers likely to buy a new cell-phone product</li>
</ul>
</li>
</ul>
<p><strong>Regression</strong></p>
<ul>
<li>Goal
<ul>
<li>Preduct a value of numerical variable based on the values of other variables</li>
</ul>
</li>
</ul>
<p><em>Example</em></p>
<ul>
<li>Predicting sales amounts of new product based on advertising expenditure</li>
<li>Predicting wind velocities as a function of temperature, humidity, air pressure, etc.</li>
</ul>
<p><strong>Clustering</strong></p>
<ul>
<li>Given a set of data objects with a set of attributes and similarity measure</li>
<li>Find clusters (e.g. distance-based clustering)
<ul>
<li>Maximize the intra-cluster similarity</li>
<li>Minimize the inter-cluster similarity</li>
</ul>
</li>
<li>Objects in one cluster are more similiar to one another</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/illustrating_cluster.png" alt="illustrating_cluster"></p>
<p><em>Example</em></p>
<ul>
<li>Document Clustering
<ul>
<li>To find groups of documents that are similar to each other based on the important terms they contain</li>
</ul>
</li>
</ul>
<p><strong>Association Rule Discovery</strong></p>
<ul>
<li>Given a set of records each of which contains some items from a given collection</li>
<li>Goal
<ul>
<li>Produce dependency rules which predict occurrence of an item based on occurrences of other items</li>
</ul>
</li>
</ul>
<p><em>Example</em></p>
<ul>
<li>Marketing and Sales Promotion</li>
</ul>
<p><strong>Sequence Analysis</strong></p>
<ul>
<li>Given a sequence database contains sequences of events</li>
<li>Find sequences
<ul>
<li>Interesting</li>
<li>Frequently occurring</li>
</ul>
</li>
<li>Predict future behavior.</li>
</ul>
<p><em>Example</em></p>
<ul>
<li>Renting movies</li>
<li>Buying habits</li>
<li>Web serving behavior</li>
<li>Web log analysis</li>
</ul>
]]></content:encoded></item><item><title>COMP7801 Topic 1a Relational Database</title><link>https://www.pseudoyu.com/en/2021/01/23/comp7801_topic1a/</link><pubDate>Sat, 23 Jan 2021 01:18:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/01/23/comp7801_topic1a/</guid><description>Relational Databases Structure of Relational Databases Basic structure Given sets D1, D2, &amp;hellip;, Dn A relation r is a subset of D1 x D2 x &amp;hellip;, x Dn A relation is a set of n-tuples (a1, a2, &amp;hellip;, an) where each ai Di Example
if customer-name = {Jones, Smith, Curry, Lindsay} customer-street = {Main, North, Park} customer-city = {Harrison, Rye, Pittsfield} Then r = {(Jones, Main, Harrison), (Smith, North, Rye), (Curry, North, Rye), (Lindsay, Park, Pittsfield)} is a relation over customer-name x customer-street x customer-city Attribute Types Each attribute of a relation has a name The set of allowed values for each attribute is called the domain of the attribute Relation Schema A1, A2, &amp;hellip;, An are attributes R = (A1, A2, &amp;hellip;, An ) is a relation schema E.</description><content:encoded><![CDATA[<h2 id="relational-databases">Relational Databases</h2>
<h3 id="structure-of-relational-databases">Structure of Relational Databases</h3>
<h4 id="basic-structure">Basic structure</h4>
<ul>
<li>Given sets D1, D2, &hellip;, Dn</li>
<li>A relation r is a subset of D1 x  D2  x &hellip;, x Dn</li>
<li>A relation is a set of n-tuples (a1, a2, &hellip;, an) where each ai  <belong to> Di</li>
</ul>
<p><strong>Example</strong></p>
<ul>
<li>if
<ul>
<li><code>customer-name = {Jones, Smith, Curry, Lindsay}</code></li>
<li><code>customer-street = {Main, North, Park}</code></li>
<li><code>customer-city = {Harrison, Rye, Pittsfield}</code></li>
</ul>
</li>
<li>Then
<ul>
<li><code>r = {(Jones, Main, Harrison), (Smith, North, Rye), (Curry, North, Rye), (Lindsay, Park, Pittsfield)}</code> is a relation over customer-name x customer-street x customer-city</li>
</ul>
</li>
</ul>
<h4 id="attribute-types">Attribute Types</h4>
<ul>
<li>Each attribute of a relation has a name</li>
<li>The set of allowed values for each attribute is called the domain of the attribute</li>
</ul>
<h4 id="relation-schema">Relation Schema</h4>
<ul>
<li>A1, A2, &hellip;, An are attributes</li>
<li>R = (A1, A2, &hellip;, An ) is a relation schema
<ul>
<li>E.g. <code>Account-schema = (account-number, branch-name, balance)</code></li>
</ul>
</li>
<li>r(R) is a relation on the relation schema R
<ul>
<li>E.g. <code>customer(Customer-schema)</code></li>
</ul>
</li>
</ul>
<h4 id="relation-instance">Relation Instance</h4>
<ul>
<li>The current values (relation instance) of a relation are specified by a table</li>
<li>An element t of r is a tuple, represented by a row in a table</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/relation_instance.png" alt="relation_instance"></p>
<h3 id="database">Database</h3>
<ul>
<li>A database consists of multiple relations which are inter-related</li>
<li>Information about an enterprise is broken up into parts, with each relation storing one part of the information</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/database_overview.png" alt="database_overview"></p>
<h4 id="query-language">Query language</h4>
<p>Language in which user requests information from the database</p>
<ul>
<li>Categories
<ul>
<li>procedural</li>
<li>non-procedural</li>
</ul>
</li>
<li>Pure languages
<ul>
<li>Relational Algebra
<ul>
<li>The operators take one or more relations as inputs and give a new relation as a result</li>
<li>Operations
<ul>
<li>select</li>
<li>project</li>
<li>union</li>
<li>set-Intersection</li>
<li>set difference</li>
<li>cartesian product</li>
<li>rename</li>
<li>Natural Join</li>
<li>Aggregate Functions
<ul>
<li>avg:  average value</li>
<li>min:  minimum value</li>
<li>max:  maximum value</li>
<li>sum:  sum of values</li>
<li>count:  number of values</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Relational Calculus</li>
</ul>
</li>
</ul>
<p><strong>SQL</strong></p>
<ul>
<li>SQL is based on set and relational operations with certain modifications and enhancements</li>
<li>A typical SQL query has the form
<ul>
<li><code>select A1, A2, ..., Anfrom r1, r2, ..., rm where P</code></li>
</ul>
</li>
<li>The result of an SQL query is a multiset of tuples</li>
<li>Clauses
<ul>
<li>select
<ul>
<li>To force the elimination of duplicates, insert the keyword <code>distinct</code> after <code>select</code></li>
</ul>
</li>
<li>where
<ul>
<li>The where clause specifies conditions that the result must satisfy
<ul>
<li>Comparison results can be combined using the logical connectives and, or, and not</li>
<li>Comparisons can be applied to results of arithmetic expressions</li>
</ul>
</li>
</ul>
</li>
<li>from
<ul>
<li>The from clause lists the relations involved in the query</li>
</ul>
</li>
</ul>
</li>
<li>Aggregate Functions
<ul>
<li>Group By
<ul>
<li>Find the number of depositors for each branch
<ul>
<li><code>select branch-name,count (distinct customer-name)from depositor,account where depositor.account-number = account.account-numbergroup by branch-name</code></li>
</ul>
</li>
</ul>
</li>
<li>Having
<ul>
<li>formation of groups whereas predicates in the where clause are applied before forming groups</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Query Evaluation</strong></p>
<ul>
<li>Basic operations
<ul>
<li>Selections</li>
<li>Joins</li>
<li>Other operations (projection, aggregation)</li>
</ul>
</li>
<li>Transformation of queries into a tree of operations</li>
</ul>
<p><strong>Query Optimizationh</strong></p>
<ul>
<li>Many equivalent expressions to the original query can be derived</li>
<li>The query optimizer uses statistical data and appropriate algorithms to compute an expression of low evaluation cost</li>
</ul>
<h3 id="storage-of-databases">Storage of databases</h3>
<h4 id="physical-storage-media">Physical Storage Media</h4>
<ul>
<li>Cache
<ul>
<li>fastest and most costly form of storage</li>
<li>volatile</li>
<li>managed by the computer system hardware</li>
</ul>
</li>
<li>Main memory
<ul>
<li>fast access</li>
<li>generally too small (or too expensive) to store the entire database</li>
<li>Volatile
<ul>
<li>contents of main memory are usually lost if a power failure or system crash occurs</li>
</ul>
</li>
</ul>
</li>
<li>Magnetic-disk
<ul>
<li>Data is stored on spinning disk, and read/written magnetically</li>
<li>Primary medium for the long-term storage of data</li>
<li>typically stores entire database</li>
<li>Data must be moved from disk to main memory for access, and written back for storage
<ul>
<li>Much slower access than main memory</li>
</ul>
</li>
<li>direct-access –  possible to read data on disk in any order, unlike magnetic tape</li>
<li>Capacities range up to several TB currently</li>
<li>Survives power failures and system crashes</li>
</ul>
</li>
</ul>
<h4 id="storage-hierarchy">Storage Hierarchy</h4>
<ul>
<li>Primary storage
<ul>
<li>Fastest media but volatile (cache, main memory).</li>
</ul>
</li>
<li>Secondary storage</li>
<li>Next level in hierarchy, non-volatile, moderately fast access time
<ul>
<li>Also called on-line storage, E.g. flash memory, magnetic disks</li>
</ul>
</li>
<li>Tertiary storage: lowest level in hierarchy, non-volatile, slow access time
<ul>
<li>Also called off-line storage, E.g. magnetic tape, optical storage</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/memory_hierarchy.png" alt="memory_hierarchy"></p>
<h4 id="magnetic-disks">Magnetic Disks</h4>
<ul>
<li>Read-write head
<ul>
<li>Positioned very close to the platter surface (almost touching it)</li>
<li>Reads or writes magnetically encoded information.</li>
</ul>
</li>
<li>Surface of platter divided into circular tracks
<ul>
<li>Over 16,000 tracks per platter on typical hard disks</li>
</ul>
</li>
<li>Each track is divided into sectors
<ul>
<li>A sector is the smallest unit of data that can be read or written</li>
<li>Sector size typically 512 bytes</li>
<li>Typical sectors per track: 200 (on inner tracks) to 400 (on outer tracks)</li>
</ul>
</li>
<li>To read/write a sector
<ul>
<li>disk arm swings to position head on right track</li>
<li>platter spins continually; data is read/written as sector passes under head</li>
</ul>
</li>
<li>Head-disk assemblies
<ul>
<li>multiple disk platters on a single spindle (typically 2 to 4)</li>
<li>one head per platter, mounted on a common arm.</li>
</ul>
</li>
<li>Cylinder i consists of ith track of all the platters</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/magnetic_hard_disk.png" alt="magnetic_hard_disk"></p>
<h4 id="performance-measures-of-disks">Performance Measures of Disks</h4>
<ul>
<li>Access time – the time it takes from when a read or write request is issued to when data transfer begins
<ul>
<li>Seek time – time it takes to reposition the arm over the correct track
<ul>
<li>Average seek time is 1/2 the worst case seek time
<ul>
<li>Would be 1/3 if all tracks had the same number of sectors, and we ignore the time to start and stop arm movement</li>
</ul>
</li>
<li>4 to 10 milliseconds on typical disks</li>
</ul>
</li>
<li>Rotational latency – time it takes for the sector to be accessed to appear under the head
<ul>
<li>Average latency is 1/2 of the worst case latency</li>
<li>4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.)</li>
</ul>
</li>
</ul>
</li>
<li>Data-transfer rate – the rate at which data can be retrieved from or stored to the disk
<ul>
<li>4 to 8 MB per second is typical</li>
<li>Multiple disks may share a controller, so rate that controller can handle is also important</li>
</ul>
</li>
</ul>
<h4 id="optimization-of-disk-block-access">Optimization of Disk-Block Access</h4>
<ul>
<li>Block – a contiguous sequence of sectors from a single track
<ul>
<li>data is transferred between disk and main memory in blocks</li>
<li>sizes range from 512 bytes to several kilobytes
<ul>
<li>Smaller blocks: more transfers from disk</li>
<li>Larger blocks:  more space wasted due to partially filled blocks</li>
<li>Typical block sizes today range from 4 to 16 kilobytes</li>
</ul>
</li>
</ul>
</li>
<li>Disk-arm-scheduling algorithms order pending accesses to tracks so that disk arm movement is minimized</li>
</ul>
<h4 id="storage-access">Storage Access</h4>
<ul>
<li>A database file is partitioned into fixed-length storage units called blocks.  Blocks are units of both storage allocation and data transfer. Typical size of a block ranges between 4Kb-16Kb</li>
<li>Database system seeks to minimize the number of block transfers between the disk and memory.  We can reduce the number of disk accesses by keeping as many blocks as possible in main memory</li>
<li>Buffer
<ul>
<li>portion of main memory available to store copies of disk blocks.</li>
</ul>
</li>
<li>Buffer manager
<ul>
<li>subsystem responsible for allocating buffer space in main memory.</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/storage_access.png" alt="storage_access"></p>
<h4 id="buffer-manager">Buffer manager</h4>
<ul>
<li>Programs call on the buffer manager when they need a block from disk
<ul>
<li>If the block is already in the buffer, the requesting program is given the address of the block in main memory</li>
<li>If the block is not in the buffer
<ul>
<li>the buffer manager allocates space in the buffer for the block, replacing (throwing out) some other block, if required, to make space for the new block</li>
<li>The block that is thrown out is written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk</li>
<li>Once space is allocated in the buffer, the buffer manager reads the block from the disk to the buffer, and passes the address of the block in main memory to requester</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Buffer-Replacement Policies</strong></p>
<ul>
<li>Most operating systems replace the block least recently used (LRU strategy)</li>
<li>Idea behind LRU – use past pattern of block references as a predictor of future references. If a block has not been recently used, then it is unlikely that it will be used in the near future</li>
<li>This replacement policy is also used at different applications. A proxy server keeps in the most recently used web pages in a local cache. If a user requests again a page he has seen, it does not need to be downloaded again in the future</li>
<li>LRU works well for unpredicted access patterns</li>
<li>However, queries have well-defined access patterns (such as sequential scans), and a database system can use the information in a user’s query to predict future references</li>
<li>LRU can be a bad strategy for certain access patterns involving repeated scans of data. Mixed strategy with hints on replacement strategy provided by the query optimizer is preferable</li>
</ul>
<h4 id="file-organization">File Organization</h4>
<ul>
<li>The database is stored as a collection of files. Each file is a sequence of records. A record is a sequence of fields</li>
<li>Each record has an address in the file, which is called record pointer or record id (simply rid)</li>
<li>A simple approach
<ul>
<li>assume record size is fixed</li>
<li>each file has records of one particular type only</li>
<li>different files are used for different relations</li>
</ul>
</li>
</ul>
<p><strong>Organization of Records in Files</strong></p>
<ul>
<li>Heap
<ul>
<li>a record can be placed anywhere in the file where there is space</li>
</ul>
</li>
<li>Sequential
<ul>
<li>store records in sequential order, based on the value of the search key of each record</li>
</ul>
</li>
<li>Hashing
<ul>
<li>a hash function computed on some attribute of each record; the result specifies in which block of the file the record should be placed</li>
</ul>
</li>
<li>Records of each relation may be stored in a separate file. In a  clustered file organization  records of several different relations can be stored in the same file
<ul>
<li>Motivation: store related records on the same block to minimize I/O</li>
<li>However, not good for queries accessing only a few relations</li>
<li>In general, this representation is barely used</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>LeetCode 刷题常用数据结构（Java 篇）</title><link>https://www.pseudoyu.com/en/2021/01/01/algorithm_data_structure_java/</link><pubDate>Fri, 01 Jan 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/01/01/algorithm_data_structure_java/</guid><description>前言 最近开始刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近开始刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数据结构和操作并不多，熟练使用也能很好地提升自己的代码质量，特此做一个整理，以便于查阅。</p>
<h2 id="数据结构">数据结构</h2>
<h3 id="数组-">数组 []</h3>
<h4 id="初始化">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 初始化一个大小为10，默认值为0的数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个二位boolean数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">5</span><span class="o">][</span><span class="mi">10</span><span class="o">];</span>
</span></span></code></pre></div><h4 id="常用方法">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 函数开头一般要做一个非空检查，然后用索引下标访问元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问num[i]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="字符串-string">字符串 String</h3>
<h4 id="初始化-1">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;hello world&#34;</span><span class="o">;</span>
</span></span></code></pre></div><h4 id="访问字符串">访问字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// String不支持用[]直接访问字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span></span></code></pre></div><h4 id="修改字符串">修改字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// String不支持直接修改字符串，要转化为char[]类型才能修改
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">chars</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">chars</span><span class="o">);</span>
</span></span></code></pre></div><h4 id="判断字符串是否相同">判断字符串是否相同</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 一定要用equals方法进行判断，不能直接用==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 不相等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h4 id="拼接字符串">拼接字符串</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 支持直接用+进行连接，但是效率不高
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s1</span> <span class="o">+</span> <span class="s">&#34;!&#34;</span><span class="o">;</span>
</span></span></code></pre></div><h4 id="通过-stringbuilder-进行频繁的字符串拼接以提高效率">通过 StringBuilder 进行频繁的字符串拼接以提高效率</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;f&#39;</span><span class="o">;</span> <span class="n">c</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// append方法支持拼接字符、字符串、数字等类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="动态数组-arraylist">动态数组 ArrayList</h3>
<h4 id="初始化-2">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 初始化一个存储String类型的动态数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个存储int类型的动态数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span></code></pre></div><h4 id="常用方法-1">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 判断是否为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 访问索引元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在尾部添加元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span></span></code></pre></div><h3 id="双链表-linkedlist">双链表 LinkedList</h3>
<h4 id="初始化-3">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 初始化一个存储String类型的双链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个存储int类型的双链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span></code></pre></div><h4 id="常用方法-2">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 判断是否为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在尾部添加元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除尾部最后一个元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">removeLast</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在头部添加元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除头部第一个元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">removeFirst</span><span class="o">()</span>
</span></span></code></pre></div><h3 id="哈希表-hashmap">哈希表 HashMap</h3>
<h4 id="初始化-4">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 初始化一个整数映射到字符串的哈希表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个字符串映射到数组的哈希表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span></code></pre></div><h4 id="常用方法-3">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 判断是否存在Key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">containsKey</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取Key的对应Value，如果不存在则返回null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取Key的对应Value，如果不存在则返回null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">V</span> <span class="nf">getOrDefault</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">defaultValue</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将Key和Value存入哈希表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将Key和Value存入哈希表，如果存在，则什么都不做
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">V</span> <span class="nf">putIfAbsent</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除键值对并返回值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">V</span> <span class="nf">remove</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取哈希表中所有Key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="nf">keySet</span><span class="o">()</span>
</span></span></code></pre></div><h3 id="队列-queue">队列 Queue</h3>
<h4 id="初始化-5">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Java中的Queue是一个接口
</span></span></span><span class="line"><span class="cl"><span class="c1">// 初始化一个存储String的队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span></code></pre></div><h4 id="常用方法-4">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 判断是否为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回队头元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">peek</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除并返回队头元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">poll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在队尾插入元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">offer</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span></span></code></pre></div><h3 id="堆栈-stack">堆栈 Stack</h3>
<h4 id="初始化-6">初始化</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 初始化一个int类型的堆栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span></code></pre></div><h4 id="常用方法-5">常用方法</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 判断是否为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将元素压入栈顶
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">push</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 返回栈顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">peek</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 删除并的返回栈顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">E</span> <span class="nf">pop</span><span class="o">()</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>刷题路漫漫&hellip;加油！</p>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://leetcode.com">LeetCode 官网</a></li>
<li><a href="https://github.com/labuladong/fucking-algorithm">labuladong 的算法小抄</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>xDeepFM for Recommender Systems - 推荐系统</title><link>https://www.pseudoyu.com/en/2020/11/11/comp7404_group_project/</link><pubDate>Wed, 11 Nov 2020 16:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/11/11/comp7404_group_project/</guid><description>xDeepFM for Recommender Systems eXtreme Deep Factorization Machine (xDeepFM) This paper proposes a novel Compressed Interaction Network (CIN), which aims to generate feature interactions in an explicit fashion and at the vector-wise level. Github Repository GitHub: xDeepFM_for_Recommender_Systems Video Demo YouTube | Google Drive Datasets Criteo Dataset. It is a famous industry benchmarking dataset for developing models predicting ad click-through rate, and is publicly accessible. Given a user and the page</description><content:encoded><![CDATA[<h1 id="xdeepfm-for-recommender-systems">xDeepFM for Recommender Systems</h1>
<p>eXtreme Deep Factorization Machine (<a href="https://arxiv.org/abs/1803.05170">xDeepFM</a>)</p>
<p>This paper proposes a novel Compressed Interaction Network (CIN), which aims to generate feature interactions in an explicit fashion and at the vector-wise level.</p>
<h2 id="github-repository">Github Repository</h2>
<p><a href="https://github.com/pseudoyu/xDeepFM_for_Recommender_Systems">GitHub: xDeepFM_for_Recommender_Systems</a></p>
<h2 id="video-demo">Video Demo</h2>
<p><a href="https://www.youtube.com/watch?v=rFEGAtTZLyQ">YouTube</a> | <a href="https://drive.google.com/file/d/1qPx6H9R1b-EDP7HZpAg5bDjkzR8QEHnR/view?usp=sharing">Google Drive</a></p>
<h2 id="datasets">Datasets</h2>
<ol>
<li><strong><a href="http://labs.criteo.com/2014/02/kaggle-display-advertising-challenge-dataset/">Criteo Dataset</a>.</strong> It is a famous industry benchmarking dataset for developing models predicting ad click-through rate, and is publicly accessible. Given a user and the page he is visiting, the goal is to predict the probability that he will clik on a given ad</li>
</ol>
<h2 id="running-environment">Running Environment</h2>
<p>I strongly recommmend that you use <a href="https://www.anaconda.com">Anaconda</a> to implement this project. Here are some simple instructions:</p>
<ol>
<li>Download a suitable version (<a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Windows-x86_64.exe">Windows</a>/<a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-MacOSX-x86_64.pkg">MacOS</a>/<a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh">Linux</a>)  for your OS and install it (check for latest version from <a href="https://www.anaconda.com">Anaconda</a>)
<ol>
<li>On Windows or MacOS, you can just use the <em>.exe</em> or <em>.pkg</em> installer and follow the instructions</li>
<li>On Linux, you may need to run <code>bash ./.Anaconda3-2020.07-Linux-x86_64.sh</code> in the same directory of the downloaded <em>.sh</em> file to allow the installer to initialize Anaconda3 in your .bashrc</li>
</ol>
</li>
<li>Create a dedicated Conda environment for this project (strongly recommended)
<ol>
<li>Run <code>conda create -n xdeepfm python=3.6</code> and enter <code>y</code> to create the conda environment</li>
<li>Run <code>conda activate xdeepfm</code> to activate the project environment</li>
</ol>
</li>
<li>Run <code>pip install -r requirements.txt</code> to install the package dependencies</li>
<li>Now you can run the code simply through <code>python main.py</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> YouPath/xDeepFM_for_Recommender_Systems/exdeepfm
</span></span><span class="line"><span class="cl">bash ./.Anaconda3-2020.07-Linux-x86_64.sh
</span></span><span class="line"><span class="cl">conda create -n xdeepfm <span class="nv">python</span><span class="o">=</span>3.6
</span></span><span class="line"><span class="cl">conda activate xdeepfm
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python main.py
</span></span></code></pre></div><h3 id="dependencies">Dependencies</h3>
<ul>
<li>absl-py==0.8.1</li>
<li>astor==0.8.0</li>
<li>gast==0.3.2</li>
<li>google-pasta==0.1.7</li>
<li>grpcio==1.24.3</li>
<li>h5py==2.10.0</li>
<li>joblib==0.14.0</li>
<li>Keras-Applications==1.0.8</li>
<li>Keras-Preprocessing==1.1.0</li>
<li>Markdown==3.1.1</li>
<li>numpy==1.17.3</li>
<li>packaging==19.2</li>
<li>protobuf==3.10.0</li>
<li>pyparsing==2.4.2</li>
<li>PyYAML==5.1.2</li>
<li>scikit-learn==0.21.3</li>
<li>scipy==1.3.1</li>
<li>six==1.12.0</li>
<li>sklearn==0.0</li>
<li>tensorboard==1.14.0</li>
<li>tensorflow==1.14.0</li>
<li>tensorflow-estimator==1.14.0</li>
<li>termcolor==1.1.0</li>
<li>Werkzeug==0.16.0</li>
<li>wrapt==1.11.2</li>
</ul>
<h2 id="running-results">Running Results</h2>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/comp7404_screenshot1.png" alt="comp7404_screenshot1"></p>
<p><strong>&hellip;</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/comp7404_screenshot2.png" alt="comp7404_screenshot2"></p>
]]></content:encoded></item><item><title>ICOM6045 Topic 1 Cryptography</title><link>https://www.pseudoyu.com/en/2020/10/21/icom6045_topic1/</link><pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/21/icom6045_topic1/</guid><description>ICOM6045 Fundamentals of E-Commerce Security Topic 1 Cryptography Definition Process of transforming information to make it unreadable to anyone except those possessing the key Purpose Data confidentiality Transpositions/Permutations An encryption in which the letters of the message are rearranged Function Try to break established patterns Example Columnar transposition Rearrangement of the characters of the plaintext into columns Based on characteristic patterns of pairs of adjacent letters, called digrams Analysis Compute the letter frequencies Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.</description><content:encoded><![CDATA[<h1 id="icom6045-fundamentals-of-e-commerce-security">ICOM6045 Fundamentals of E-Commerce Security</h1>
<h2 id="topic-1-cryptography">Topic 1 Cryptography</h2>
<h2 id="definition">Definition</h2>
<ul>
<li>Process of transforming information to make it unreadable to anyone except those possessing the key</li>
</ul>
<h2 id="purpose">Purpose</h2>
<ul>
<li>Data confidentiality</li>
</ul>
<h2 id="transpositionspermutations">Transpositions/Permutations</h2>
<ul>
<li>An encryption in which the letters of the message are rearranged</li>
<li>Function
<ul>
<li>Try to break established patterns</li>
</ul>
</li>
<li>Example
<ul>
<li>Columnar transposition
<ul>
<li>Rearrangement of the characters of the plaintext into columns</li>
<li>Based on characteristic patterns of pairs of adjacent letters, called digrams</li>
<li>Analysis
<ul>
<li>Compute the letter frequencies
<ul>
<li>Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.</li>
<li>
<ol>
<li>Do common digrams appear.</li>
</ol>
</li>
<li>
<ol start="2">
<li>Do most of the digram look reasonable</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Complexity
<ul>
<li>No additional work</li>
<li>Require storage for all characters of the message</li>
<li>Not good for long message</li>
</ul>
</li>
<li>Alternative
<ul>
<li>Permute the characters of the plaintext with a fixed period d</li>
</ul>
</li>
</ul>
<h2 id="confusion">Confusion</h2>
<ul>
<li>Cipher that makes relationship between the plaintext/key pair and the ciphertext as complex as possible</li>
<li>Good confusion
<ul>
<li>poly-alphabetic substitution with a long key</li>
</ul>
</li>
<li>Bad confusion
<ul>
<li>Caesar cipher</li>
</ul>
</li>
</ul>
<h2 id="diffusion">Diffusion</h2>
<ul>
<li>Cipher that spreads the information from the plaintext over the entire ciphertext</li>
<li>Change in the plaintext should affect many parts of the ciphertext</li>
<li>Good diffusion
<ul>
<li>DES</li>
<li>Transposition cipher</li>
</ul>
</li>
<li>Bad diffusion
<ul>
<li>Substitutin cipher</li>
</ul>
</li>
</ul>
<h2 id="cryptanalysis">Cryptanalysis</h2>
<ul>
<li>Index of coincidence (A tool to rate how wella particular distribution
matches the distribution of letter in English)</li>
<li>Procedure
<ul>
<li>Measure of roughness(variance)</li>
<li>If the distribution is perfectly flat</li>
</ul>
</li>
<li>Examine
<ul>
<li>Is it encrypted</li>
<li>How is it encrypted</li>
<li>What is the key</li>
</ul>
</li>
</ul>
<h2 id="types">Types</h2>
<h3 id="symmetric-key-encryption">Symmetric Key Encryption</h3>
<ul>
<li>Procedure (Single key)
<ul>
<li>Original message</li>
<li>Key -&gt; Encryption algorithm</li>
<li>Encrypted message</li>
<li>Encrypted message sent over Internet</li>
<li>Encrypted message arrives destination</li>
<li>Key -&gt; Decryption algorithm</li>
<li>Original message</li>
</ul>
</li>
<li>Algorithms
<ul>
<li>DES(Data Encryption Standard)
<ul>
<li>Most commonly used block cipher</li>
<li>Purpose
<ul>
<li>Facilitate hardware implementation</li>
</ul>
</li>
<li>Form
<ul>
<li>A block cipher with 56-bit key (64-bit including parity bits)</li>
<li>&ldquo;Feistel&rdquo; network structure</li>
</ul>
</li>
</ul>
</li>
<li>AES(Advanced Encryption Standard)</li>
<li>RC4</li>
</ul>
</li>
<li>Stream cipher
<ul>
<li>Definition
<ul>
<li>Convert one symbol of plaintext immediately into a symbol of ciphertext</li>
</ul>
</li>
<li>Advantage
<ul>
<li>Speed of transformation</li>
<li>Low error propagation</li>
</ul>
</li>
<li>Disadvantage
<ul>
<li>Low diffusion</li>
<li>Possible for malicious insertions and modifications</li>
</ul>
</li>
</ul>
</li>
<li>Block cipher
<ul>
<li>Definition
<ul>
<li>Encrypt a group of plaintext symbol as one block</li>
</ul>
</li>
<li>Advantage
<ul>
<li>Diffusion</li>
<li>Immunity to insertion</li>
</ul>
</li>
<li>Disadvantage
<ul>
<li>Slowness of encryption</li>
<li>Error propagation</li>
</ul>
</li>
</ul>
</li>
<li>Kasiski method
<ul>
<li>Search for repeated sequence of characters</li>
<li>Example
<ul>
<li>3 occurrences of the 11-character sequence</li>
<li>Distance between first 2 sequence = 141- 90 = 51</li>
<li>Distance between second 2 sequences = 213 - 141 = 72</li>
<li>The common divisor between 51 and 72 is 3</li>
<li>Estimated key length is 3</li>
</ul>
</li>
</ul>
</li>
<li>&ldquo;Perfect&rdquo; substitution cipher
<ul>
<li>Definition
<ul>
<li>Many alphabets for an unrecognizable distribution</li>
<li>No apparent pattern for the choice of an alphabet at a particular point</li>
</ul>
</li>
<li>Function
<ul>
<li>Confuse the Kasiski method</li>
<li>Index of coincidence would be close to 0.038</li>
</ul>
</li>
</ul>
</li>
<li>Application
<ul>
<li>Caesar cipher
<ul>
<li>Definition
<ul>
<li>The message is enciphered with a 27-symbol alphabet (A-&gt;Z) and the blank, the blank is translated to itself</li>
</ul>
</li>
<li>Permutation
<ul>
<li>Each letter is translated to a fixed number of letters after it in the alphabet</li>
</ul>
</li>
<li>The &ldquo;real&rdquo; Caessar cipher by Julius Caesar used a shift of 3</li>
</ul>
</li>
<li>Mono-alphabetic substitutions
<ul>
<li>Definition
<ul>
<li>The alphabet is scrambled, and each plaintext letter maps to a unique ciphertext letter</li>
</ul>
</li>
<li>Permutation
<ul>
<li>A permutation is a recording of the elements of a series</li>
<li>A permutation can be a function</li>
<li>Some permutations can&rsquo;t be represented as simple equation</li>
</ul>
</li>
<li>Weakness
<ul>
<li>Frequency distribution</li>
</ul>
</li>
</ul>
</li>
<li>Polyalphabetic substitutions
<ul>
<li>Definition
<ul>
<li>Combine distributions that are high with ones that are low</li>
</ul>
</li>
<li>Analysis
<ul>
<li>Use Kasiski method to predict likely numbers of enciphering alphabets</li>
<li>If no numbers emerge fairly regularly, may not a poly-alphabetic substitution</li>
<li>Compute the index of coincidence to validate the predictions from step 1</li>
<li>When step 1 and 3 indicate a promising value, separate the ciphertext into appropriate subsets and independently compute index of coincidence of each subset</li>
</ul>
</li>
<li>Example
<ul>
<li>Rotor Machines</li>
</ul>
</li>
</ul>
</li>
<li>Vigenere cipher
<ul>
<li>Definition
<ul>
<li>Vigenere tableau
<ul>
<li>A collection of 26 permutations</li>
<li>Written in a 26*26 matrix</li>
</ul>
</li>
</ul>
</li>
<li>Permutation
<ul>
<li>Use a key (keyword) -&gt; select  particular permutaion</li>
</ul>
</li>
</ul>
</li>
<li>One-time pad
<ul>
<li>Definition
<ul>
<li>Based on a large nonrepeating set of keys (written on paper and glued together into a pad)</li>
</ul>
</li>
<li>Procedure
<ul>
<li>Sender writes key one time above the letters of the plaintext</li>
<li>Encipher the plaintext with a chart like Vigenere tableau</li>
<li>Sender destroys the key</li>
<li>Receiver takes the appropriate number of keys</li>
<li>Decipher the message</li>
</ul>
</li>
<li>Example
<ul>
<li>Vernam cipher
<ul>
<li>Involves an arbitrarily long nonrepeating sequence of numbers that are combined with the plaintext</li>
<li>Possible attack
<ul>
<li>Random number generator</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="public-key-encryption">Public Key Encryption</h3>
<ul>
<li>Procedure (Everyone has 2 keys)
<ul>
<li>Original message</li>
<li>Encryption key -&gt; Encryption algorithm
<ul>
<li>Plaintext &lt;- Encryption
<ul>
<li>The original form of a message</li>
</ul>
</li>
<li>Ciphertext &lt;- Decryption
<ul>
<li>The encrypted form a message</li>
</ul>
</li>
<li>Original plaintext</li>
</ul>
</li>
<li>Encrypted message</li>
<li>Encrypted message sent over Internet</li>
<li>Encrypted message arrives destination</li>
<li>Decryption key -&gt; Decryption algorithm</li>
<li>Original message</li>
</ul>
</li>
<li>Algorithms
<ul>
<li>RSA</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>ICOM6012 Topic 4 Transport Layer</title><link>https://www.pseudoyu.com/en/2020/10/20/icom6012_topic4/</link><pubDate>Tue, 20 Oct 2020 09:37:44 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/20/icom6012_topic4/</guid><description>ICOM6012 Internet Infrastructure Technologies Topic 4 Transport Layer Actions Sender Get application layer message Determine segment header fields values Create segment Pass segment to IP Receiver Receive segment from IP Check header values Extract application layer message Demultiplexes message up to application via socket Services Provide logical communication between processes Run in end system Send side Break app messages into segment Pass to network layer Receive side Reassembles segments into messages Pass to application layer Protocols TCP Features Point-to-point One sender, one receiver Reliable, in-order byte system No message boundaries Full duplex data Bi-directional data flow in same connection MSS: maximum segment size (excluding header) Cumulative ACKs Pipelining TCP congestion and flow control set window size Flow Control Sender will not overwhelm receiver Congestion control Concepts Segment structure Sequence numbers Byte stream &amp;ldquo;number&amp;rdquo; of first byte in segment&amp;rsquo;s data Acknowledgements (ACKs) Seq # of next byte expected from other side Cumulative ACKs Procedure Connection-oriented Handshaking initializes sender, receiver state before data exchange TCP socket identified by 4-tuple Source IP Source Port # Dest IP Dest Port # Server host may support many simultaneous TCP sockets Web servers have different sockets for each connecting client (Non-persistent HTTP will have different socket for each request) Demux Receiver uses all four values to direct segment to appropriate socket 3-way handshake Connection setup Connection management Handshake Agree to establish connection Agree on connection parameters Retransmission Closing a connection Events Data received from application Create segment with seq # (a byte-stream number of first data byte in segment) Start timer if not already running Think of timer as for oldest unACKed segment Expiration interval: TimeOutInterval Timeout Retransmit segment that caused timeout Restart timer ACK received Update what is known to ACKed Start timer if there are still unACKed segment Shortcomings SYN DoS Attack Half-open TCP connections consume all the TCP connection resources SYN packet with a spoofed source address UDP Features</description><content:encoded><![CDATA[<h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies</h1>
<h2 id="topic-4-transport-layer">Topic 4 Transport Layer</h2>
<h2 id="actions">Actions</h2>
<h3 id="sender">Sender</h3>
<ul>
<li>Get application layer message</li>
<li>Determine segment header fields values</li>
<li>Create segment</li>
<li>Pass segment to IP</li>
</ul>
<h3 id="receiver">Receiver</h3>
<ul>
<li>Receive segment from IP</li>
<li>Check header values</li>
<li>Extract application layer message</li>
<li>Demultiplexes message up to application via socket</li>
</ul>
<h2 id="services">Services</h2>
<h3 id="provide-logical-communication-between-processes">Provide logical communication between processes</h3>
<h3 id="run-in-end-system">Run in end system</h3>
<ul>
<li>Send side
<ul>
<li>Break app messages into segment</li>
<li>Pass to network layer</li>
</ul>
</li>
<li>Receive side
<ul>
<li>Reassembles segments into messages</li>
<li>Pass to application layer</li>
</ul>
</li>
</ul>
<h2 id="protocols">Protocols</h2>
<h3 id="tcp">TCP</h3>
<ul>
<li>Features
<ul>
<li>Point-to-point
<ul>
<li>One sender, one receiver</li>
</ul>
</li>
<li>Reliable, in-order byte system
<ul>
<li>No message boundaries</li>
</ul>
</li>
<li>Full duplex data
<ul>
<li>Bi-directional data flow in same connection</li>
<li>MSS: maximum segment size (excluding header)</li>
</ul>
</li>
<li>Cumulative ACKs</li>
<li>Pipelining
<ul>
<li>TCP congestion and flow control set window size</li>
</ul>
</li>
<li>Flow Control
<ul>
<li>Sender will not overwhelm receiver</li>
</ul>
</li>
<li>Congestion control</li>
</ul>
</li>
<li>Concepts
<ul>
<li>Segment structure</li>
<li>Sequence numbers
<ul>
<li>Byte stream &ldquo;number&rdquo; of first byte in segment&rsquo;s data</li>
</ul>
</li>
<li>Acknowledgements (ACKs)
<ul>
<li>Seq # of next byte expected from other side</li>
<li>Cumulative ACKs</li>
</ul>
</li>
</ul>
</li>
<li>Procedure
<ul>
<li>Connection-oriented
<ul>
<li>Handshaking initializes sender, receiver state before data exchange</li>
<li>TCP socket identified by 4-tuple
<ul>
<li>Source IP</li>
<li>Source Port #</li>
<li>Dest IP</li>
<li>Dest Port #</li>
</ul>
</li>
<li>Server host may support many simultaneous TCP sockets</li>
<li>Web servers have different sockets for each connecting client
(Non-persistent HTTP will have different socket for each request)</li>
<li>Demux
<ul>
<li>Receiver uses all four values to direct segment to appropriate socket</li>
</ul>
</li>
</ul>
</li>
<li>3-way handshake
<ul>
<li>Connection setup</li>
</ul>
</li>
<li>Connection management
<ul>
<li>Handshake
<ul>
<li>Agree to establish connection</li>
<li>Agree on connection parameters</li>
</ul>
</li>
</ul>
</li>
<li>Retransmission</li>
<li>Closing a connection</li>
</ul>
</li>
<li>Events
<ul>
<li>Data received from application
<ul>
<li>Create segment with seq # (a byte-stream number of first data byte in segment)</li>
<li>Start timer if not already running
<ul>
<li>Think of timer as for oldest unACKed segment</li>
<li>Expiration interval: TimeOutInterval</li>
</ul>
</li>
</ul>
</li>
<li>Timeout
<ul>
<li>Retransmit segment that caused timeout</li>
<li>Restart timer</li>
</ul>
</li>
<li>ACK received
<ul>
<li>Update what is known to ACKed</li>
<li>Start timer if there are still unACKed segment</li>
</ul>
</li>
</ul>
</li>
<li>Shortcomings
<ul>
<li>SYN DoS Attack
<ul>
<li>Half-open TCP connections consume all the TCP connection resources</li>
<li>SYN packet with a spoofed source address</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="udp">UDP</h3>
<ul>
<li>
<p>Features</p>
<ul>
<li>No frills</li>
<li>Bare bones</li>
<li>&ldquo;Best effort&rdquo;
<ul>
<li>Lost</li>
<li>Delivered out-of-order to app</li>
</ul>
</li>
<li>No handshaking</li>
<li>Handle independently</li>
<li>Services not available
<ul>
<li>Delay guarantee</li>
<li>Bandwidth guarantee</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Concepts</p>
<ul>
<li>Segment format
<ul>
<li>Source port #</li>
<li>Dest port #</li>
<li>Length</li>
<li>Checksum
<ul>
<li>Detect errors
<ul>
<li>Sender
<ul>
<li>Treat segement contents</li>
<li>Checksum: 1&rsquo;s complement sum</li>
<li>Put checksum into UDP field value</li>
</ul>
</li>
<li>Receiver
<ul>
<li>Compute checksum of received segment</li>
<li>Check equality
<ul>
<li>No: error detected</li>
<li>Yes: no error detected (not sure)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Checksum calculation may be disabled in order to speed up the processing</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Procedure</p>
<ul>
<li>Connectionless demux
<ul>
<li>Create socket with unique local port #</li>
<li>Sender side: create datagram to send into UDP socket
<ul>
<li>Dest IP</li>
<li>Dest port #</li>
</ul>
</li>
<li>Receive side: receive UDP segment
(IP datagrams with same dest port #, but different source will be directed to same socket)
<ul>
<li>Check dest port #</li>
<li>Direct UDP segment to socket with that port #</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Utilization</p>
<ul>
<li>Streaming multimedia apps
<ul>
<li>Loss tolerant</li>
<li>Rate sensitive</li>
</ul>
</li>
<li>DNS</li>
<li>SNMP</li>
<li>HTTP/3</li>
</ul>
</li>
<li>
<p>Shortcomings</p>
<ul>
<li>Need reliability at application layer</li>
<li>Congestion control</li>
</ul>
</li>
</ul>
<h3 id="sctp">SCTP</h3>
<h3 id="dccp">DCCP</h3>
<h2 id="multiplexing-and-demultiplexing">Multiplexing and Demultiplexing</h2>
<h3 id="multiplexing-at-sender">Multiplexing at sender</h3>
<ul>
<li>Handle data from multiple sockets, add transport header</li>
</ul>
<h3 id="demultiplexing-at-receiver">Demultiplexing at receiver</h3>
<ul>
<li>Handle data info to deliver received segments to correct socket</li>
</ul>
<h3 id="host-receivers-ip-datagram-host-uses-ip--port--to-redirect-segment">Host receivers IP datagram (Host uses IP &amp; port # to redirect segment)</h3>
<ul>
<li>Source IP</li>
<li>Dest IP</li>
<li>One transport layer segment
<ul>
<li>Source port #</li>
<li>Dest port #</li>
</ul>
</li>
</ul>
<h2 id="congestion-control">Congestion Control</h2>
<h3 id="cause">Cause</h3>
<ul>
<li>Too many sources sending too much data too fast for network to handle</li>
</ul>
<h3 id="manifestations">Manifestations</h3>
<ul>
<li>Long delay
<ul>
<li>Queueing in router buffers</li>
</ul>
</li>
<li>Packet loss
<ul>
<li>Buffer overflow at network</li>
</ul>
</li>
</ul>
<h3 id="approaches">Approaches</h3>
<ul>
<li>End-end congestion control
<ul>
<li>Features
<ul>
<li>No explicit feedback from network</li>
<li>Congestion inferred from observed loss, delay</li>
</ul>
</li>
</ul>
</li>
<li>Network-assisted congestion control
<ul>
<li>Features
<ul>
<li>Routers provide direct feedback to hosts with flow passing through congested router</li>
<li>May indicate congestion level or explicit set sending rate</li>
<li>TCP ECN ATM DECbit protocols</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="tcp-congestion-control">TCP Congestion Control</h3>
<ul>
<li>AIMD
<ul>
<li>Sender can increase sending rate until packet loss occurs, then decrease</li>
<li>Additive increase
<ul>
<li>1 MSS (maximum segment size) until loss detected</li>
</ul>
</li>
<li>Multiplicative decrease
<ul>
<li>Cut sending rate in half at each loss event</li>
</ul>
</li>
</ul>
</li>
<li>Detecting, reacting to loss
<ul>
<li>ACKs problem
<ul>
<li>cwnd is cut in half</li>
<li>Window grow linearly</li>
</ul>
</li>
<li>Timeout event
<ul>
<li>cwnd is set to 1 MSS</li>
<li>Window grow exponentially to threshold, then linearly</li>
</ul>
</li>
</ul>
</li>
<li>TCP slow start
<ul>
<li>Initially cwnd = 1 MSS</li>
<li>Double cwnd every RTT</li>
<li>Done by incrementing cwnd for every ACK received</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>ICOM6012 Topic 3 Application Layer</title><link>https://www.pseudoyu.com/en/2020/10/19/icom6012_topic3/</link><pubDate>Mon, 19 Oct 2020 17:50:44 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/19/icom6012_topic3/</guid><description>ICOM6012 Internet Infrastructure Technologies Topic 3 Application Layer Creating a Network App Run on different end systems Communication over network No need to write for network-core devices Client-Server Architecture (The Centralized Internet) Server Always-on host Permanent IP address Often in data centers (for scaling) Clients Contact, communicate with server May be intermittently connected May have dynamic IP addresses Don&amp;rsquo;t communicate directly with each other Peer-to-Peer (P2P) Architecture No always-on server</description><content:encoded><![CDATA[<h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies</h1>
<h2 id="topic-3-application-layer">Topic 3 Application Layer</h2>
<p><strong>Creating a Network App</strong></p>
<ul>
<li>Run on different end systems</li>
<li>Communication over network</li>
<li>No need to write for network-core devices</li>
</ul>
<p><strong>Client-Server Architecture (The Centralized Internet)</strong></p>
<ul>
<li>Server
<ul>
<li>Always-on host</li>
<li>Permanent IP address</li>
<li>Often in data centers (for scaling)</li>
</ul>
</li>
<li>Clients
<ul>
<li>Contact, communicate with server</li>
<li>May be intermittently connected</li>
<li>May have dynamic IP addresses</li>
<li>Don&rsquo;t communicate directly with each other</li>
</ul>
</li>
</ul>
<p><strong>Peer-to-Peer (P2P) Architecture</strong></p>
<ul>
<li>No always-on server</li>
<li>Arbitrary end systems directly communicate</li>
<li>Peers request service from other peers, providing service in return to other peers
<ul>
<li>Self scalability - new peers bring new service capacity, as well as new service demands</li>
</ul>
</li>
<li>Peers are intermittently connected with dynamic IP addresses
<ul>
<li>Complex management</li>
</ul>
</li>
</ul>
<p><strong>Processes Communicating</strong></p>
<ul>
<li>Process: program running within a host
<ul>
<li>Same host
<ul>
<li>Inter-process communication (defined by OS)</li>
</ul>
</li>
<li>Different hosts
<ul>
<li>Exchanging messages</li>
</ul>
</li>
<li>Client, servers
<ul>
<li>Client process: process that initiates communication</li>
<li>Server process: process that waits to be contacted</li>
<li>Applications with P2P architecture have both</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Sockets</strong></p>
<ul>
<li>Process sends/receives messages to/from its socket</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/sockets.png" alt="sockets"></p>
<p><strong>Addressing Processes</strong></p>
<ul>
<li>To receive messages, process must have identifier
<ul>
<li>IP address
<ul>
<li>Host has unique 32-bits IP address</li>
</ul>
</li>
<li>Port number
<ul>
<li>Port 0 - 1023: Well-known
<ul>
<li>HTTP server: 80</li>
<li>Mail server: 25</li>
</ul>
</li>
<li>Port 1024 - 49151: Registered ports</li>
<li>Port &gt; 49151: Dynamic/private ports</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>An Application-Layer Protocol Defines</strong></p>
<ul>
<li>Types of messages exchanged
<ul>
<li>Request</li>
<li>Response</li>
</ul>
</li>
<li>Message syntax
<ul>
<li>What field</li>
<li>How fields are delineated</li>
</ul>
</li>
<li>Message semantics
<ul>
<li>Meaning of information in fields</li>
</ul>
</li>
<li>Rules
<ul>
<li>When and how process send &amp; respond to messages</li>
</ul>
</li>
<li>Protocols
<ul>
<li>Open protocols
<ul>
<li>Defined in RFCs (by IETF)</li>
<li>Everyone has access to protocol definition</li>
<li>Allow for interoperability</li>
<li>Example
<ul>
<li>HTTP</li>
<li>SMTP</li>
</ul>
</li>
</ul>
</li>
<li>Proprietary protocols
<ul>
<li>Skype</li>
<li>Zoom</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Transport Service</strong></p>
<ul>
<li>Data integrity</li>
<li>Timing</li>
<li>Throughput</li>
<li>Security</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/transport_service.png" alt="transport_service"></p>
<p><strong>Internet Transport Protocols Services</strong></p>
<ul>
<li>TCP service
<ul>
<li>Connection-oriented</li>
<li>Reliable transport</li>
<li>Flow control</li>
<li>Congestion control</li>
<li>Doesn&rsquo;t provide
<ul>
<li>Timing</li>
<li>Minimum throughput guarantee</li>
<li>Security</li>
</ul>
</li>
</ul>
</li>
<li>UDP service
<ul>
<li>Unreliable data transfer</li>
<li>Doesn&rsquo;t provide
<ul>
<li>Reliability</li>
<li>Flow control</li>
<li>Congestion control</li>
<li>Timing</li>
<li>Throughput guarantee</li>
<li>Security</li>
<li>Connection setup</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/transport_protocols.png" alt="transport_protocols"></p>
<p><strong>Securing TCP</strong></p>
<ul>
<li>TCP &amp; UDP
<ul>
<li>No encryption</li>
<li>Cleartext passwords sent into socket traverse Internet in cleartext</li>
</ul>
</li>
<li>SSL (Secure Socket Layer) / TLS (Transport Layer Security)
<ul>
<li>Provides encrypted TCP connection</li>
<li>Data integrity</li>
<li>End-point authentication</li>
</ul>
</li>
<li>SSL/TLS is at Application Layer
<ul>
<li>Apps use SSL/TLS libraries, which &ldquo;talk&rdquo; to TCP</li>
<li>Cleartext passwords sent into socket traverse Internet encrypted</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ssl_tls.png" alt="ssl_tls"></p>
<p><strong>The IP Hourglass</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ip_hourglass.png" alt="ip_hourglass"></p>
<p><strong>HTTP Overview</strong></p>
<ul>
<li>HTTP: Hypertext Transfer Protocol</li>
<li>Web&rsquo;s application-layer protocol</li>
<li>Client/Server model
<ul>
<li>Client - browser that requests, receives and &ldquo;display&rdquo; web objects</li>
<li>Server - Web server sends objects in response to requests</li>
</ul>
</li>
<li>Development
<ul>
<li>HTTP/1.0: RFC 1945 (1996)</li>
<li>HTTP/1.1: RFC 2616 (1997)</li>
<li>HTTP/2: RFC 7540 (2015)</li>
<li>HTTP/3: Internet-Draft (2020)</li>
</ul>
</li>
<li>Uses TCP
<ul>
<li>Client initiates TCP connection (create sockets) to server, port 80</li>
<li>Server accepts TCP connection from client</li>
<li>HTTP messages exchanged between browser and web server</li>
<li>TCP connection closed</li>
</ul>
</li>
<li>HTTP is stateless
<ul>
<li>Server maintains no information about past client requests</li>
</ul>
</li>
</ul>
<p><strong>HTTP Connections</strong></p>
<ul>
<li>Non-persistent HTTP
<ul>
<li>Downloading multiple objects required multiple connections
<ul>
<li>Sequential</li>
<li>Parallel</li>
</ul>
</li>
<li>Procedures
<ul>
<li>TCP connection opened</li>
<li>At most one object sent over TCP connection</li>
<li>TCP connection closed</li>
</ul>
</li>
<li>OS must work and allocate host resources for each TCP connection</li>
<li>Browser often open parallel TCP connections to fetch referenced objects</li>
<li>HTTP response time (2RTT+)
<ul>
<li>RTT: Time for a small packet to travel from client to server and back</li>
<li>1RTT to initiate TCP connection</li>
<li>1RTT for HTTP request and first few bytes of HTTP response to return</li>
<li>File transmission time</li>
</ul>
</li>
</ul>
</li>
<li>Persistent HTTP
<ul>
<li>Procedures
<ul>
<li>TCP connection opened to a server</li>
<li>Multiple objects can be sent over single TCP connection between clients and that server</li>
<li>TCP connection closed</li>
</ul>
</li>
<li>Server leaves connection open after sending response</li>
<li>Subsequent HTTP messages between same client/server are sent over connection</li>
</ul>
</li>
<li>Persistent HTTP without pipelining
<ul>
<li>Client issues new request only when previous response has been received</li>
<li>1RTT for each referenced object</li>
<li>Head-of-line (HoL) blocking</li>
</ul>
</li>
<li>Persistent HTTP with pipelining
<ul>
<li>Client sends requests as soon as it encounters a referenced object</li>
<li>As little as 1RTT for all the referenced objects</li>
<li><em>Not activated in practice</em></li>
</ul>
</li>
</ul>
<p><strong>HTTP Message</strong></p>
<ul>
<li>Request
<ul>
<li>In ASCII (human readable format)</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/http_request.png" alt="http_request"></li>
<li>Methods
<ul>
<li>POST</li>
<li>GET</li>
<li>HEAD</li>
<li>PUT</li>
</ul>
</li>
</ul>
</li>
<li>Response
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/http_response.png" alt="http_response"></li>
<li>Statu Code
<ul>
<li>Informational, 1XX</li>
<li>Successful, 2XX, (200 OK)</li>
<li>Redirection, 3XX, (301 Moved Permanently)</li>
<li>Client Error, 4XX, (400 Bad Request, 404 Not Found)</li>
<li>Server Error, 5XX, (505 HTTP Version Not Support)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Cookies</strong></p>
<ul>
<li>Components
<ul>
<li>Cookie header line of HTTP response message</li>
<li>Cookie header line in next HTTP request message</li>
<li>Cookie file kept on user&rsquo;s host, managed by user&rsquo;s browser</li>
<li>Back-end database at website</li>
</ul>
</li>
<li>Example
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cookie_example.png" alt="cookie_example"></li>
</ul>
</li>
<li>3rd-party cookies
<ul>
<li>Many sites use third party advertisements</li>
<li>The third party can set a cookie that identifies the user</li>
<li>This cookie is sent to the third party each time an ad is downloaded by the user’s browser along with the address of the page that contains the link to the ad</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/3_party_cookies.png" alt="3_party_cookies"></li>
</ul>
</li>
</ul>
<p><strong>Web Caches (Proxy Servers)</strong></p>
<ul>
<li>Goal
<ul>
<li>Satisfy client request without involving origin server</li>
</ul>
</li>
<li>User configures browser to point to a web cache</li>
<li>Browser sends all HTTP requsets to cache
<ul>
<li>If object in cache: cache returns object</li>
<li>Else: cache requests object from origin server, then returns object to client</li>
</ul>
</li>
</ul>
<p><strong>Conditional GET</strong></p>
<ul>
<li>Goal
<ul>
<li>Don&rsquo;t send object if cache has up-to-date cached version
<ul>
<li>No object transmission delay</li>
<li>Lower link utilization</li>
</ul>
</li>
</ul>
</li>
<li>Cache: specify date of cached copy in HTTP request</li>
<li>Server: response contains no object if cached copy is up-to-date</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/conditional_get.png" alt="conditional_get"></p>
<p><strong>HTTP/2</strong></p>
<ul>
<li>Goals
<ul>
<li>Backward compatible with HTTP 1.1</li>
<li>Improve page load speed
<ul>
<li>Data compression of HTTP headers</li>
<li>HTTP/2 Server Push</li>
<li>Pipelining of requests</li>
<li>Fixing the head-of-line blocking problem in HTTP 1.1</li>
<li>Multiplexing multiple requests over a single TCP connection</li>
</ul>
</li>
<li>Mitigating HOL blocking
<ul>
<li>Objects divided into frames, frame transmission interleaved</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>HTTP/2 to HTTP/3</strong></p>
<ul>
<li>Goal
<ul>
<li>To further decrease delay in multi-object HTTP requests</li>
</ul>
</li>
<li>HTTP/2 over single TCP connection means
<ul>
<li>Recovery from packet loss still stalls all object transmissions =&gt; Head-of-line blocking!</li>
</ul>
</li>
<li>HTTP/3 over UDP (to address the HoL blocking)
<ul>
<li>Adds security, per object error and congestion-control</li>
</ul>
</li>
</ul>
<p><strong>Email</strong></p>
<ul>
<li>Components
<ul>
<li>User agents
<ul>
<li>Composing, editing, reading mail messages</li>
<li>Outgoing, incoming messages stored on server</li>
</ul>
</li>
<li>Mail server
<ul>
<li>Mailbox</li>
<li>Message queue</li>
</ul>
</li>
<li>SMTP (Simple Mail Transfer Protocol)
<ul>
<li>Client: Sending mail server</li>
<li>Server: Receiving mail server</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>SMTP [RFC 5321]</strong></p>
<ul>
<li>Uses TCP to reliably transfer email message from client to server, port 25 (or 587)</li>
<li>Direct transfer: sending server to receiving server</li>
<li>Three phases of transfer
<ul>
<li>Handshaking (greeting)</li>
<li>Transfer of messages</li>
<li>Closure</li>
</ul>
</li>
<li>Command/response interaction (like HTTP, FTP)
<ul>
<li>Commands: ASCII text</li>
<li>Response: status code and phrase</li>
</ul>
</li>
<li>Messages must be in 7-bit ASCII</li>
<li>Uses persistent connections</li>
<li>use <em>CRLF.CRLF</em> to determine end of message</li>
<li>Example
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/smtp_example.png" alt="smtp_example"></li>
</ul>
</li>
</ul>
<p><strong>Mail Message Format</strong></p>
<ul>
<li>RFC 822: standard for text message format
<ul>
<li>Header lines (different from SMTP MAIL FROM, RCPT TO commands)
<ul>
<li>To</li>
<li>From</li>
<li>Subject</li>
</ul>
</li>
<li>Body (the message)
<ul>
<li>ASCII characters only</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Message Format: multimedia extensions</strong></p>
<ul>
<li>MIME (multipurpose internet mail extension): multimedia mail extension (to RFC 822), RFC 2045, 2056</li>
<li>Additional lines in msg header declare MIME content type</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mail_mime.png" alt="mail_mime"></li>
</ul>
<p><strong>Mail Access Protocols</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/mail_access_protocols.png" alt="mail_access_protocols"></p>
<ul>
<li>SMTP
<ul>
<li>Delivery/storage to receiver&rsquo;s server</li>
</ul>
</li>
<li>Mail access protocol: retrieval from server
<ul>
<li>POP
<ul>
<li>Post Office Protocol [RFC 1939]: authorization, download</li>
</ul>
</li>
<li>IMAP
<ul>
<li>Internet Mail Access Protocol [RFC 1730]: more features, including manipulation of stored msgs on server</li>
</ul>
</li>
</ul>
</li>
<li>HTTP
<ul>
<li>Provides web-based interface on top of STMP (to send), IMAP (or POP) to retrieve e-mail messages</li>
<li>Gmail, Hotmail, etc.</li>
</ul>
</li>
</ul>
<p><strong>DNS (Domain Name System)</strong></p>
<ul>
<li>Why not a single centralized DNS server
<ul>
<li>Single point of failure</li>
<li>Traffic jam due to huge number of requests/queries</li>
<li>Long distance =&gt; slow response</li>
<li>Maintenance issue</li>
</ul>
</li>
<li>DNS services
<ul>
<li>Hostname to IP address translation</li>
<li>Host aliasing</li>
<li>Mail server aliasing</li>
<li>Load distribution</li>
</ul>
</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dns_services.png" alt="dns_services"></li>
<li>Root Name Servers
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/root_name_servers.png" alt="root_name_servers"></li>
<li>13 LOGICAL root name servers, but 1086(or more) PHYICAL servers</li>
<li>Reply with a referral to the DNS servers for a TLD, or indicating no such TLD exists.</li>
</ul>
</li>
<li>TLD &amp; authoritative servers
<ul>
<li>Top-level domain (TLD) servers
<ul>
<li>gTLD (originally 7): com, net, biz, edu, org, int, mil, &hellip;</li>
<li>ccTLD (249): uk, cn, hk, &hellip;</li>
<li>IDN (internationalized top-level domains): .中国, .香港 and .台灣</li>
</ul>
</li>
<li>Authoritative DNS servers
<ul>
<li>Organization&rsquo;s own DNS server(s), providing authoritative hostname to IP mappings for organization’s named hosts</li>
<li>Can be maintained by organization or service provider</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Local/Default DNS Server</strong></p>
<ul>
<li>Does not strictly belong to hierarchy</li>
<li>When host makes DNS query, query is sent to its local DNS server
<ul>
<li>Has local cache of recent name-to-address translation</li>
<li>Acts as proxy, forwards query into hierarchy</li>
</ul>
</li>
<li>Each ISP (residential ISP, company, university) has one</li>
<li>Public DNS server
<ul>
<li>Google public DNS (with IP address 8.8.8.8)</li>
</ul>
</li>
<li>Your home WiFi router may act as your local DNS server</li>
</ul>
<p><strong>DNS: Caching, Updating Records</strong></p>
<ul>
<li>Once (any) name server learns mapping, it caches mapping
<ul>
<li>Cache entries timeout (disappear) after some time (TTL)</li>
<li>TLD servers typically cached in local name servers
<ul>
<li>Root name servers not often visited</li>
</ul>
</li>
</ul>
</li>
<li>Cached entries may be out-of-date
<ul>
<li>If name host changes IP address, may not be known Internet-wide until all TTLs expire</li>
</ul>
</li>
<li>Update/notify mechanisms proposed IETF standard
<ul>
<li>RFC 2136</li>
</ul>
</li>
</ul>
<p><strong>DNS Records</strong></p>
<ul>
<li>DNS: distributed db storing resource records (RR)
<ul>
<li>RR format
<ul>
<li>(name, value, type, ttl)</li>
</ul>
</li>
</ul>
</li>
<li>type = A</li>
<li>type = CNAME</li>
<li>type = NS</li>
<li>type = MX</li>
</ul>
<p><strong>DNS Protocol, Messages</strong></p>
<ul>
<li>DNS query and reply messages, both with same message format
<ul>
<li>Message header
<ul>
<li>Identification
<ul>
<li>16 bit</li>
<li>For query, reply to query uses same</li>
</ul>
</li>
<li>Flags
<ul>
<li>Query or reply</li>
<li>Recursion desired</li>
<li>Recursion available</li>
<li>Reply is authoritative</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/dns_message.png" alt="dns_message"></li>
</ul>
</li>
</ul>
<p><strong>Attacking DNS</strong></p>
<ul>
<li>DDoS attacks
<ul>
<li>Bombard root servers with traffic
<ul>
<li>Not successful to date</li>
<li>Traffic Filtering</li>
<li>Local DNS servers cache IPs of TLD servers, allowing root server bypass</li>
</ul>
</li>
<li>Bombard TLD servers
<ul>
<li>Potentially more dangerous</li>
</ul>
</li>
</ul>
</li>
<li>Redirect attacks
<ul>
<li>Man-in-middle
<ul>
<li>Intercept queries</li>
</ul>
</li>
<li>DNS poisoning
<ul>
<li>Send bogus replies to DNS server, which caches</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Peer-to-peer File Distribution</strong></p>
<ul>
<li>P2P architecture
<ul>
<li>No always-on server</li>
<li>Arbitrary end systems directly communicate</li>
<li>Self scalibility</li>
<li>Peers are intermittently connected and change IP address</li>
<li>Example
<ul>
<li>File distribution - BitTorrent</li>
<li>Streaming - KanKan</li>
<li>Volp - Skype</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>File Distribution (Client-Server)</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/client_server_file.png" alt="client_server_file"></p>
<ul>
<li>Server transmission
<ul>
<li>Must send/upload N file copies</li>
<li>Time: NF/U(s)</li>
</ul>
</li>
<li>Client
<ul>
<li>Each client must download one file copy</li>
<li>Slowest time: F/d(min)</li>
</ul>
</li>
<li>Time to distribute F to N
<ul>
<li>D(c-s) &gt;= max {NF/U(s), F/d(min)}</li>
</ul>
</li>
</ul>
<p><strong>File Distribution (P2P)</strong></p>
<ul>
<li>Server transmission
<ul>
<li>Must upload at least one copy</li>
<li>Time: F/U(s)</li>
</ul>
</li>
<li>Client
<ul>
<li>Each client must download one file copy</li>
<li>Slowest time: F/d(min)</li>
</ul>
</li>
<li>All clients
<ul>
<li>As aggregate must download NF bits</li>
<li>Max upload rate: U(s)+NU(i)</li>
</ul>
</li>
<li>Time to distribute F to N
<ul>
<li>D(P2P) &gt;= max {F/U(s), F/d(min), NF/(U(s)+Sum(U(i)))}</li>
</ul>
</li>
</ul>
<p><strong>Client-Server vs. P2P</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/p2p_cs.png" alt="p2p_cs"></p>
<p><strong>P2P File Distribution: BitTorrent</strong></p>
<ul>
<li>Procedure
<ul>
<li>File divided into 256KB chunks</li>
<li>Peers in torrent send/receive file chucks</li>
</ul>
</li>
<li>Roles
<ul>
<li>Tracker
<ul>
<li>Track peers participating in torrent</li>
</ul>
</li>
<li>Torrent
<ul>
<li>Group of peers exchanging chucks of a file</li>
</ul>
</li>
</ul>
</li>
<li>Actions
<ul>
<li>Requesting chunks
<ul>
<li>Ask each peer for chunks they have</li>
<li>Request missing chunks (rarest piece first)</li>
</ul>
</li>
<li>Sending chunks (tit-for-tat)
<ul>
<li>Send chunks to peers who currently sending her chunks at highest rate</li>
<li>Randomly select another peers and send chunks (for new peers)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>A Look at Tik-Tok</title><link>https://www.pseudoyu.com/en/2020/10/16/ecom6013_discussion_topic4/</link><pubDate>Fri, 16 Oct 2020 09:19:19 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/16/ecom6013_discussion_topic4/</guid><description>A Look at Tik-Tok Given there are many social media platforms already existing in US, what makes Tik-Tok so successful that it becomes a big enough threat to cause the US Government to act the way it did towards a commercial company (ignore political factors) Economically, at about 2016, US tech giants such as Facebook or Google mainly focused on long video platform instead of the short video platform. A company called Musical.</description><content:encoded><![CDATA[<h1 id="a-look-at-tik-tok">A Look at Tik-Tok</h1>
<h2 id="given-there-are-many-social-media-platforms-already-existing-in-us-what-makes-tik-tok-so-successful-that-it-becomes-a-big-enough-threat-to-cause-the-us-government-to-act-the-way-it-did-towards-a-commercial-company-ignore-political-factors">Given there are many social media platforms already existing in US, what makes Tik-Tok so successful that it becomes a big enough threat to cause the US Government to act the way it did towards a commercial company (ignore political factors)</h2>
<p>Economically, at about 2016, US tech giants such as Facebook or Google mainly focused on long video platform instead of the short video platform. A company called Musical.ly (later acquired by ByteDance and became a part of Tik-Tok) grasped this opportunity to extend the US market and gained a massive amount of market share. Generally, the US market is relatively a free market that encourages new products (startups) to participate in the competition. In addition to acquiring Musical.ly, which already played an essential role in the short video market, Tik-Tok also utilized targeted strategies to fulfil the US market&rsquo;s needs and fashion to gain and retain more users.</p>
<p>Socially, the majority of users of short video platform are young people, and they tend to follow fashions and do more social interactions. Tik-Tok carries out new creative forms of videos for users to easily create, share and connect interesting videos in their social circle, which brings the long tail influence on the spread of Tik-Tok videos. Besides, some organizations or even official medias also joined the Tik-Tok platform to please their audience or get more subscribers, which further increase the social influence of Tik-Tok.</p>
<p>Technically, as the rapid development of Internet and smartphone industry, short video has gradually become a mainstream form of creation and entertainment. US people especially young people get more accustomed to using their smartphones to entertain or do social interactions, like watching or shooting videos in their leisure time. What&rsquo;s more, the recommendation system and mechanism applying artificial intelligence and machine learning algorithms become more powerful and smart, keeping attracting their users&rsquo; attention.</p>
<p>To sum up, Tik-Tok chose the right market expanding strategy, successfully meets the market demand and captures their users&rsquo; needs to get its market share. And it makes fair use of their technical benefits and most advanced innovation like machine learning algorithms to continually improve their product, making them become a very influential platform.</p>
]]></content:encoded></item><item><title>ECOM6013 Topic 8 Blockchain and Cybercurrency</title><link>https://www.pseudoyu.com/en/2020/10/09/ecom6013_topic8/</link><pubDate>Fri, 09 Oct 2020 11:01:28 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/09/ecom6013_topic8/</guid><description>ECOM6013 E-Commerce Technologies Topic 8 Blockchain and Cybercurrency Form of Money
Token money Physical token Value is lost without the token No intermediary is required for spending Requires faith in the issuer (a government or a bank) Notationary money Notation/entry in a ledger, passbook, or database Can&amp;rsquo;t be lost Requires an intermediary Requires faith in the maintainer of the ledger Hybrid money Requires both a token and a ledger account Can be lost Requires an intermediary Requires faith in the issuer Virtual money No token/ledger Can be lost No intermediary required No issuer, no government backing Digital money String of bytes (data) stored on a device Value is lost/stolen when devices fail/invaded Cybercurrency Bitcoin is the most influential one Based on blockchain Bitcoin</description><content:encoded><![CDATA[<h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies</h1>
<h2 id="topic-8-blockchain-and-cybercurrency">Topic 8 Blockchain and Cybercurrency</h2>
<p><strong>Form of Money</strong></p>
<ul>
<li>Token money
<ul>
<li>Physical token</li>
<li>Value is lost without the token</li>
<li>No intermediary is required for spending</li>
<li>Requires faith in the issuer (a government or a bank)</li>
</ul>
</li>
<li>Notationary money
<ul>
<li>Notation/entry in a ledger, passbook, or database</li>
<li>Can&rsquo;t be lost</li>
<li>Requires an intermediary</li>
<li>Requires faith in the maintainer of the ledger</li>
</ul>
</li>
<li>Hybrid money
<ul>
<li>Requires both a token and a ledger account</li>
<li>Can be lost</li>
<li>Requires an intermediary</li>
<li>Requires faith in the issuer</li>
</ul>
</li>
<li>Virtual money
<ul>
<li>No token/ledger</li>
<li>Can be lost</li>
<li>No intermediary required</li>
<li>No issuer, no government backing</li>
</ul>
</li>
<li>Digital money
<ul>
<li>String of bytes (data) stored on a device</li>
<li>Value is lost/stolen when devices fail/invaded</li>
</ul>
</li>
<li>Cybercurrency
<ul>
<li>Bitcoin is the most influential one</li>
<li>Based on blockchain</li>
</ul>
</li>
</ul>
<p><strong>Bitcoin</strong></p>
<ul>
<li>Designed for the &ldquo;online society&rdquo;</li>
<li>An important example application of Blockchain</li>
<li>Relationship with national currencies
<ul>
<li>Decentralized and independent of national currencies</li>
<li>Easily convertible to national currencies</li>
</ul>
</li>
<li>Excellent application Scenarios
<ul>
<li>Anonymous transactions</li>
<li>E-Commerce</li>
</ul>
</li>
</ul>
<p><strong>Land Deeds - A Blockchain Analogy</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/land_deeds.png" alt="land_deeds"></p>
<ul>
<li>A &ldquo;chain of title&rdquo; (a sequence of deeds leading from the original owner to the present owner)</li>
<li>Deeds are recorded in the Land Registry</li>
<li>Ownership is established by searching the Registry</li>
<li>The Land Registry is ledger holder</li>
<li>Double-selling is prevented by timestamps</li>
<li>If the Registry is altered, ownership can be lost</li>
</ul>
<p><strong>5 elements of Bitcoin</strong></p>
<ul>
<li>Currency
<ul>
<li>Send units of value</li>
<li>Convertible</li>
<li>Divisible</li>
</ul>
</li>
<li>Commodity
<ul>
<li>Scarcity stores wealth</li>
<li>Market fluctuates with speculation</li>
</ul>
</li>
<li>Brand
<ul>
<li>Marketing message</li>
<li>Commodity and sharing knowledge</li>
</ul>
</li>
<li>Protocol
<ul>
<li>Decentralized trust</li>
<li>Distributed ledger</li>
</ul>
</li>
<li>Technology
<ul>
<li>Blockchain</li>
</ul>
</li>
</ul>
<p><strong>How to Get Bitcoin</strong></p>
<ul>
<li>Sell something</li>
<li>Salary (some companies)</li>
<li>Bitcoin exchange</li>
<li>Mining
<ul>
<li>No more than 21 million BTCs</li>
<li>Divisible into units as small as 1/100 millionth of a BTC</li>
</ul>
</li>
</ul>
<p><strong>Bitcoin and Encryption Technologies</strong></p>
<ul>
<li>Hash functions</li>
<li>Public-private key (asymmetric) encryption</li>
<li>Digital signatures</li>
<li>All of these technologies are mature and trusted</li>
</ul>
<p><strong>Bitcoin Characteristics</strong></p>
<ul>
<li>No physical object (not a character string)
<ul>
<li>&ldquo;Bitcoin&rdquo; - protocol</li>
<li>&ldquo;bitcoin&rdquo; - value</li>
</ul>
</li>
<li>A chain of digitally signed transaction records leading from the original owner to the current owner</li>
<li>Transaction records
<ul>
<li>Hashes</li>
<li>Addresses</li>
</ul>
</li>
<li>No Bitcoin registry</li>
<li>No central authority</li>
<li>Broadcast to everyone
<ul>
<li>Everyone can verify the Bitcoin blockchain</li>
</ul>
</li>
</ul>
<p><strong>Bitcoin Protocol</strong></p>
<ul>
<li>Invented in 2008 by Satoshi Nakamoto, <a href="https://bitcoin.org/bitcoin.pdf"><em>Bitcoin: A Peer-to-Peer Electronic Cash System</em></a></li>
<li>Publicly available, Open source software</li>
<li>Everyone can obtain and run a Bitcoin client</li>
</ul>
<p><strong>Bitcoin addresses</strong></p>
<ul>
<li>An elliptic curve public key
<ul>
<li>25-44 characters for users</li>
</ul>
</li>
<li>Send Bitcoins
<ul>
<li>Receiving address (public)</li>
<li>Amount</li>
</ul>
</li>
<li>Receive Bitcoins
<ul>
<li>Receiving address (public)</li>
</ul>
</li>
<li>Addresses are not directly registered to users</li>
</ul>
<p><strong>Possible Vulnerabilities</strong></p>
<ul>
<li>No way to reverse a transaction without the payee’s cooperation</li>
<li>Software bugs</li>
<li>Bank robbery by hackers</li>
<li>Malware attacks against wallets</li>
<li>Government attempts to control</li>
<li>Competing digital currencies easy to make (fork)
<ul>
<li>Auroracoin</li>
<li>Dogecoin</li>
<li>Namecoin</li>
<li>Primecoin</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p><strong>Challenges for Bitcoin</strong></p>
<ul>
<li>Scalability</li>
<li>Time to solve a block (security concerns in algorithms)</li>
<li>Energy consumption</li>
<li>Meaningless and highly inefficient</li>
</ul>
<p><strong>Possible Future of Bitcoin/Virtual Currencies (Social)</strong></p>
<ul>
<li>For the world’s unbanked</li>
<li>For small businesses, freelancers and startups</li>
<li>Inevitable development of &ldquo;money&rdquo;</li>
<li>Distributed trust</li>
</ul>
<p><strong>Possible Future of Bitcoin/Virtual Currencies (Economic/Political)</strong></p>
<ul>
<li>A future with digital currencies and decentralized stores</li>
<li>National adoption of decentralized currencies may bring political transparency and economic neutrality</li>
<li>Developing nations seeking to curb corruption and break free of economic dependence on other countries could see potential in these technologies</li>
<li>Central Bank Digital Currency (CBDC)</li>
</ul>
<p><strong>Retail Money Key Attributes</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/retail_money.png" alt="retail_money"></p>
<p><strong>Different Degrees of Responsibilities for the Central Bank</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/central_bank.png" alt="central_bank"></p>
]]></content:encoded></item><item><title>ICOM6012 Topic 2 The Big Picture</title><link>https://www.pseudoyu.com/en/2020/10/05/icom6012_topic2/</link><pubDate>Mon, 05 Oct 2020 09:06:09 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/05/icom6012_topic2/</guid><description>ICOM6012 Internet Infrastructure Technologies Topic 2 The Big Picture The Internet: &amp;ldquo;nuts and bolts&amp;rdquo; view
Billions of connected computing devices Host = end system Running network apps Internet of things (IoT) Packet switches routers switchers Communication links Fiber, copper, radio, satellite Transmission rate: bandwidth Networks Collection of devices, routers, switches, links Managed by an organization Internet: &amp;ldquo;network of networks&amp;rdquo; Interconnected ISPs Protocols Control sending, receiving of messages Internet standards RFC: Requests for Comments IETF: Internet Engineering Task Force IEEE: Institute of Electronical &amp;amp; Electronic Engineering The Internet: a &amp;ldquo;service&amp;rdquo; view</description><content:encoded><![CDATA[<h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies</h1>
<h2 id="topic-2-the-big-picture">Topic 2 The Big Picture</h2>
<p><strong>The Internet: &ldquo;nuts and bolts&rdquo; view</strong></p>
<ul>
<li>Billions of connected computing devices
<ul>
<li>Host = end system</li>
<li>Running network apps</li>
<li>Internet of things (IoT)</li>
</ul>
</li>
<li>Packet switches
<ul>
<li>routers</li>
<li>switchers</li>
</ul>
</li>
<li>Communication links
<ul>
<li>Fiber, copper, radio, satellite</li>
<li>Transmission rate: bandwidth</li>
</ul>
</li>
<li>Networks
<ul>
<li>Collection of devices, routers, switches, links</li>
<li>Managed by an organization</li>
</ul>
</li>
<li>Internet: &ldquo;network of networks&rdquo;
<ul>
<li>Interconnected ISPs</li>
</ul>
</li>
<li>Protocols
<ul>
<li>Control sending, receiving of messages</li>
</ul>
</li>
<li>Internet standards
<ul>
<li>RFC: Requests for Comments</li>
<li>IETF: Internet Engineering Task Force</li>
<li>IEEE: Institute of Electronical &amp; Electronic Engineering</li>
</ul>
</li>
</ul>
<p><strong>The Internet: a &ldquo;service&rdquo; view</strong></p>
<ul>
<li>Infrastructure
<ul>
<li>Web</li>
<li>Streaming video</li>
<li>Multimedia teleconferencing</li>
<li>Email</li>
<li>Games</li>
<li>E‐Commerce</li>
<li>Social media</li>
<li>Inter‐connected appliances</li>
<li>&hellip;</li>
</ul>
</li>
<li>Programming interface
<ul>
<li>Sending/receiving apps</li>
<li>Service options</li>
</ul>
</li>
</ul>
<p><strong>Protocol</strong></p>
<ul>
<li>Activities in the Internet involving two or more remote entities are governed by a protocol</li>
<li>Protocols are running everywhere in the Internet</li>
</ul>
<p><em><strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event.</strong></em></p>
<p><strong>Network Standards</strong></p>
<ul>
<li><a href="https://ietf.org/standards/">IETF</a>
<ul>
<li>Application</li>
<li>Transport</li>
<li>Network</li>
</ul>
</li>
<li><a href="https://ieeexplore.ieee.org/browse/standards/collection/ieee">IEEE</a>
<ul>
<li>Data link</li>
<li>Physical</li>
</ul>
</li>
</ul>
<p><strong>Network Edge</strong></p>
<ul>
<li>Hosts
<ul>
<li>Clients</li>
<li>Servers (always in data centers)</li>
</ul>
</li>
</ul>
<p><strong>Access Networks, Physical Media</strong></p>
<ul>
<li>Residential access networks (cable-based)
<ul>
<li>Frequency Division Multiplexing (FDM)
<ul>
<li>Different channels transmitted in different frequency bands</li>
<li>Modem = Modulator + Demodulator
<ul>
<li>A device that converts data from digital format into one suitable for a transmission medium</li>
</ul>
</li>
</ul>
</li>
<li>HFC: hybrid fiber coax
<ul>
<li>Asymmetric: up to 40 Mbps – 1.2 Gbs downstream transmission rate, 30‐100 Mbps upstream transmission rate</li>
</ul>
</li>
<li>Network of cable, fiber attaches homes to ISP router
<ul>
<li>Homes share access network to cable headend</li>
</ul>
</li>
</ul>
</li>
<li>Residential access networks: digital subscriber line (DSL)
<ul>
<li>Use existing telephone line to central office DSLAM
<ul>
<li>Data over DSL phone line goes to Internet</li>
<li>Voice over DSL phone line goes to telephone network</li>
</ul>
</li>
</ul>
</li>
<li>Wireless access networks
<ul>
<li>Wireless local area networks (WLANs)
<ul>
<li>Within or around building (~100ft)</li>
<li>802.11b/g/n (WiFi) - 11,54,450 Mbps</li>
</ul>
</li>
<li>Wide-area cellular access networks
<ul>
<li>Mobile (10km)</li>
<li>4G/5G cellular networks - 10 Mbps</li>
</ul>
</li>
<li>IoT
<ul>
<li>BLE</li>
<li>ZigBee</li>
<li>LoRa</li>
</ul>
</li>
<li>Remote areas
<ul>
<li>Satellite network: Geosynchronous Equatorial Orbit (GEO)
<ul>
<li>35,786 km above equator</li>
<li>Large RTT (Round trip time): 0.5s</li>
<li>Expensive</li>
<li>Slow</li>
<li>Examples
<ul>
<li><a href="https://www.youtube.com/watch?v=OFGW2sZsUiQ">&ldquo;Project Loon&rdquo; &ndash; Google</a></li>
<li><a href="https://www.youtube.com/watch?v=giQ8xEWjnBs&amp;t=13s">Starlink ‐‐ SpaceX</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Enterprise access networks (school, company)
<ul>
<li>Mix of wired, wireless link technologies
<ul>
<li>Ethernet
<ul>
<li>Wired access at 100Mbps, 1Gbps, 10Gbps</li>
</ul>
</li>
<li>WiFi
<ul>
<li>Wireless access points at 11, 54, 450 Mbps</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>History of IEEE 802.11 (Use CSMA/CA)</strong></p>
<ul>
<li>Unlicensed ISM - 1985</li>
<li>802.11 - 1997
<ul>
<li>2.4GHz</li>
<li>DSSS &amp; FHSS</li>
<li>1,2Mbps</li>
</ul>
</li>
<li>802.11b - 1999 (WiFi-1)
<ul>
<li>2.4GHz</li>
<li>DSSS</li>
<li>11Mbps</li>
</ul>
</li>
<li>802.11a - 1999 (WiFi-2)
<ul>
<li>5GHz</li>
<li>OFDM</li>
<li>54Mbps</li>
</ul>
</li>
<li>WiFi Alliance - 1999</li>
<li>802.11g - 2003 (WiFi-3)
<ul>
<li>2.4GHz</li>
<li>54Mbps</li>
</ul>
</li>
<li>802.11-2007 - 2007
<ul>
<li>Combined 802.11a/b/g</li>
</ul>
</li>
<li>802.11n - 2009 (WiFi-4)
<ul>
<li>MIMO, 2.4 or 5GHz</li>
<li>600Mbps</li>
</ul>
</li>
<li>802.11-2012
<ul>
<li>Combined 802.11a/b/g/n</li>
</ul>
</li>
<li>802.11ac - 2013 (WiFi-5)
<ul>
<li>5GHz</li>
<li>7Gbps</li>
</ul>
</li>
<li>802.11ah - 2017</li>
<li>802.11ax - 2020 (WiFi-6)
<ul>
<li>5GHz</li>
<li>OFDMA</li>
<li>9.6Gbps</li>
</ul>
</li>
</ul>
<p><strong>Links: Physical Media</strong></p>
<ul>
<li>Twisted pair (TP)
<ul>
<li>Two insulated copper wires
<ul>
<li>Category 5: 100Mbos, 1Gbps Ethernet</li>
<li>Category 6: 10Gbps Ethernet</li>
</ul>
</li>
</ul>
</li>
<li>Coaxial cable
<ul>
<li>Two concentric copper conductors</li>
<li>Bidiretional</li>
<li>Broadband
<ul>
<li>Multiple frequency channels on cable</li>
<li>100 Mbps per channel</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://youtu.be/jZOg39v73c4">Fiber optic cable</a>
<ul>
<li>Glass fiber carrying light pulse a bit (each pulse a bit)</li>
<li>High-speed point-to-point transmission (10-100Gbps)</li>
<li>Low error rate
<ul>
<li>Repeaters spaced far apart</li>
<li>Immune to electromagnetic noise</li>
</ul>
</li>
</ul>
</li>
<li>Wireless radio
<ul>
<li>Signal carried in electromagnetic spectrum</li>
<li>No physical &ldquo;wire&rdquo;</li>
<li>Propagation environment effects
<ul>
<li>Reflection</li>
<li>Obstruction by objects</li>
<li>Interference</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Network Core</strong></p>
<p><em>Mesh of interconnected routers</em></p>
<ul>
<li>
<p>Packet-switching (hosts break application-layer messages into packets)</p>
<ul>
<li>Forward packets from one router to the next</li>
<li>Each packet transmitted a full link capacity</li>
</ul>
</li>
<li>
<p>Packet transmission delay</p>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/packet_switch.png" alt="packet_switch"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	Packet transmission <span class="nv">delay</span> <span class="o">=</span> L <span class="o">(</span>bits<span class="o">)</span> / R <span class="o">(</span>bits/sec<span class="o">)</span>
</span></span></code></pre></div><ul>
<li>End-end delay</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/store_and_forward.png" alt="store_and_forward"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	End-end <span class="nv">delay</span> <span class="o">=</span> 2L <span class="o">(</span>bits<span class="o">)</span> / R <span class="o">(</span>bits/sec<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">(</span>Assuming zero propagation delay<span class="o">)</span>
</span></span></code></pre></div><ul>
<li>
<p>Store and forward: entire packet must arrive at router before it can be transmitted on next link</p>
</li>
<li>
<p>Packet queuing and loss</p>
<ul>
<li>If arrival rate &gt; transmission rate, packets will queue</li>
<li>If memory fills up, packets can be dropped</li>
<li>Bigger buffer can bring lower packet loss but higher delay+buffer cost</li>
</ul>
</li>
<li>
<p>Two key network-core functios</p>
<ul>
<li>Forwarding
<ul>
<li>Local action: input link -&gt; output link</li>
</ul>
</li>
<li>Routing
<ul>
<li>Global action: source -&gt; destinatin</li>
<li>Routing algorithms</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Circuit switching</p>
<ul>
<li>End-end resources allocated to, reserved for &ldquo;call&rdquo; between source&amp;dest</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/circuit_switching.png" alt="circuit_switching"></p>
<ul>
<li>Frequency Division Multiplexing (FDM)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/fdm.png" alt="fdm"></p>
<ul>
<li>Time Division Multiplexing (TDM)</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/tdm.png" alt="tdm"></p>
<p><strong>Packet Switching vs. Circuit Switching</strong></p>
<ul>
<li>Packet switching is great for bursty data
<ul>
<li>Resource sharing</li>
<li>Simpler, no call setup</li>
</ul>
</li>
<li>Packet switching can cause excessive congestion</li>
<li>Combined: Virtual Circuit Packet Switching</li>
</ul>
<p><strong>Internet Structure: Network of networks</strong></p>
<ul>
<li>Hosts connected to internet</li>
<li>Access ISPs (Internet Service Providers)
<ul>
<li>To ensure every two hosts can send packets to each other, access ISPs must be interconnected</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/isp_tiers.png" alt="isp_tiers"></p>
<ul>
<li>Tier-1 ISP
<ul>
<li>Sprint, AT&amp;T, NTT</li>
<li>National &amp; international coverage</li>
</ul>
</li>
<li>Content provider network (private network)
<ul>
<li>Google</li>
<li>Facebook</li>
</ul>
</li>
</ul>
<p><strong>Delay and Loss</strong></p>
<ul>
<li>Nodal processing</li>
<li>Queueing delay</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/queueing_delay.png" alt="queueing_delay">
<ul>
<li>R: link bandwidth (bps)</li>
<li>L: packet length (bits)</li>
<li>a: average packet arrival rate</li>
<li>Traffic intensity = La / R</li>
<li>E(x) = La/R / (1 - La/R)</li>
</ul>
</li>
<li>Transmission delay
<ul>
<li>L(packet length) / R (link bandwidth)</li>
</ul>
</li>
<li>Propagation delay
<ul>
<li>d (length of physical link) / s (propagation speed)</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/packet_delay.png" alt="packet_delay"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	d<span class="o">(</span>nodal<span class="o">)</span> <span class="o">=</span> d<span class="o">(</span>proc<span class="o">)</span> + d<span class="o">(</span>queue<span class="o">)</span> + d<span class="o">(</span>trans<span class="o">)</span> + d<span class="o">(</span>prop<span class="o">)</span>
</span></span></code></pre></div><p><strong>Example</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	Number of <span class="nv">hops</span> <span class="o">=</span> M
</span></span><span class="line"><span class="cl">	Per-hop processing <span class="nv">delay</span> <span class="o">=</span> d<span class="o">(</span>proc<span class="o">)</span>
</span></span><span class="line"><span class="cl">	Link propagation <span class="nv">delay</span> <span class="o">=</span> d<span class="o">(</span>prop<span class="o">)</span>
</span></span><span class="line"><span class="cl">	Packet transmission <span class="nv">delay</span> <span class="o">=</span> d<span class="o">(</span>trans<span class="o">)</span>
</span></span><span class="line"><span class="cl">	Message <span class="nv">size</span> <span class="o">=</span> N packets
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	End-to-end Delay <span class="o">(</span>ignoring queueing delay<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">=</span> M * d<span class="o">(</span>prop<span class="o">)</span> + N * d<span class="o">(</span>trans<span class="o">)</span> + <span class="o">(</span>M-1<span class="o">)</span> * d<span class="o">(</span>trans<span class="o">)</span> + <span class="o">(</span>M-1<span class="o">)</span> * d<span class="o">(</span>proc<span class="o">)</span>
</span></span></code></pre></div><p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/timing_diagram.png" alt="timing_diagram"></p>
<p><strong>&ldquo;Real&rdquo; Internet delays and routes: traceroute <a href="https://www.youtube.com">YouTube</a> (macOS)</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">➜  ~ traceroute youtube.com
</span></span><span class="line"><span class="cl">traceroute to youtube.com <span class="o">(</span>216.58.197.110<span class="o">)</span>, <span class="m">64</span> hops max, <span class="m">52</span> byte packets
</span></span><span class="line"><span class="cl"> <span class="m">1</span>  172.24.172.1 <span class="o">(</span>172.24.172.1<span class="o">)</span>  14.211 ms  1.584 ms  1.635 ms
</span></span><span class="line"><span class="cl"> <span class="m">2</span>  118.140.125.65 <span class="o">(</span>118.140.125.65<span class="o">)</span>  13.122 ms  23.362 ms  7.402 ms
</span></span><span class="line"><span class="cl"> <span class="m">3</span>  10.30.31.17 <span class="o">(</span>10.30.31.17<span class="o">)</span>  7.024 ms  23.736 ms  54.474 ms
</span></span><span class="line"><span class="cl"> <span class="m">4</span>  10.28.21.37 <span class="o">(</span>10.28.21.37<span class="o">)</span>  5.924 ms  3.565 ms  2.954 ms
</span></span><span class="line"><span class="cl"> <span class="m">5</span>  * * *
</span></span><span class="line"><span class="cl"> <span class="m">6</span>  * 218.188.28.165 <span class="o">(</span>218.188.28.165<span class="o">)</span>  214.507 ms  3.344 ms
</span></span><span class="line"><span class="cl"> <span class="m">7</span>  108.170.241.65 <span class="o">(</span>108.170.241.65<span class="o">)</span>  3.595 ms
</span></span><span class="line"><span class="cl">    72.14.222.9 <span class="o">(</span>72.14.222.9<span class="o">)</span>  10.840 ms  3.377 ms
</span></span><span class="line"><span class="cl"> <span class="m">8</span>  108.170.241.65 <span class="o">(</span>108.170.241.65<span class="o">)</span>  3.156 ms
</span></span><span class="line"><span class="cl">    216.239.62.59 <span class="o">(</span>216.239.62.59<span class="o">)</span>  3.495 ms
</span></span><span class="line"><span class="cl">    216.239.62.57 <span class="o">(</span>216.239.62.57<span class="o">)</span>  2.733 ms
</span></span><span class="line"><span class="cl"> <span class="m">9</span>  216.239.62.59 <span class="o">(</span>216.239.62.59<span class="o">)</span>  4.698 ms
</span></span><span class="line"><span class="cl">    hkg12s01-in-f14.1e100.net <span class="o">(</span>216.58.197.110<span class="o">)</span>  3.252 ms  4.355 ms
</span></span></code></pre></div><p><strong>Packet Loss</strong></p>
<ul>
<li>Queen (buffer) preceding link in buffer has finite capcity</li>
<li>Packet arriving to full queue dropped (lost)</li>
<li>Lost packet may be retransmitted by previous node, end system or not at all</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/packet_loss.png" alt="packet_loss"></p>
<p><strong>Throughput</strong></p>
<ul>
<li>Rate (bits/time) at which bits transferred from sender to receiver
<ul>
<li>Instantaneous: rate at given point in time</li>
<li>Average: rate over longer period of time</li>
</ul>
</li>
<li>Bottleneck link
<ul>
<li>link on end-end path that constrains end-end throughput</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/throughput.png" alt="throughput"></li>
<li>Per-connection end-end throughput
<ul>
<li>min(Rc, Rs, R/10)</li>
<li>In practice, Rc or Rs is often bottleneck</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Why Layering</strong></p>
<ul>
<li>Explicit structure allows identification, relationship of complex system&rsquo;s pieces</li>
<li>Modularization eases maintenance, updating of system</li>
</ul>
<p><strong>Internet Protocol Stack</strong></p>
<ul>
<li>Application - supporting network applications
<ul>
<li>FTP</li>
<li>SMTP</li>
<li>HTTP</li>
</ul>
</li>
<li>Transport - process data transfer
<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
</li>
<li>Network - routing of datagrams from source to destination
<ul>
<li>IP</li>
<li>Routing protocol</li>
</ul>
</li>
<li>Link - data transfer between neighboring network elements
<ul>
<li>Ethernet</li>
<li>WiFi</li>
<li>PPP</li>
</ul>
</li>
<li>Physical - bits &ldquo;on the wire&rdquo;</li>
</ul>
<p><strong>ISO/OSI Reference Model (Implemented in Application)</strong></p>
<ul>
<li>Presentation
<ul>
<li>Allow applications to interpret meaning of data</li>
</ul>
</li>
<li>Session
<ul>
<li>Synchronization, checkpoint, recovery of data exchange</li>
</ul>
</li>
</ul>
<p><strong>Encapsulation</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/encapsulation.png" alt="encapsulation"></p>
<p><strong>Network Security</strong></p>
<ul>
<li>Fields of network security
<ul>
<li>How bad guys can attack computer networks</li>
<li>How we can defend networks against attacks</li>
<li>How to design architectures that are immune to attacks</li>
</ul>
</li>
<li>Internet not originally designed with much security in mind</li>
</ul>
<p><strong>Bad Guys</strong></p>
<ul>
<li>Malware
<ul>
<li>From
<ul>
<li>Virus</li>
<li>Worm</li>
</ul>
</li>
<li>Spyware malware</li>
<li>Usage
<ul>
<li>Botnet</li>
<li>Spam</li>
<li>DDos attacks</li>
</ul>
</li>
</ul>
</li>
<li>Denial of service (DoS)
<ul>
<li>Make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with fake traffic</li>
<li>Procedures
<ol>
<li>Select target</li>
<li>Break into hosts around the network</li>
<li>Send packets to target from compromised hosts</li>
</ol>
</li>
</ul>
</li>
<li>Packet interception
<ul>
<li>Packet &ldquo;sniffing&rdquo;</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/packet_sniffing.png" alt="packet_sniffing">
<ul>
<li>Broadcast media (shared ethernet, wireless)</li>
<li>Promiscuous network interface reads/records all packets</li>
</ul>
</li>
</ul>
</li>
<li>Fake identity
<ul>
<li>IP spoofing: send packet with false source address</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ip_spoffing.png" alt="ip_spoffing"></li>
</ul>
</li>
</ul>
<p><strong>Use&rsquo;s View Of Internet</strong></p>
<ul>
<li>Single large (global) network
<ul>
<li>Achieved through software that implements abstractions</li>
</ul>
</li>
<li>User&rsquo;s computers all attach directly</li>
<li>No other structure visible</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/user_view_internet.png" alt="user_view_internet">
<strong>Internet History</strong></p>
<ul>
<li>Early packet-switching principles (1961-1972)</li>
<li>Internetworking, new and proprietary nets (1972-1980)</li>
<li>New protocols, a proliferation of networks (1980-1990)</li>
<li>Commercialization, the Web, new apps (1990&rsquo;s, 2000&rsquo;s)</li>
<li>More new applications, Internet is &ldquo;everywhere&rdquo; (2005-Present)</li>
</ul>
]]></content:encoded></item><item><title>COMP7404 Topic 3 Adversarial Search</title><link>https://www.pseudoyu.com/en/2020/10/05/comp7404_topic3/</link><pubDate>Mon, 05 Oct 2020 00:30:11 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/05/comp7404_topic3/</guid><description>COMP7404 Computational Intelligence and Machine Learning Topic 3 Adversarial Search A Multi-agent Competitive Environment
Other agents are planning against us Goals are in conflict (not necessarily) Game Definition
A game can be defined as s : States s0: Initial state Player(s) : Defines which player has the move Actions(s) : Returns a set of legal moves Result(s,a) : Defines the result of a move TerminalTest(s) : True when game is over, false otherwise Utility(s,p) : Defines the final numeric value for a game that ends in terminal state s for player p A game tree can be constructed Nodes are game states and edges are moves Tic-Tac-Toe Game Tree</description><content:encoded><![CDATA[<h1 id="comp7404-computational-intelligence-and-machine-learning">COMP7404 Computational Intelligence and Machine Learning</h1>
<h2 id="topic-3-adversarial-search">Topic 3 Adversarial Search</h2>
<p><strong>A Multi-agent Competitive Environment</strong></p>
<ul>
<li>Other agents are planning against us</li>
<li>Goals are in conflict (not necessarily)</li>
</ul>
<p><strong>Game Definition</strong></p>
<ul>
<li>A game can be defined as
<ul>
<li>s : States</li>
<li>s0: Initial state</li>
<li>Player(s) : Defines which player has the move</li>
<li>Actions(s) : Returns a set of legal moves</li>
<li>Result(s,a) : Defines the result of a move</li>
<li>TerminalTest(s) : True when game is over, false otherwise</li>
<li>Utility(s,p) : Defines the final numeric value for a game that ends in terminal state s for player p</li>
</ul>
</li>
<li>A game tree can be constructed
<ul>
<li>Nodes are game states and edges are moves</li>
</ul>
</li>
</ul>
<p><strong>Tic-Tac-Toe Game Tree</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/tic_tac_toe_game_tree.png" alt="tic_tac_toe_game_tree"></p>
<p><strong>Minimax Search</strong></p>
<ul>
<li>A state-space search tree</li>
<li>Players alternate turns</li>
<li>Compute each node’s minimax value
<ul>
<li>the best achievable utility against a rational (optimal) adversary</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/minimax.png" alt="minimax"></li>
</ul>
</li>
<li>Will lead to optimal strategy
<ul>
<li>Best achievable payoff against best play</li>
</ul>
</li>
<li>Example
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/minimax_example.png" alt="minimax_example"></li>
</ul>
</li>
<li>Implementation
<ul>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/minimax_implementation.png" alt="minimax_implementation"></li>
</ul>
</li>
<li>Properties
<ul>
<li>Complete - Yes, if tree is finite</li>
<li>Optimal - In general no, yes against an optimal opponent</li>
<li>Time complexity - O(b^m)</li>
<li>Space complexity - O(bm)</li>
</ul>
</li>
</ul>
<p><strong>Depth-Limit Search (DLS)</strong></p>
<ul>
<li>A depth limit search (DLS)
<ul>
<li>Search only to a limited depth in the tree</li>
<li>Replace terminal utilities with an evaluation function for non-terminal positions</li>
</ul>
</li>
<li>Problems
<ul>
<li>Guarantee of optimal play is gone</li>
<li>Need to design evaluation function</li>
</ul>
</li>
<li>An evaluation function
<ul>
<li>An evaluation function Eval(s) scores non-terminals in depth-limited search
<ul>
<li>An estimate of the expected utility of the game from a given position</li>
</ul>
</li>
<li>Ideal function
<ul>
<li>The actual minimax value of the position</li>
</ul>
</li>
<li>The performance of a game-playing program depends strongly on the quality of its evaluation functio</li>
</ul>
</li>
</ul>
<p><strong>𝛼-𝛽 Pruning Algorithm</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/pruning_algorithm.png" alt="pruning_algorithm"></p>
<ul>
<li>Min version
<ul>
<li>Consider Min’s value at some node n</li>
<li>n will decrease (or stay constant) while the descendants of n are examined</li>
<li>Let m be the best value that Max can get at any choice point along the current path from the root</li>
<li>If n becomes worse (&lt;) than m
<ul>
<li>Max will avoid it</li>
<li>Stop considering n’s other children</li>
</ul>
</li>
</ul>
</li>
<li>Max version is symmetric</li>
<li>Properties
<ul>
<li>Pruning has no effect on the minimax value at the root</li>
<li>Values of intermediate nodes might be wrong
<ul>
<li>Action selection not appropriate for this simple version of alpha-beta pruning</li>
</ul>
</li>
</ul>
</li>
<li>Move ordering
<ul>
<li>The effectiveness of alpha-beta pruning is highly dependent on the order in which states are examined</li>
<li>It is worthwhile to try to examine first the successors that are likely best
<ul>
<li>Examine only O(b^(m/2)) nodes to pick the best move, instead of O(bm) for minimax</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong><a href="https://kartikkukreja.wordpress.com/2014/06/29/alphabetasearch/">A Reference Note</a></strong></p>
<p><strong>Expectimax Search</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/expectimax_search.png" alt="expectimax_search"></p>
<ul>
<li>Values reflect average case outcomes, not worst case outcomes</li>
<li>Expectimax search computes the expected score under optimal play
<ul>
<li>Max nodes as in minimax search</li>
<li>Chance nodes are like min nodes but the outcome is uncertain</li>
<li>Calculate their expected utilities
<ul>
<li>i.e., take weighted average of children</li>
</ul>
</li>
</ul>
</li>
<li>Expectiminimax
<ul>
<li>Environment is an extra &ldquo;random agent&rdquo; player that moves after each min/max agent</li>
</ul>
</li>
</ul>
<p><strong>Multi-Agent Utilities</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/multi_agent.png" alt="multi_agent"></p>
<ul>
<li>Generalisation of minimax
<ul>
<li>Terminals and nodes have utility vectors</li>
<li>Each player maximizes its own component</li>
<li>Gives rise to cooperation and competition dynamically</li>
</ul>
</li>
</ul>
<blockquote>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/46706438">A Reference Note1</a></li>
<li><a href="https://kartikkukreja.wordpress.com/2015/07/04/adversarial-search/">A Reference Note2</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>COMP7404 Topic 2 Beyond Classical Search</title><link>https://www.pseudoyu.com/en/2020/10/04/comp7404_topic2/</link><pubDate>Sun, 04 Oct 2020 21:30:11 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/04/comp7404_topic2/</guid><description>COMP7404 Computational Intelligence and Machine Learning Topic 2 Beyond Classical Search Planning vs Identification
Planing: sequence of actions The path to the goal is the important thing Paths have various costs, depths Heuristics to guide, frontier to keep backups Identification: assignments to variables The goal itself is important, not the path Local Search can find solutions faster for specific types of identification problems
Local Search
Evaluate and modify one current state rather than systematically explore paths from an initial state Suitable for problems were all that matters in the solution state and not the path cost to reach it Although local search algorithms are not systematic they have two advantages Require very little memory Often find reasonable solutions in large spaces Local Search Algorithm</description><content:encoded><![CDATA[<h1 id="comp7404-computational-intelligence-and-machine-learning">COMP7404 Computational Intelligence and Machine Learning</h1>
<h2 id="topic-2-beyond-classical-search">Topic 2 Beyond Classical Search</h2>
<p><strong>Planning vs Identification</strong></p>
<ul>
<li>Planing: sequence of actions
<ul>
<li>The path to the goal is the important thing</li>
<li>Paths have various costs, depths</li>
<li>Heuristics to guide, frontier to keep backups</li>
</ul>
</li>
<li>Identification: assignments to variables
<ul>
<li>The goal itself is important, not the path</li>
</ul>
</li>
</ul>
<p><em>Local Search can find solutions faster for specific types of identification problems</em></p>
<p><strong>Local Search</strong></p>
<ul>
<li>Evaluate and modify one current state rather than systematically explore paths from an initial state</li>
<li>Suitable for problems were all that matters in the solution state and not the path cost to reach it</li>
<li>Although local search algorithms are not systematic they have two advantages
<ul>
<li>Require very little memory</li>
<li>Often find reasonable solutions in large spaces</li>
</ul>
</li>
</ul>
<p><strong>Local Search Algorithm</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">	Randomly initialize currentState
</span></span><span class="line"><span class="cl">	If cost of <span class="nv">currentState</span> <span class="o">==</span> <span class="m">0</span> <span class="k">return</span> currentState
</span></span><span class="line"><span class="cl">	If min<span class="o">(</span>cost<span class="o">(</span>getNeighbors<span class="o">(</span>currentState<span class="o">)))</span> &gt; cost<span class="o">(</span>currentState<span class="o">)</span>
</span></span><span class="line"><span class="cl">		goto step <span class="m">1</span> <span class="o">(</span>we have reached a <span class="nb">local</span> minimum<span class="o">)</span>
</span></span><span class="line"><span class="cl">	Select cheapest neighbor as currentState and goto step2
</span></span></code></pre></div><p><strong>Example: 8-Queens</strong></p>
<ul>
<li>States
<ul>
<li>Each state has 8 queens on board, one per column</li>
</ul>
</li>
<li>Successors
<ul>
<li>All possible states generated by moving single queen to another square in the same column</li>
</ul>
</li>
<li>Cost function
<ul>
<li>Number of pairs of queens that are attacking each other, either directly and indirectly</li>
</ul>
</li>
</ul>
<p><strong>Constraint Satisfaction Problems</strong></p>
<p>CSPs use a factored representation for states</p>
<ul>
<li>A set of variables, each of which has a value</li>
</ul>
<p><strong>Defining CSPs</strong></p>
<ul>
<li>A CSP consists of three components
<ul>
<li>A set of variables, X = {X1,&hellip;,Xn}</li>
<li>A set of domains, D = {D1,&hellip;,Dn}, where Di = {V1,&hellip;,Vk} for each variable Xi</li>
<li>A set of constraints C which specify allowable combinations of values</li>
</ul>
</li>
<li>To solve a CSP we need to define a state space
<ul>
<li>Each state is defined by an assignment of values to some or all variables {Xi = Vi, Xj = Vj,&hellip;}</li>
</ul>
</li>
</ul>
<p><strong>Solving CSPs</strong></p>
<ul>
<li>States are defined by the values assigned so far</li>
<li>Initial state
<ul>
<li>Empty assignment {}</li>
</ul>
</li>
<li>Successor function
<ul>
<li>Assign a value to an unassigned variable</li>
</ul>
</li>
<li>Goal test
<ul>
<li>Current assignment is complete and consistent</li>
</ul>
</li>
</ul>
<p><strong>Solutiona to CSPs</strong></p>
<ul>
<li>Consistent - No constraints are violated</li>
<li>Complete - Every variable is assigned</li>
</ul>
<p><strong>Backtracking Search (The basic algorithm for solving CSPs)</strong></p>
<p>Idea</p>
<ul>
<li>Only consider assignments to a single variable at each point</li>
<li>Only allow legal assignemnts to each point</li>
</ul>
<p>DFS with these two ideas is called backtracking search</p>
<p><strong>Improving Backchecking</strong></p>
<p>Idea</p>
<ul>
<li>Forward checking (FC)</li>
<li>Constraint propagation (AC-3)</li>
</ul>
<p><strong>Filtering: Forward Checking</strong></p>
<ul>
<li>Filtering
<ul>
<li>Keep track of domains for unassigned variables and cross off bad options</li>
</ul>
</li>
<li>Forward checking
<ul>
<li>Cross off values that violate a constraint when added to the existing assignment</li>
</ul>
</li>
</ul>
<p><strong>Improving Backtracking Further</strong></p>
<ul>
<li>Variable Ordering
<ul>
<li>Minimum remaining values (MRV)
<ul>
<li>Choose the variable with the fewest legal left values in its domain
<ul>
<li>Most constraint variable</li>
<li>Fail-first heuristic</li>
</ul>
</li>
<li>Tie-breaker among MRV variables
<ul>
<li>Degree Heuristic (Deg)
<ul>
<li>Choose the variable with the most constraints on remaining variables</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Value Ordering
<ul>
<li>Least constraining value (LCV)
<ul>
<li>Choose the value that rules out the fewest values in the remaining variables</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>Mobile Payment Systems Case Study</title><link>https://www.pseudoyu.com/en/2020/10/01/ecom6013_discussion_topic3/</link><pubDate>Thu, 01 Oct 2020 22:25:19 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/10/01/ecom6013_discussion_topic3/</guid><description>Mobile Payment Systems Why has China been an ideal environment to support mobile payment systems Politically, payment licenses are controlled by government (relative financial institutions) and under strict regulation. So, tech giants like Alibaba who are qualified can increasingly develop their payment business in the early age. Plus, in the early stage of mobile payment, laws and rules are not so completed. Payment platform can utilize smart market strategies (like very high return rate) to attract more new potential users and enhance existing users’ engagement, which is effective in market expanding stage.</description><content:encoded><![CDATA[<h1 id="mobile-payment-systems">Mobile Payment Systems</h1>
<h2 id="why-has-china-been-an-ideal-environment-to-support-mobile-payment-systems">Why has China been an ideal environment to support mobile payment systems</h2>
<p>Politically, payment licenses are controlled by government (relative financial institutions) and under strict regulation. So, tech giants like Alibaba who are qualified can increasingly develop their payment business in the early age. Plus, in the early stage of mobile payment, laws and rules are not so completed. Payment platform can utilize smart market strategies (like very high return rate) to attract more new potential users and enhance existing users’ engagement, which is effective in market expanding stage.</p>
<p>Economically and socially, China’s economic development was relatively slower than major developed countries such as the U. S. or Japan. And the majority of Chinese get used to spending money they already have instead of ahead-of-time consumption. Thus, credit card payment hasn’t been so popular in the past few decades (only about 0.31 credit card per capita) compared to western countries. Since the credit card payment (mainly related to the bank) is not the dominant way for daily payment, it’s possible for a new payment method to grow and domain the payment market in a “free compete” environment.</p>
<p>Technically, E-Commerce and internet technology has been developing rapidly in China recently. As a country with huge population and strong consumption ability, the market urgently needs a new way of payment. With the new utilization of established technologies (4G, mobile phone development, cyber security, etc.) and emerging technologies (QR-Code, information system architecture, etc.), payment platform can integrate various functions into the existing system and provide a more powerful and advantageous platform.</p>
<p>To sum up, China has been an ideal environment to support mobile payment systems.</p>
]]></content:encoded></item><item><title>ECOM6013 Topic 7 E-Payment Systems</title><link>https://www.pseudoyu.com/en/2020/09/27/ecom6013_topic7/</link><pubDate>Sun, 27 Sep 2020 11:30:28 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/09/27/ecom6013_topic7/</guid><description>ECOM6013 E-Commerce Technologies Topic 7 E-Payment Systems Payment System Stakeholders&amp;rsquo; Priorities
Customer Low-risk Low-cost Refutable Convenience Reliable Merchants Low-risks Low-cost Irrefutable Secure Reliable Financial intermediaries Secure Low-risk Maximizing profit Government regulators Secure Trust Protecting participants and enforcing reporting Type of Payment Systems
Cash Cheque transfer Credit card Stored value Accumulating balance B2C Payment System
Credit cards Financial cybermediaries Electronic bill presentment and payment Smart cards Mobile payment Features
Make large purchases Will not pay with credit card or financial cybermediary Use financial EDI (Electronic Data Interchange) Pay for many purchases at once Likely that cloud-based payment gateway (or other Internet-based technology) will eventually take over completely!</description><content:encoded><![CDATA[<h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies</h1>
<h2 id="topic-7-e-payment-systems">Topic 7 E-Payment Systems</h2>
<p><strong>Payment System Stakeholders&rsquo; Priorities</strong></p>
<ul>
<li>Customer
<ol>
<li>Low-risk</li>
<li>Low-cost</li>
<li>Refutable</li>
<li>Convenience</li>
<li>Reliable</li>
</ol>
</li>
<li>Merchants
<ol>
<li>Low-risks</li>
<li>Low-cost</li>
<li>Irrefutable</li>
<li>Secure</li>
<li>Reliable</li>
</ol>
</li>
<li>Financial intermediaries
<ol>
<li>Secure</li>
<li>Low-risk</li>
<li>Maximizing profit</li>
</ol>
</li>
<li>Government regulators
<ol>
<li>Secure</li>
<li>Trust</li>
<li>Protecting participants and enforcing reporting</li>
</ol>
</li>
</ul>
<p><strong>Type of Payment Systems</strong></p>
<ul>
<li>Cash</li>
<li>Cheque transfer</li>
<li>Credit card</li>
<li>Stored value</li>
<li>Accumulating balance</li>
</ul>
<p><strong>B2C Payment System</strong></p>
<ul>
<li>Credit cards</li>
<li>Financial cybermediaries</li>
<li>Electronic bill presentment and payment</li>
<li>Smart cards</li>
<li>Mobile payment</li>
</ul>
<p><em>Features</em></p>
<ul>
<li>Make large purchases</li>
<li>Will not pay with credit card or financial cybermediary</li>
<li>Use financial EDI (Electronic Data Interchange)</li>
<li>Pay for many purchases at once</li>
<li>Likely that cloud-based payment gateway (or other Internet-based technology) will eventually take over completely!</li>
<li>FPS - HKMA &amp; HKICL Payment Gateway Faster Payment System (FPS)</li>
</ul>
<p><strong>E-Commere Payment Systems</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/online_credit_transaction.png" alt="online_credit_transaction"></p>
<ul>
<li>Credit cards</li>
<li>Debit cards</li>
<li>Digital wallets</li>
<li>Digital cash</li>
<li>Digital checking</li>
<li>Online stored value systems
<ul>
<li>PayPal, AliPay, WeChat Pay</li>
<li>Smart cards
<ul>
<li>Contact</li>
<li>Contactless
<ul>
<li>EZPass, Octopus card</li>
<li>Radio Frequency ID (RFID)</li>
<li>Near Field Communications (NFC)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Future Payment System</strong></p>
<ul>
<li>Exporting existing payment systems that work in traditional commerce to E-Commerce causes problems</li>
<li>Need a payment/financial system designed for the online world
<ul>
<li>Cybercurrencies / digital currency</li>
</ul>
</li>
</ul>
]]></content:encoded></item><item><title>ECOM6013 Topic 6 E-Commerce Security</title><link>https://www.pseudoyu.com/en/2020/09/26/ecom6013_topic6/</link><pubDate>Sat, 26 Sep 2020 15:46:28 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/09/26/ecom6013_topic6/</guid><description>ECOM6013 E-Commerce Technologies Topic 6 E-Commerce Security Good E-Commerce Security
Highest degree of security New technologies Organizational policies and procedures Industry standards and government law Other factors Cost of security vs. potential loss Security often breaks at weakest link The Tense Between Security and Other Values
Security vs. Easy of use More Secure -&amp;gt; More difficult to use + slower Security vs. Desire of individuals to act anonmously Basic E-Commerce Security Issues and Landscape</description><content:encoded><![CDATA[<h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies</h1>
<h2 id="topic-6-e-commerce-security">Topic 6 E-Commerce Security</h2>
<p><strong>Good E-Commerce Security</strong></p>
<ul>
<li>Highest degree of security
<ul>
<li>New technologies</li>
<li>Organizational policies and procedures</li>
<li>Industry standards and government law</li>
</ul>
</li>
<li>Other factors
<ul>
<li>Cost of security vs. potential loss</li>
<li>Security often breaks at weakest link</li>
</ul>
</li>
</ul>
<p><strong>The Tense Between Security and Other Values</strong></p>
<ul>
<li>Security vs. Easy of use
<ul>
<li>More Secure -&gt; More difficult to use + slower</li>
</ul>
</li>
<li>Security vs. Desire of individuals to act anonmously</li>
</ul>
<p><strong>Basic E-Commerce Security Issues and Landscape</strong></p>
<ul>
<li>E-Commerce security requirements
<ul>
<li>Authentication (verify the real identity)</li>
<li>Authorization (determine the entity&rsquo;s access)</li>
<li>Auditing</li>
<li>Availability</li>
<li>Nonrepudiation (assurance that trading partners can&rsquo;t falsely deny their purchase or transaction)</li>
</ul>
</li>
<li>Risk (a vulnerability will be known and used)</li>
<li>Social engineering (non-technical attack, trick users to do some certain actions)</li>
<li>Spam</li>
</ul>
<p><strong>E-Commerce of Today</strong></p>
<ul>
<li>Threats
<ul>
<li>Money thefts</li>
<li>Identity thefts</li>
<li>Malware</li>
</ul>
</li>
<li>Solutions
<ul>
<li>Authentication</li>
<li>Intrusion checking</li>
<li>Firewalls</li>
<li>Education</li>
</ul>
</li>
</ul>
<p><strong>Security Threats in the E-Commerce Environment</strong></p>
<ul>
<li>Three key points of vulnerability
<ul>
<li>Client</li>
<li>Server</li>
<li>Communication pipeline (network channels)</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/vulnerable_points_in_ecommerce.png" alt="vulnerable_points_in_ecommerce"></p>
<p><strong>Most Common Security Threats</strong></p>
<ul>
<li>Malicious code
<ul>
<li>Viruses</li>
<li>Worms</li>
<li>Ransomeware</li>
<li>Trojan horses</li>
<li>Backdoors</li>
<li>Bots, botnets</li>
</ul>
</li>
<li>Unwanted programs
<ul>
<li>Browser parasites</li>
<li>Adware</li>
<li>Spyware</li>
</ul>
</li>
<li>Phishing
<ul>
<li>Deceptive online attack to obtain confidential information</li>
<li>Social engineering, e-mail scams, spoofing legitimate websites</li>
<li>Used for identity fraud and theft</li>
</ul>
</li>
<li>Hacking and cybervandalism
<ul>
<li>Hackers vs. Crackers</li>
<li>Cybervandalism (intentionally disrupting, defacing, destroying websites)</li>
<li>Hacktivism</li>
</ul>
</li>
<li>Data breach</li>
<li>Credit card fraud/theft</li>
<li>Spoofing</li>
<li>Pharming</li>
<li>Spam / junk websites</li>
<li>Denial of sevices (DoS) attack (useless traffic to overwhelm network)</li>
<li>Distributed denial of service (DDoS) attack (multiple computers to attack target network)</li>
<li>Sniffing (eavesdropping program that monitors information traveling over a network)</li>
<li>Insider jobs
<ul>
<li>Single financial threats</li>
<li>Poorly designed security policy and server / client software</li>
</ul>
</li>
<li>Social network issues</li>
<li>Mobile platform issues</li>
<li>Cloud security issues</li>
<li>IoT security issues</li>
</ul>
<p><strong>The Information Assurance Model and Defense Objectives</strong></p>
<ul>
<li>CIA security triad
<ul>
<li>Confidentiality</li>
<li>Integrity</li>
<li>Availability</li>
</ul>
</li>
</ul>
<p><strong>Three Dimensions in Internet Security</strong></p>
<ul>
<li>Integrity</li>
<li>Nonrepudiation</li>
<li>Authenticity</li>
<li>Confidentiality</li>
<li>Privacy</li>
<li>Availability</li>
</ul>
<p><strong>Technology Solutions</strong></p>
<ul>
<li>Protecting internet communications
<ul>
<li>Cryptography</li>
</ul>
</li>
<li>Securing channels of communication
<ul>
<li>SSL, TLS
<ul>
<li>Establishes a secure, negotiated client-server session in which URL of requested document, along with contents, is encrypted</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/ssl_protect.png" alt="ssl_protect"></li>
</ul>
</li>
<li>S-HTTP
<ul>
<li>Provides a secure message-oriented communications protocol designed for use in conjunction with HTTP</li>
</ul>
</li>
<li>VPNs
<ul>
<li>Allows remote users to securely access internal network via the Internet, using Point-to-Point Tunneling Protocol (PPTP)</li>
</ul>
</li>
<li>Wi-Fi</li>
</ul>
</li>
<li>Protecting networks
<ul>
<li>Firewalls</li>
<li>Proxy servers</li>
<li>Intrusion Detection System (IDS)</li>
<li><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/firewall.png" alt="firewall"></li>
</ul>
</li>
<li>Protecting servers and clients
<ul>
<li>OS security
<ul>
<li>Upgrades</li>
<li>Patches</li>
</ul>
</li>
<li>Anti-virus software
<ul>
<li>Easiest and least expensive way to prevent threats to system integrity</li>
<li>Requires daily updates</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Managing Risks</strong></p>
<ul>
<li>Technology</li>
<li>Effective management policies</li>
<li>Public laws and active enforcement</li>
</ul>
<p><strong>A Security Plan: Management Policies</strong></p>
<ul>
<li>Risk assessment</li>
<li>Security policy</li>
<li>Implementation plan
<ul>
<li>Security organization</li>
<li>Access controls</li>
<li>Authentication procedures, including biometrics</li>
<li>Authorization policies, authorization management systems</li>
</ul>
</li>
<li>Security audit</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/security_plan.png" alt="security_plan"></p>
<p><strong>Basic Concepts of User Authentication</strong></p>
<ul>
<li>Something you know
<ul>
<li>Password</li>
<li>PIN</li>
<li>OTP</li>
<li>&hellip;</li>
</ul>
</li>
<li>Something you have
<ul>
<li>Physical key</li>
<li>Token</li>
<li>Magnetic card</li>
<li>Smartcard</li>
<li>&hellip;</li>
</ul>
</li>
<li>Something you are
<ul>
<li>Fingerprint</li>
<li>Voice</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p><em>Best use 2 Factors Authentication (2FA)</em></p>
<p><strong>Encryption</strong></p>
<ul>
<li>Transfer data into cipher text readable only by sender and receiver</li>
<li>Secures stored information and information transmission</li>
<li>Provide 4/6 key dimensions of E-Commerce security
<ul>
<li>authentication</li>
<li>Confidentiality</li>
<li>Message Integrity</li>
<li>Nonrepudiation</li>
</ul>
</li>
</ul>
<p><strong>Symmetric Key Cryptography</strong></p>
<ul>
<li>Sender and receiver use same digital key to encrypt and decrypt message</li>
<li>Requires different set of keys for each transaction</li>
<li>Strength of encryption
<ul>
<li>Length of binary key used to encrypt data</li>
</ul>
</li>
<li>Standards
<ul>
<li>Data Encryption Standard (DES, 1977)</li>
<li>Advanced Encryption Standard (AES, 2000)</li>
<li>Other standards use keys with up to 2,048 bits</li>
</ul>
</li>
</ul>
<p><strong>Public Key Cryptography</strong></p>
<ul>
<li>Uses two mathematically related digital keys
<ul>
<li>Public key (widely disseminated)</li>
<li>Private key (kept secret by owner)</li>
</ul>
</li>
<li>Both keys used to encrypt and decrypt message
<ul>
<li>Once key used to encrypt message, same key cannot be used to decrypt message</li>
<li>Sender uses recipient’s public key to encrypt message</li>
<li>Recipient uses his/her private key to decrypt it</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/public_key_cryptography.png" alt="public_key_cryptography"></p>
<p><strong>Public Key Encryption Using Digital Signatures and Hash Digests</strong></p>
<ul>
<li>Hash function
<ul>
<li>Mathematical algorithm (e.g. MD5 and SHA-1) that produces fixed-length number called message or hash digest</li>
</ul>
</li>
<li>Sender applies hash function to the message and then encrypts the message AND the hash digest with recipient’s public key</li>
<li>Sender then encrypts the whole package with sender’s private key, creating digital signature for authenticity, nonrepudiation</li>
<li>Recipient first uses sender’s public key to authenticate the message and then the recipient’s private key to decrypt the hash digest and the message</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/public_key_cryptography_digital_signature.png" alt="public_key_cryptography_digital_signature"></p>
<p><strong>Digital Envelop</strong></p>
<ul>
<li>Addresses weaknesses of
<ul>
<li>Public key encryption (computationally slow)</li>
<li>Symmetric key encryption (insecure transmission lines)</li>
</ul>
</li>
<li>Uses symmetric key encryption to encrypt document</li>
<li>Uses public key encryption to encrypt and send symmetric key</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_envelop.png" alt="digital_envelop"></p>
<p><strong>Digital Certificates and Public Key Infrastructure (PKI)</strong></p>
<ul>
<li>Digital certificate
<ul>
<li>Name of subjects/company</li>
<li>Subject&rsquo;s public key</li>
<li>Digital certificate serial number</li>
<li>Expiration date, issuance date</li>
<li>Digital signature of certification authority (trusted third party institution) that issues certificate</li>
</ul>
</li>
<li>Public Key Infrastructure (PKI)
<ul>
<li>CAs and digital certificate procedures that are accepted by all parties</li>
</ul>
</li>
</ul>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/digital_certificate.png" alt="digital_certificate"></p>
<p><strong>Limits to Encryption Solutions</strong></p>
<ul>
<li>Doesn’t protect storage of private key</li>
<li>No guarantee that verifying computer of merchant is secure</li>
<li>CAs are unregulated, self-selecting organizations</li>
</ul>
]]></content:encoded></item><item><title>ECOM6013 Topic 5 Mobile Commerce</title><link>https://www.pseudoyu.com/en/2020/09/21/ecom6013_topic5/</link><pubDate>Mon, 21 Sep 2020 10:44:28 +0800</pubDate><guid>https://www.pseudoyu.com/en/2020/09/21/ecom6013_topic5/</guid><description>ECOM6013 E-Commerce Technologies Topic 5 Mobile Commerce Basic Principle of Mobile Technology
FDMA (Frequency Division Multiple Access) TDMA (Time Division Multiple Access) CDMA (Code Division Multiple Access) Fundamental Mobility: Cellphones
Cell Handover
4G vs. 5G
4G 10 ms 100 Thousand Connections / km^2 1 Gbps 5G &amp;lt; 1ms 1 Million Connections / km^2 20 Gbps E-Commerce vs. M-Commerce
E-Commerce Device: PC Network: Internet (HTTP) M-Commerce Device: Mobile devices Network Mobile carrier network WiFi Local frequency (RFID/NFC) Definition of M-Commerce</description><content:encoded><![CDATA[<h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies</h1>
<h2 id="topic-5-mobile-commerce">Topic 5 Mobile Commerce</h2>
<p><strong>Basic Principle of Mobile Technology</strong></p>
<ul>
<li>FDMA (Frequency Division Multiple Access)</li>
<li>TDMA (Time Division Multiple Access)</li>
<li>CDMA (Code Division Multiple Access)</li>
</ul>
<p><strong>Fundamental Mobility: Cellphones</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cellphones.png" alt="cellphones"></p>
<p><strong>Cell Handover</strong></p>
<p><img src="https://pseudoyu.oss-cn-hangzhou.aliyuncs.com/images/cell_handover.png" alt="cell_handover"></p>
<p><strong>4G vs. 5G</strong></p>
<ul>
<li>4G
<ul>
<li>10 ms</li>
<li>100 Thousand Connections / km^2</li>
<li>1 Gbps</li>
</ul>
</li>
<li>5G
<ul>
<li>&lt; 1ms</li>
<li>1 Million Connections / km^2</li>
<li>20 Gbps</li>
</ul>
</li>
</ul>
<p><strong>E-Commerce vs. M-Commerce</strong></p>
<ul>
<li>E-Commerce
<ul>
<li>Device: PC</li>
<li>Network: Internet (HTTP)</li>
</ul>
</li>
<li>M-Commerce
<ul>
<li>Device: Mobile devices</li>
<li>Network
<ul>
<li>Mobile carrier network</li>
<li>WiFi</li>
<li>Local frequency (RFID/NFC)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Definition of M-Commerce</strong></p>
<ul>
<li>Buying and Selling via mobile devices</li>
<li>Paying via mobile devices</li>
<li>Use of any technologies to support the above</li>
</ul>
<p><strong>Mobile Devices</strong></p>
<ul>
<li>Devices
<ul>
<li>Mobile phone/smart phone</li>
<li>Tablet computer</li>
<li>Wearable technology</li>
<li>&hellip;</li>
</ul>
</li>
<li>Usages
<ul>
<li>Transact</li>
<li>Communicate</li>
<li>Entertain</li>
</ul>
</li>
</ul>
<p><strong>Roles in M-Commerce</strong></p>
<ul>
<li>Users
<ul>
<li>End users/system users</li>
<li>Suppliers</li>
</ul>
</li>
<li>Network operators (offer transport facility and network infrastructure)</li>
<li>Service providers (develop new devices)</li>
<li>Content providers (aggregate contents)</li>
<li>Commerce mediators (provide solutions and services)</li>
<li>Finance organizations (provide framework and infrasture for payment)</li>
<li>Mobile device (interacting with all roles)</li>
</ul>
<p><strong>M-Commerce Services and Applications</strong></p>
<ul>
<li>Sevices
<ul>
<li>Mobile ticketing</li>
<li>Mobile money transfer</li>
<li>Conetent purchase and delivery</li>
<li>Information services</li>
<li>Mobile banking</li>
<li>Mobile browsing</li>
<li>Mobile purchase</li>
<li>Mobile marketing and advertising</li>
<li>&hellip;</li>
</ul>
</li>
<li>Applications
<ul>
<li>Entertainment
<ul>
<li>Music</li>
<li>Games</li>
<li>graphics</li>
<li>Video</li>
<li>&hellip;</li>
</ul>
</li>
<li>Communications
<ul>
<li>Short messaging</li>
<li>Multi-media messaging</li>
<li>Unified messaging</li>
<li>E-mail</li>
<li>Social</li>
<li>Video conferencing</li>
<li>&hellip;</li>
</ul>
</li>
<li>Transactions
<ul>
<li>Banking</li>
<li><a href="https://www.merriam-webster.com/dictionary/broking">Broking</a></li>
<li>Shopping</li>
<li>Auctions</li>
<li>Betting</li>
<li>Booking &amp; reservations</li>
<li>Mobile wallet</li>
<li>Mobile purse</li>
<li>&hellip;</li>
</ul>
</li>
<li>Information
<ul>
<li>News</li>
<li>City guides</li>
<li>Directory services</li>
<li>Maps</li>
<li>Traffic and weather</li>
<li>Corporate information</li>
<li>Market data</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>PTDs (Personal Trusted Devices)</strong></p>
<ul>
<li>Location and orientation</li>
<li>Multiple types of networking (NFC/Bluetooth)</li>
<li><a href="https://www.merriam-webster.com/dictionary/accelerometers">Accelerometers</a></li>
<li>Camera</li>
<li>&hellip;</li>
</ul>
<p><strong>QR Code (Quick Response Code)</strong></p>
<ul>
<li>Originally designed as a two-dimensional barcode (not for mobile)</li>
<li>Standardized (ISO/IEC 18004:2006)</li>
<li>Oatented (but free license)</li>
</ul>
<p><strong>Other Enabling Technologies</strong></p>
<ul>
<li>GPS
<ul>
<li>Widely available on most devices</li>
<li>Geo-loctaion and <a href="https://buildfire.com/what-is-geofencing/">geo-fencing</a></li>
<li>Doesn&rsquo;t work inside buildings</li>
<li>High battery consumption</li>
</ul>
</li>
<li>NFC/RFID
<ul>
<li>Great accuracy</li>
<li>Low cost</li>
<li>Not support on all devices</li>
<li>20cm range</li>
<li>High battery consumption</li>
</ul>
</li>
</ul>
<p><strong>Obstacles</strong></p>
<ul>
<li>Mobile device power
<ul>
<li>GPS/network calls cost hign power</li>
</ul>
</li>
<li>Privacy
<ul>
<li>Continuous tracking</li>
</ul>
</li>
<li>Network
<ul>
<li>Bandwidth</li>
<li>Congestion</li>
<li>Processing speed</li>
</ul>
</li>
</ul>
]]></content:encoded></item></channel></rss>