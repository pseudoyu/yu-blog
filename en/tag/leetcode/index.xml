<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode on Pseudoyu</title><link>https://www.pseudoyu.com/en/tag/leetcode/</link><description>Recent content in leetcode on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 May 2021 00:12:17 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/tag/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Data Structures for LeetCode Problem Solving (Go Edition)</title><link>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</link><pubDate>Sat, 29 May 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</guid><description>Preface Recently, I&amp;rsquo;ve resumed solving LeetCode algorithm problems using Go. For work-related algorithm practice, the main focus is on honing problem-solving approaches and coding skills, rather than employing complex data structures as in algorithmic competitions. The commonly used data structures and operations are relatively few, but mastering them can significantly improve one&amp;rsquo;s code quality. I&amp;rsquo;ve compiled this summary for easy reference.
Data Structures Arrays Initialization // Initialize an array of size 10 with default value 0 nums := make([10]int) // Initialize a two-dimensional boolean array visited := make([5][10]int) Common Methods for i := 0; i &amp;lt; len(nums); i++ { // Access num[i] } Strings Initialization s1 := &amp;#34;hello world&amp;#34; // Create a multi-line string s2 := `This is a multiline string.</description></item><item><title>Common Data Structures for LeetCode Problem Solving (Java Edition)</title><link>https://www.pseudoyu.com/en/2021/01/01/algorithm_data_structure_java/</link><pubDate>Fri, 01 Jan 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/01/01/algorithm_data_structure_java/</guid><description>Preface Recently, I&amp;rsquo;ve started solving algorithm problems on LeetCode. For job-related algorithm practice, the main focus is on honing problem-solving approaches and coding skills, rather than using complex data structures as in algorithm competitions. Therefore, the commonly used data structures and operations are not numerous. Proficient use of these can significantly improve one&amp;rsquo;s code quality. I&amp;rsquo;ve compiled this summary for easy reference.
Data Structures Array [] Initialization // Initialize an array of size 10 with default value 0 int[] nums = new int[10]; // Initialize a 2D boolean array boolean[][] visited = new boolean[5][10]; Common Methods // Generally, a non-empty check is performed at the beginning of a function, then elements are accessed using index if (nums.</description></item></channel></rss>