<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ethereum on Pseudoyu</title><link>https://www.pseudoyu.com/en/tag/ethereum/</link><description>Recent content in ethereum on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 Jul 2022 10:54:57 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/tag/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Two-Phase Commit in Solidity Smart Contracts Using State Locks</title><link>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</link><pubDate>Fri, 01 Jul 2022 10:54:57 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</guid><description>《后来的我们 - 五月天》 Preface In smart contract applications involving interactions between multiple systems or contracts, particularly in businesses where asset or data accuracy is sensitive, we need to ensure data atomicity throughout the entire business process. Therefore, we need to implement a mechanism similar to multi-phase commit at the contract level, which decomposes the state change process in the contract into two</description></item><item><title>Solidity Smart Contract Development - Using the Hardhat Framework</title><link>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</link><pubDate>Thu, 09 Jun 2022 14:38:10 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</guid><description>&amp;#39;Here After Us - Mayday&amp;#39; Preface After the previous articles on smart contract basics, Web3.py, and ethers.js, we have mastered the fundamental knowledge of interacting directly with blockchain networks through programs. For those unfamiliar, you can review:
Solidity Smart Contract Development - Basics Solidity Smart Contract Development - Mastering Web3.py Solidity Smart Contract Development - Mastering ethers.js However, in real complex business scenarios, we often use some further encapsulated frameworks, such as HardHat, Brownie, Truffle, etc.</description></item><item><title>Solidity Smart Contract Development - Mastering ethers.js</title><link>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</link><pubDate>Wed, 08 Jun 2022 00:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</guid><description>《後來的我們 - 五月天》 Preface In the previous article &amp;ldquo;Solidity Smart Contract Development - Basics&amp;rdquo;, we learned the basic syntax of Solidity and understood that we can debug using frameworks like Brownie and HardHat. In another article &amp;ldquo;Solidity Smart Contract Development - Mastering Web3.py&amp;rdquo;, we also interacted directly with our local Ganache node using Web3.py. Originally, because I was more familiar with Python,</description></item><item><title>Solidity Smart Contract Development - Mastering Web3.py</title><link>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</link><pubDate>Mon, 30 May 2022 15:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</guid><description>《后来的我们 - 五月天》 Preface In the previous article &amp;ldquo;Solidity Smart Contract Development - Basics&amp;rdquo;, we learned the basic syntax of Solidity and understood that we can debug using frameworks such as Brownie and HardHat. However, before using these pre-packaged frameworks, we can interact directly with our local Ganache node using Web3.py to better understand the principles and lay a solid foundation for</description></item><item><title>Solidity Smart Contract Development - Fundamentals</title><link>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</link><pubDate>Wed, 25 May 2022 01:07:33 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</guid><description>&amp;#39;Here After Us - Mayday&amp;#39; Preface Last year, during my graduate studies, I took the course &amp;ldquo;COMP7408 Distributed Ledger and Blockchain Technology&amp;rdquo; at HKU. In this course, I learned about Ethereum smart contract development and created a simple library management ÐApp. For my graduation project, I chose to develop a music copyright application based on Ethereum, which can be found at Uright - Blockchain Music Copyright Management ÐApp. Through these experiences, I gained a basic understanding of Solidity development.</description></item><item><title>Detailed Explanation of Ethereum MPT (Merkle Patricia Tries)</title><link>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</link><pubDate>Mon, 16 Aug 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</guid><description>Preface Recently, I received a work assignment to change the data structure of the project&amp;rsquo;s smart contract state tree from a red-black tree to a trie, and to compare the performance of the two data structures. The Trie mainly refers to Ethereum&amp;rsquo;s official Java implementation ethereum/ethereumj, while the red-black tree is implemented by myself. This article is a record of the theoretical and practical comparison of the two data structures.</description></item><item><title>Uright - Blockchain Music Copyright Management ÐApp</title><link>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</link><pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</guid><description>Uright - Blockchain Music Copyright Management ÐApp Introduction A music copyright management Decentralized Application (ÐApp) based on Angular+Solidity+Web3.js, applying technologies such as IPFS, ENS, and Oracles, deployed on Ethereum using Truffle.
The Uright decentralized application allows musicians (content owners) to register their works as &amp;ldquo;Manifestations&amp;rdquo; and record them on the Ethereum blockchain.
&amp;ldquo;Manifestations&amp;rdquo; present musicians&amp;rsquo; works as content fragments to prove authorship and ownership. This is accomplished through the &amp;ldquo;Manifestations&amp;rdquo; smart contract, which records the IPFS hash displaying the work&amp;rsquo;s content, title (planned additional metadata), and registration time.</description></item><item><title>Ethereum Core Technology Interpretation</title><link>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</link><pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</guid><description>Preface Bitcoin, as a decentralized digital currency, has been extremely successful. However, limited by the Bitcoin script (which is not Turing complete and can only handle simple logic), it cannot process very complex business operations. Ethereum introduced smart contracts, allowing the concept of decentralization to be applied to a wider range of application scenarios, thus also being called blockchain 2.0. This article will interpret the core technologies of Ethereum. Any errors or omissions are welcome for discussion and correction.</description></item></channel></rss>