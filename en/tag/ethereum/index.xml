<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ethereum on Pseudoyu</title><link>https://www.pseudoyu.com/en/tag/ethereum/</link><description>Recent content in ethereum on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 Jul 2022 10:54:57 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/tag/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>通过状态锁在 Solidity 智能合约中实现两阶段提交</title><link>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</link><pubDate>Fri, 01 Jul 2022 10:54:57 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/07/01/two_phase_commit_contract_practice_in_solidity/</guid><description>《后来的我们 - 五月天》 前言 在一些牵扯到多个系统或合约交互的智能合约应用场景中，尤其是一些资产/数据准确性较为敏感的业务中，我们需要保证在整个</description></item><item><title>Solidity 智能合约开发 - Hardhat 框架使用</title><link>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</link><pubDate>Thu, 09 Jun 2022 14:38:10 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</guid><description>《后来的我们 - 五月天》 前言 经过了前几篇对智能合约基础、Web3.py、ethers.js 的学习，我们已经掌握了通过程序与区块链网络直接交互的</description></item><item><title>Solidity 智能合约开发 - 玩转 ethers.js</title><link>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</link><pubDate>Wed, 08 Jun 2022 00:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</guid><description>《后来的我们 - 五月天》 前言 在之前的《Solidity 智能合约开发 - 基础》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 Brownie 与 HardHat 等框架进行调试。</description></item><item><title>Solidity 智能合约开发 - 玩转 Web3.py</title><link>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</link><pubDate>Mon, 30 May 2022 15:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/30/learn_solidity_from_scratch_web3py/</guid><description>《后来的我们 - 五月天》 前言 在前文《Solidity 智能合约开发 - 基础》中，我们学习了 Solidity 的基本语法，并且了解了可以通过 Brownie 与 HardHat 等框架进行调试。但</description></item><item><title>Solidity 智能合约开发 - 基础</title><link>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</link><pubDate>Wed, 25 May 2022 01:07:33 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/05/25/learn_solidity_from_scratch_basic/</guid><description>《后来的我们 - 五月天》 前言 去年读研的时候上的 HKU 的 &amp;lt;COMP7408 Distributed Ledger and Blockchain Technology&amp;gt;，课程中学习了以太坊智能合约的开发，做了一个简单的图书</description></item><item><title>Ethereum MPT（Merkle Patricia Tries）详解</title><link>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</link><pubDate>Mon, 16 Aug 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/</guid><description>前言 最近接到了一个工作任务，将项目智能合约状态树中的数据结构从红黑树改为字典树，并对比一下两个数据结构的性能，Trie 主要参照的是 Ethereum 官方的 Java</description></item><item><title>Uright - 区块链音乐版权管理ÐApp</title><link>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</link><pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</guid><description>Uright - 区块链音乐版权管理ÐApp 简介 基于 Angular+Solidity+Web3.js，应用 IPFS、ENS、Oracles 等技术，通过 Truffle 部</description></item><item><title>Ethereum 核心技术解读</title><link>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</link><pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</guid><description>前言 比特币作为一种去中心化的数字货币，是极其成功的，但受限于比特币脚本（非图灵完备，只能处理一些简单的逻辑），并不能处理很复杂的业务。而Et</description></item></channel></rss>