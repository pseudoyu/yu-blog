<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ethers.js on Pseudoyu</title><link>https://www.pseudoyu.com/en/tag/ethers.js/</link><description>Recent content in ethers.js on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 09 Jun 2022 14:38:10 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/tag/ethers.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Solidity Smart Contract Development - Using the Hardhat Framework</title><link>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</link><pubDate>Thu, 09 Jun 2022 14:38:10 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/09/learn_solidity_from_scratch_hardhat/</guid><description>&amp;#39;Here After Us - Mayday&amp;#39; Preface After the previous articles on smart contract basics, Web3.py, and ethers.js, we have mastered the fundamental knowledge of interacting directly with blockchain networks through programs. For those unfamiliar, you can review:
Solidity Smart Contract Development - Basics Solidity Smart Contract Development - Mastering Web3.py Solidity Smart Contract Development - Mastering ethers.js However, in real complex business scenarios, we often use some further encapsulated frameworks, such as HardHat, Brownie, Truffle, etc.</description></item><item><title>Solidity Smart Contract Development - Mastering ethers.js</title><link>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</link><pubDate>Wed, 08 Jun 2022 00:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/en/2022/06/08/learn_solidity_from_scratch_ethersjs/</guid><description>《後來的我們 - 五月天》 Preface In the previous article &amp;ldquo;Solidity Smart Contract Development - Basics&amp;rdquo;, we learned the basic syntax of Solidity and understood that we can debug using frameworks like Brownie and HardHat. In another article &amp;ldquo;Solidity Smart Contract Development - Mastering Web3.py&amp;rdquo;, we also interacted directly with our local Ganache node using Web3.py. Originally, because I was more familiar with Python,</description></item></channel></rss>