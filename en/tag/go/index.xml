<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Pseudoyu</title><link>https://www.pseudoyu.com/en/tag/go/</link><description>Recent content in go on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 01 Sep 2021 17:21:58 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/tag/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Hyperledger Fabric Go SDK Event Analysis</title><link>https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</link><pubDate>Wed, 01 Sep 2021 17:21:58 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</guid><description>Preface Recently, while working on a cross-chain adapter, I needed to use the Go SDK to connect to a Fabric network on a local chain and listen for events. Therefore, I&amp;rsquo;ve decided to summarize the events supported by Fabric and the listening methods provided by the SDK.
Fabric Events Events are a way for clients to interact with the Fabric network. As shown in the image above, after executing a transaction in the Fabric network, because it is done asynchronously, the client cannot obtain the submitted transaction status (whether it was accepted).</description></item><item><title>Go Error Handling Summary and Best Practices</title><link>https://www.pseudoyu.com/en/2021/08/29/go_error_handling/</link><pubDate>Sun, 29 Aug 2021 00:19:42 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/08/29/go_error_handling/</guid><description>Preface Recently, I&amp;rsquo;ve been reviewing and summarizing the Go Advanced Training Camp by Mr. Mao Jian from GeekTime. This is a course that leans more towards engineering and principles, covering a wide range of knowledge points. Therefore, I&amp;rsquo;ve decided to start a series to record and summarize, which will also facilitate my own review and reference. This is the first article in the series, &amp;ldquo;Go Error Handling&amp;rdquo;.
Go Error Handling Mechanism Go Built-in Errors In Go, an error is simply a regular interface representing a value:</description></item><item><title>Common Data Structures for LeetCode Problem Solving (Go Edition)</title><link>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</link><pubDate>Sat, 29 May 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/en/2021/05/29/algorithm_data_structure_go/</guid><description>Preface Recently, I&amp;rsquo;ve resumed solving LeetCode algorithm problems using Go. For work-related algorithm practice, the main focus is on honing problem-solving approaches and coding skills, rather than employing complex data structures as in algorithmic competitions. The commonly used data structures and operations are relatively few, but mastering them can significantly improve one&amp;rsquo;s code quality. I&amp;rsquo;ve compiled this summary for easy reference.
Data Structures Arrays Initialization // Initialize an array of size 10 with default value 0 nums := make([10]int) // Initialize a two-dimensional boolean array visited := make([5][10]int) Common Methods for i := 0; i &amp;lt; len(nums); i++ { // Access num[i] } Strings Initialization s1 := &amp;#34;hello world&amp;#34; // Create a multi-line string s2 := `This is a multiline string.</description></item></channel></rss>