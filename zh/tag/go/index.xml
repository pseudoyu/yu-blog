<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Pseudoyu</title><link>https://www.pseudoyu.com/zh/tag/go/</link><description>Recent content in go on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 12 Jan 2023 11:06:04 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/zh/tag/go/index.xml" rel="self" type="application/rss+xml"/><item><title>[译] Go 1.20 新变化！第一部分：语言特性</title><link>https://www.pseudoyu.com/zh/2023/01/12/golang_120_language_changes/</link><pubDate>Thu, 12 Jan 2023 11:06:04 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2023/01/12/golang_120_language_changes/</guid><description>前言 又到了 Go 发布新版本的时刻了！2022 年第一季度的 Go 1.18 是一个主版本，它在语言中增加了期待已久的泛型，同时还有许多微小功能更新与优化。202</description></item><item><title>[译] Google Go 风格指南</title><link>https://www.pseudoyu.com/zh/2022/12/08/go_style_guide/</link><pubDate>Thu, 08 Dec 2022 11:46:54 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2022/12/08/go_style_guide/</guid><description>《后来的我们 - 五月天》 风格原则 以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序： 清晰：代码的目的和设计原</description></item><item><title>[译] Go 新漏洞管理工具：govulncheck</title><link>https://www.pseudoyu.com/zh/2022/09/10/vulnerability_management_for_go/</link><pubDate>Sat, 10 Sep 2022 10:27:18 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2022/09/10/vulnerability_management_for_go/</guid><description>《后来的我们 - 五月天》 前言 我们很高兴地宣布 Go 对漏洞管理的最新支持，这是我们为帮助 Go 开发者了解可能影响他们的已知漏洞而迈出的第一步。 这篇文章概</description></item><item><title>[译] 是什么让 Golang 如此受欢迎？语言创造者的回顾</title><link>https://www.pseudoyu.com/zh/2022/06/06/golang_creators_look_back/</link><pubDate>Mon, 06 Jun 2022 18:21:45 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2022/06/06/golang_creators_look_back/</guid><description>《后来的我们 - 五月天》 前言 自从 2009 年开源以来，Go 语言的人气一直在增长。其最初创建时背后的五位谷歌软件工程师回顾了是什么推动了这种增长。 Go 的五</description></item><item><title>[译] 用 Go 编写一个简单的内存键值数据库</title><link>https://www.pseudoyu.com/zh/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</link><pubDate>Sat, 21 May 2022 14:53:51 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</guid><description>《后来的我们 - 五月天》 前言 从 Postgres 到 Redis，再到 Prometheus，我们都使用并从事过各种数据库的开发。我花了很多时间来阅读其中一些数据库</description></item><item><title>[译] 理解并用 Go 语言实现一个 HTTP 中间件</title><link>https://www.pseudoyu.com/zh/2022/02/15/building_middlewares_with_golang/</link><pubDate>Tue, 15 Feb 2022 18:24:01 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2022/02/15/building_middlewares_with_golang/</guid><description>简介 当运行在不同计算机上的客户端与服务器进行通信时，就需要使用中间件。通过本文，读者将会了解什么是中间件、中间件使用场景以及它们是如何在 Go 语</description></item><item><title>BitXHub 跨链插件（Fabric）源码解读</title><link>https://www.pseudoyu.com/zh/2021/09/09/blockchain_crosschain_bitxhub/</link><pubDate>Thu, 09 Sep 2021 15:14:26 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2021/09/09/blockchain_crosschain_bitxhub/</guid><description>前言 之前提到过趣链科技的 BitXHub 跨链平台是业界较为完善的跨链开源解决方案，主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了</description></item><item><title>[译] Go sync.Once 的妙用</title><link>https://www.pseudoyu.com/zh/2021/09/02/go_concurrency_sync_once/</link><pubDate>Thu, 02 Sep 2021 13:31:25 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2021/09/02/go_concurrency_sync_once/</guid><description>前言 如果你曾用过 Go 中的 goroutines，你也许会遇到几个并发原语，如 sync.Mutex, sync.WaitGroup 或是 sync.Map，但是你听说过 sync.Once 么？ 也许你听说过，那 go 文档是</description></item><item><title>Hyperledger Fabric Go SDK 事件分析</title><link>https://www.pseudoyu.com/zh/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</link><pubDate>Wed, 01 Sep 2021 17:21:58 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</guid><description>前言 最近在做跨链适配器，需要在一条本地链上利用 Go SDK 来连接 fabric 网络，并监听事件，所以对 fabric 所支持的事件与 SDK 所提供的监听方法做一下汇总。 Fabric 事件 事件是</description></item><item><title>Go 错误处理总结与实践</title><link>https://www.pseudoyu.com/zh/2021/08/29/go_error_handling/</link><pubDate>Sun, 29 Aug 2021 00:19:42 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2021/08/29/go_error_handling/</guid><description>前言 最近在对极客时间毛剑老师的 Go 进阶训练营进行重温和学习汇总，这是一门比较偏向于工程化以及原理层面的的课程，涵盖的知识点非常多，因此决定开一</description></item><item><title>LeetCode 刷题常用数据结构（Go 篇）</title><link>https://www.pseudoyu.com/zh/2021/05/29/algorithm_data_structure_go/</link><pubDate>Sat, 29 May 2021 00:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/zh/2021/05/29/algorithm_data_structure_go/</guid><description>前言 最近重新开始用 Go 刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以</description></item></channel></rss>