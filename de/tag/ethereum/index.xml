<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ethereum on Pseudoyu</title><link>https://www.pseudoyu.com/de/tag/ethereum/</link><description>Recent content in ethereum on Pseudoyu</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Fri, 01 Jul 2022 10:54:57 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/de/tag/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementierung von Two-Phase Commit in Solidity Smart Contracts unter Verwendung von State Locks</title><link>https://www.pseudoyu.com/de/2022/07/01/two_phase_commit_contract_practice_in_solidity/</link><pubDate>Fri, 01 Jul 2022 10:54:57 +0800</pubDate><guid>https://www.pseudoyu.com/de/2022/07/01/two_phase_commit_contract_practice_in_solidity/</guid><description>《后来的我们 - 五月天》 Vorwort In Smart-Contract-Anwendungen, die Interaktionen zwischen mehreren Systemen oder Verträgen beinhalten, insbesondere in Geschäftsbereichen, in denen die Genauigkeit von Vermögenswerte</description></item><item><title>Solidity Smart Contract Entwicklung - Verwendung des Hardhat Frameworks</title><link>https://www.pseudoyu.com/de/2022/06/09/learn_solidity_from_scratch_hardhat/</link><pubDate>Thu, 09 Jun 2022 14:38:10 +0800</pubDate><guid>https://www.pseudoyu.com/de/2022/06/09/learn_solidity_from_scratch_hardhat/</guid><description>&amp;#39;Here After Us - Mayday&amp;#39; Vorwort Nach den vorherigen Artikeln über Smart Contract Grundlagen, Web3.py und ethers.js haben wir die grundlegenden Kenntnisse zur direkten Interaktion mit Blockchain-Netzwerken durch Programme erworben. Für diejenigen, die damit nicht vertraut sind, können Sie folgende Artikel nachlesen:
Solidity Smart Contract Entwicklung - Grundlagen Solidity Smart Contract Entwicklung - Beherrschung von Web3.py Solidity Smart Contract Entwicklung - Beherrschung von ethers.js In realen komplexen Geschäftsszenarien verwenden wir jedoch oft weiter gekapselte Frameworks wie HardHat, Brownie, Truffle usw.</description></item><item><title>Solidity Smart Contract Entwicklung - Beherrschung von ethers.js</title><link>https://www.pseudoyu.com/de/2022/06/08/learn_solidity_from_scratch_ethersjs/</link><pubDate>Wed, 08 Jun 2022 00:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/de/2022/06/08/learn_solidity_from_scratch_ethersjs/</guid><description>《後來的我們 - 五月天》 Vorwort Im vorherigen Artikel &amp;ldquo;Solidity Smart Contract Entwicklung - Grundlagen&amp;rdquo; haben wir die grundlegende Syntax von Solidity kennengelernt und verstanden, dass wir mit Frameworks wie Brownie und HardHat debuggen können. In einem weiteren Artikel &amp;ldquo;Solidity Smart Contract Entwicklung - Beherrschung von Web3.py&amp;rdquo; haben wir auch direkt mit unserem lokalen Ganache-Node mittels Web3.py interagiert.</description></item><item><title>Solidity Smart Contract Entwicklung - Meistern von Web3.py</title><link>https://www.pseudoyu.com/de/2022/05/30/learn_solidity_from_scratch_web3py/</link><pubDate>Mon, 30 May 2022 15:25:45 +0800</pubDate><guid>https://www.pseudoyu.com/de/2022/05/30/learn_solidity_from_scratch_web3py/</guid><description>《后来的我们 - 五月天》 Vorwort Im vorherigen Artikel &amp;ldquo;Solidity Smart Contract Entwicklung - Grundlagen&amp;rdquo; haben wir die grundlegende Syntax von Solidity kennengelernt und verstanden, dass wir mit Frameworks wie Brownie und HardHat debuggen können. Bevor wir jedoch diese vorgefertigten Frameworks verwenden, können wir mit Web3.py direkt mit unserem lokalen Ganache-Node interagieren, um</description></item><item><title>Solidity Smart Contract Entwicklung - Grundlagen</title><link>https://www.pseudoyu.com/de/2022/05/25/learn_solidity_from_scratch_basic/</link><pubDate>Wed, 25 May 2022 01:07:33 +0800</pubDate><guid>https://www.pseudoyu.com/de/2022/05/25/learn_solidity_from_scratch_basic/</guid><description>&amp;#39;Here After Us - Mayday&amp;#39; Vorwort Im letzten Jahr habe ich während meines Masterstudiums den Kurs &amp;ldquo;COMP7408 Distributed Ledger and Blockchain Technology&amp;rdquo; an der HKU belegt. In diesem Kurs lernte ich über die Entwicklung von Ethereum Smart Contracts und erstellte eine einfache Bibliotheksverwaltungs-ÐApp. Für mein Abschlussprojekt entschied ich mich, eine Musik-Copyright-Anwendung basierend auf Ethereum zu entwickeln, die unter Uright - Blockchain Music Copyright Management ÐApp zu finden ist. Durch diese Erfahrungen gewann ich ein grundlegendes Verständnis für die Solidity-Entwicklung.</description></item><item><title>Detaillierte Erklärung des Ethereum MPT (Merkle Patricia Tries)</title><link>https://www.pseudoyu.com/de/2021/08/16/blockchain_ethereum_mpt/</link><pubDate>Mon, 16 Aug 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/de/2021/08/16/blockchain_ethereum_mpt/</guid><description>Vorwort Kürzlich erhielt ich eine Arbeitsaufgabe, die Datenstruktur des Zustandsbaums des Projekts-Smart-Contracts von einem Rot-Schwarz-Baum in einen Trie zu ändern und die Leistung der beiden Datenstrukturen zu vergleichen. Der Trie bezieht sich hauptsächlich auf die offizielle Java-Implementierung von Ethereum ethereum/ethereumj, während der Rot-Schwarz-Baum von mir selbst implementiert wurde. Dieser Artikel ist eine Aufzeichnung des theoretischen und praktischen Vergleichs der beiden Datenstrukturen.
Datenstrukturen Rot-Schwarz-Baum Ein Rot-Schwarz-Baum ist ein annähernd ausgewogener binärer Suchbaum, der rote und schwarze Knoten enthält und sicherstellt, dass der Höhenunterschied zwischen dem linken und rechten Teilbaum eines beliebigen Knotens weniger als das Zweifache beträgt.</description></item><item><title>Uright - Blockchain-basierte ÐApp für Musikurheberrechtsmanagement</title><link>https://www.pseudoyu.com/de/2021/05/10/uright_case_study/</link><pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate><guid>https://www.pseudoyu.com/de/2021/05/10/uright_case_study/</guid><description>Uright - Blockchain-basierte ÐApp für Musikurheberrechtsmanagement Einführung Eine dezentralisierte Anwendung (ÐApp) für Musikurheberrechtsmanagement, basierend auf Angular+Solidity+Web3.js, unter Anwendung von Technologien wie IPFS, ENS und Oracles, bereitgestellt auf Ethereum mit Truffle.
Die Uright dezentralisierte Anwendung ermöglicht es Musikern (Inhaltseigentümern), ihre Werke als &amp;ldquo;Manifestationen&amp;rdquo; zu registrieren und auf der Ethereum-Blockchain zu verzeichnen.
&amp;ldquo;Manifestationen&amp;rdquo; präsentieren die Werke der Musiker als Inhaltsfragmente, um Urheberschaft und Eigentum zu beweisen. Dies wird durch den &amp;ldquo;Manifestations&amp;rdquo; Smart Contract erreicht, der den IPFS-Hash, der den Inhalt des Werkes anzeigt, den Titel (geplante zusätzliche Metadaten) und die Registrierungszeit aufzeichnet.</description></item><item><title>Interpretation der Ethereum-Kerntechnologie</title><link>https://www.pseudoyu.com/de/2021/02/20/blockchain_ethereum_basic/</link><pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate><guid>https://www.pseudoyu.com/de/2021/02/20/blockchain_ethereum_basic/</guid><description>Vorwort Bitcoin als dezentralisierte digitale Währung war äußerst erfolgreich. Aufgrund der Einschränkungen des Bitcoin-Skripts (das nicht Turing-vollständig ist und nur einfache Logik verarbeiten kann) ist es jedoch nicht in der Lage, sehr komplexe Geschäftsoperationen zu verarbeiten. Ethereum führte Smart Contracts ein, die es ermöglichen, das Konzept der Dezentralisierung auf ein breiteres Spektrum von Anwendungsszenarien anzuwenden, und wird daher auch als Blockchain 2.0 bezeichnet. Dieser Artikel wird die Kerntechnologien von Ethereum interpretieren.</description></item></channel></rss>